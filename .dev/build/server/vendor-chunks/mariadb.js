"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mariadb";
exports.ids = ["vendor-chunks/mariadb"];
exports.modules = {

/***/ "(rsc)/./node_modules/mariadb/check-node.js":
/*!********************************************!*\
  !*** ./node_modules/mariadb/check-node.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst hasMinVersion = function(nodeVersionStr, connectorRequirement) {\n    const versNode = nodeVersionStr.split(\".\");\n    const versReq = connectorRequirement.split(\".\");\n    const majorNode = Number(versNode[0]);\n    const majorReq = Number(versReq[0]);\n    if (majorNode > majorReq) return true;\n    if (majorNode < majorReq) return false;\n    if (versReq.length === 1) return true;\n    const minorNode = Number(versNode[1]);\n    const minorReq = Number(versReq[1]);\n    if (minorNode > minorReq) return true;\n    if (minorNode < minorReq) return false;\n    return true;\n};\nmodule.exports.hasMinVersion = hasMinVersion;\nconst requirement = (__webpack_require__(/*! ./package.json */ \"(rsc)/./node_modules/mariadb/package.json\").engines.node);\nconst connectorRequirement = requirement.replace(\">=\", \"\").trim();\nconst currentNodeVersion = process.version.replace(\"v\", \"\");\nif (!hasMinVersion(currentNodeVersion, connectorRequirement)) {\n    console.error(`please upgrade node: mariadb requires at least version ${connectorRequirement}`);\n    process.exit(1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9jaGVjay1ub2RlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxrREFBa0Q7QUFFbEQ7QUFFQSxNQUFNQSxnQkFBZ0IsU0FBVUMsY0FBYyxFQUFFQyxvQkFBb0I7SUFDbEUsTUFBTUMsV0FBV0YsZUFBZUcsS0FBSyxDQUFDO0lBQ3RDLE1BQU1DLFVBQVVILHFCQUFxQkUsS0FBSyxDQUFDO0lBRTNDLE1BQU1FLFlBQVlDLE9BQU9KLFFBQVEsQ0FBQyxFQUFFO0lBQ3BDLE1BQU1LLFdBQVdELE9BQU9GLE9BQU8sQ0FBQyxFQUFFO0lBQ2xDLElBQUlDLFlBQVlFLFVBQVUsT0FBTztJQUNqQyxJQUFJRixZQUFZRSxVQUFVLE9BQU87SUFFakMsSUFBSUgsUUFBUUksTUFBTSxLQUFLLEdBQUcsT0FBTztJQUVqQyxNQUFNQyxZQUFZSCxPQUFPSixRQUFRLENBQUMsRUFBRTtJQUNwQyxNQUFNUSxXQUFXSixPQUFPRixPQUFPLENBQUMsRUFBRTtJQUNsQyxJQUFJSyxZQUFZQyxVQUFVLE9BQU87SUFDakMsSUFBSUQsWUFBWUMsVUFBVSxPQUFPO0lBRWpDLE9BQU87QUFDVDtBQUVBQyw0QkFBNEIsR0FBR1o7QUFFL0IsTUFBTWMsY0FBY0MscUdBQXNDO0FBQzFELE1BQU1iLHVCQUF1QlksWUFBWUksT0FBTyxDQUFDLE1BQU0sSUFBSUMsSUFBSTtBQUMvRCxNQUFNQyxxQkFBcUJDLFFBQVFDLE9BQU8sQ0FBQ0osT0FBTyxDQUFDLEtBQUs7QUFDeEQsSUFBSSxDQUFDbEIsY0FBY29CLG9CQUFvQmxCLHVCQUF1QjtJQUM1RHFCLFFBQVFDLEtBQUssQ0FBQyxDQUFDLHVEQUF1RCxFQUFFdEIscUJBQXFCLENBQUM7SUFDOUZtQixRQUFRSSxJQUFJLENBQUM7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvY2hlY2stbm9kZS5qcz82YzU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaGFzTWluVmVyc2lvbiA9IGZ1bmN0aW9uIChub2RlVmVyc2lvblN0ciwgY29ubmVjdG9yUmVxdWlyZW1lbnQpIHtcbiAgY29uc3QgdmVyc05vZGUgPSBub2RlVmVyc2lvblN0ci5zcGxpdCgnLicpO1xuICBjb25zdCB2ZXJzUmVxID0gY29ubmVjdG9yUmVxdWlyZW1lbnQuc3BsaXQoJy4nKTtcblxuICBjb25zdCBtYWpvck5vZGUgPSBOdW1iZXIodmVyc05vZGVbMF0pO1xuICBjb25zdCBtYWpvclJlcSA9IE51bWJlcih2ZXJzUmVxWzBdKTtcbiAgaWYgKG1ham9yTm9kZSA+IG1ham9yUmVxKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKG1ham9yTm9kZSA8IG1ham9yUmVxKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHZlcnNSZXEubGVuZ3RoID09PSAxKSByZXR1cm4gdHJ1ZTtcblxuICBjb25zdCBtaW5vck5vZGUgPSBOdW1iZXIodmVyc05vZGVbMV0pO1xuICBjb25zdCBtaW5vclJlcSA9IE51bWJlcih2ZXJzUmVxWzFdKTtcbiAgaWYgKG1pbm9yTm9kZSA+IG1pbm9yUmVxKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKG1pbm9yTm9kZSA8IG1pbm9yUmVxKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5oYXNNaW5WZXJzaW9uID0gaGFzTWluVmVyc2lvbjtcblxuY29uc3QgcmVxdWlyZW1lbnQgPSByZXF1aXJlKCcuL3BhY2thZ2UuanNvbicpLmVuZ2luZXMubm9kZTtcbmNvbnN0IGNvbm5lY3RvclJlcXVpcmVtZW50ID0gcmVxdWlyZW1lbnQucmVwbGFjZSgnPj0nLCAnJykudHJpbSgpO1xuY29uc3QgY3VycmVudE5vZGVWZXJzaW9uID0gcHJvY2Vzcy52ZXJzaW9uLnJlcGxhY2UoJ3YnLCAnJyk7XG5pZiAoIWhhc01pblZlcnNpb24oY3VycmVudE5vZGVWZXJzaW9uLCBjb25uZWN0b3JSZXF1aXJlbWVudCkpIHtcbiAgY29uc29sZS5lcnJvcihgcGxlYXNlIHVwZ3JhZGUgbm9kZTogbWFyaWFkYiByZXF1aXJlcyBhdCBsZWFzdCB2ZXJzaW9uICR7Y29ubmVjdG9yUmVxdWlyZW1lbnR9YCk7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn1cbiJdLCJuYW1lcyI6WyJoYXNNaW5WZXJzaW9uIiwibm9kZVZlcnNpb25TdHIiLCJjb25uZWN0b3JSZXF1aXJlbWVudCIsInZlcnNOb2RlIiwic3BsaXQiLCJ2ZXJzUmVxIiwibWFqb3JOb2RlIiwiTnVtYmVyIiwibWFqb3JSZXEiLCJsZW5ndGgiLCJtaW5vck5vZGUiLCJtaW5vclJlcSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlbWVudCIsInJlcXVpcmUiLCJlbmdpbmVzIiwibm9kZSIsInJlcGxhY2UiLCJ0cmltIiwiY3VycmVudE5vZGVWZXJzaW9uIiwicHJvY2VzcyIsInZlcnNpb24iLCJjb25zb2xlIiwiZXJyb3IiLCJleGl0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/check-node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cluster.js":
/*!*********************************************!*\
  !*** ./node_modules/mariadb/lib/cluster.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst ClusterOptions = __webpack_require__(/*! ./config/cluster-options */ \"(rsc)/./node_modules/mariadb/lib/config/cluster-options.js\");\nconst PoolOptions = __webpack_require__(/*! ./config/pool-options */ \"(rsc)/./node_modules/mariadb/lib/config/pool-options.js\");\nconst PoolCallback = __webpack_require__(/*! ./pool-callback */ \"(rsc)/./node_modules/mariadb/lib/pool-callback.js\");\nconst PoolPromise = __webpack_require__(/*! ./pool-promise */ \"(rsc)/./node_modules/mariadb/lib/pool-promise.js\");\nconst FilteredCluster = __webpack_require__(/*! ./filtered-cluster */ \"(rsc)/./node_modules/mariadb/lib/filtered-cluster.js\");\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\n/**\n * Create a new Cluster.\n * Cluster handle pools with patterns and handle failover / distributed load\n * according to selectors (round-robin / random / ordered )\n *\n * @param args      cluster arguments. see pool-cluster-options.\n * @constructor\n */ class Cluster extends EventEmitter {\n    #opts;\n    #nodes;\n    #cachedPatterns;\n    #nodeCounter;\n    constructor(args){\n        super();\n        this.#nodes = {};\n        this.#cachedPatterns = {};\n        this.#nodeCounter = 0;\n        this.#opts = new ClusterOptions(args);\n    }\n    /**\n   * Add a new pool node to cluster.\n   *\n   * @param id      identifier\n   * @param config  pool configuration\n   */ add(id, config) {\n        let identifier;\n        if (typeof id === \"string\" || id instanceof String) {\n            identifier = id;\n            if (this.#nodes[identifier]) throw new Error(`Node identifier '${identifier}' already exist !`);\n        } else {\n            identifier = \"PoolNode-\" + this.#nodeCounter++;\n            config = id;\n        }\n        const options = new PoolOptions(config);\n        this.#nodes[identifier] = this._createPool(options);\n    }\n    /**\n   * End cluster (and underlying pools).\n   *\n   * @return {Promise<any[]>}\n   */ end() {\n        const cluster = this;\n        this.#cachedPatterns = {};\n        const poolEndPromise = [];\n        Object.keys(this.#nodes).forEach((pool)=>{\n            const res = cluster.#nodes[pool].end();\n            if (res) poolEndPromise.push(res);\n        });\n        this.#nodes = null;\n        return Promise.all(poolEndPromise);\n    }\n    of(pattern, selector) {\n        return new FilteredCluster(this, pattern, selector);\n    }\n    /**\n   * Remove nodes according to pattern.\n   *\n   * @param pattern  pattern\n   */ remove(pattern) {\n        if (!pattern) throw new Error(\"pattern parameter in Cluster.remove(pattern)  is mandatory\");\n        const regex = RegExp(pattern);\n        Object.keys(this.#nodes).forEach((function(key) {\n            if (regex.test(key)) {\n                this.#nodes[key].end();\n                delete this.#nodes[key];\n                this.#cachedPatterns = {};\n            }\n        }).bind(this));\n    }\n    /**\n   * Get connection from available pools matching pattern, according to selector\n   *\n   * @param pattern       pattern filter (not mandatory)\n   * @param selector      node selector ('RR','RANDOM' or 'ORDER')\n   * @return {Promise}\n   */ getConnection(pattern, selector) {\n        return this._getConnection(pattern, selector, undefined, undefined, undefined);\n    }\n    /**\n   * Force using callback methods.\n   */ _setCallback() {\n        this.getConnection = this._getConnectionCallback;\n        this._createPool = this._createPoolCallback;\n    }\n    /**\n   * Get connection from available pools matching pattern, according to selector\n   * with additional parameter to avoid reusing failing node\n   *\n   * @param pattern       pattern filter (not mandatory)\n   * @param selector      node selector ('RR','RANDOM' or 'ORDER')\n   * @param avoidNodeKey  failing node\n   * @param lastError     last error\n   * @param remainingRetry remaining possible retry\n   * @return {Promise}\n   * @private\n   */ _getConnection(pattern, selector, remainingRetry, avoidNodeKey, lastError) {\n        const matchingNodeList = this._matchingNodes(pattern || /^/);\n        if (matchingNodeList.length === 0) {\n            if (Object.keys(this.#nodes).length === 0 && !lastError) {\n                return Promise.reject(new Error(\"No node have been added to cluster or nodes have been removed due to too much connection error\"));\n            }\n            if (avoidNodeKey === undefined) return Promise.reject(new Error(`No node found for pattern '${pattern}'`));\n            const errMsg = `No Connection available for '${pattern}'${lastError ? \". Last connection error was: \" + lastError.message : \"\"}`;\n            return Promise.reject(new Error(errMsg));\n        }\n        if (remainingRetry === undefined) remainingRetry = matchingNodeList.length;\n        const retry = --remainingRetry >= 0 ? this._getConnection.bind(this, pattern, selector, remainingRetry) : null;\n        try {\n            const nodeKey = this._selectPool(matchingNodeList, selector, avoidNodeKey);\n            return this._handleConnectionError(matchingNodeList, nodeKey, retry);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    _createPool(options) {\n        const pool = new PoolPromise(options);\n        pool.on(\"error\", (err)=>{});\n        return pool;\n    }\n    _createPoolCallback(options) {\n        const pool = new PoolCallback(options);\n        pool.on(\"error\", (err)=>{});\n        return pool;\n    }\n    /**\n   * Get connection from available pools matching pattern, according to selector\n   * with additional parameter to avoid reusing failing node\n   *\n   * @param pattern       pattern filter (not mandatory)\n   * @param selector      node selector ('RR','RANDOM' or 'ORDER')\n   * @param callback      callback function\n   * @param avoidNodeKey  failing node\n   * @param lastError     last error\n   * @private\n   */ _getConnectionCallback(pattern, selector, callback, avoidNodeKey, lastError) {\n        const matchingNodeList = this._matchingNodes(pattern || /^/);\n        if (matchingNodeList.length === 0) {\n            if (Object.keys(this.#nodes).length === 0 && !lastError) {\n                callback(new Error(\"No node have been added to cluster or nodes have been removed due to too much connection error\"));\n                return;\n            }\n            if (avoidNodeKey === undefined) callback(new Error(`No node found for pattern '${pattern}'`));\n            const errMsg = `No Connection available for '${pattern}'${lastError ? \". Last connection error was: \" + lastError.message : \"\"}`;\n            callback(new Error(errMsg));\n            return;\n        }\n        const retry = this._getConnectionCallback.bind(this, pattern, selector, callback);\n        try {\n            const nodeKey = this._selectPool(matchingNodeList, selector, avoidNodeKey);\n            this._handleConnectionCallbackError(matchingNodeList, nodeKey, retry, callback);\n        } catch (e) {\n            callback(e);\n        }\n    }\n    /**\n   * Selecting nodes according to pattern.\n   *\n   * @param pattern pattern\n   * @return {*}\n   * @private\n   */ _matchingNodes(pattern) {\n        if (this.#cachedPatterns[pattern]) return this.#cachedPatterns[pattern];\n        const regex = RegExp(pattern);\n        const matchingNodeList = [];\n        Object.keys(this.#nodes).forEach((key)=>{\n            if (regex.test(key)) {\n                matchingNodeList.push(key);\n            }\n        });\n        this.#cachedPatterns[pattern] = matchingNodeList;\n        return matchingNodeList;\n    }\n    /**\n   * Select next node to be chosen in nodeList according to selector and failed nodes.\n   *\n   * @param nodeList        current node list\n   * @param selectorParam   selector\n   * @param avoidNodeKey    last failing node to avoid selecting this one.\n   * @return {Promise}\n   * @private\n   */ _selectPool(nodeList, selectorParam, avoidNodeKey) {\n        const selector = selectorParam || this.#opts.defaultSelector;\n        let selectorFct;\n        switch(selector){\n            case \"RR\":\n                selectorFct = roundRobinSelector;\n                break;\n            case \"RANDOM\":\n                selectorFct = randomSelector;\n                break;\n            case \"ORDER\":\n                selectorFct = orderedSelector;\n                break;\n            default:\n                throw new Error(`Wrong selector value '${selector}'. Possible values are 'RR','RANDOM' or 'ORDER'`);\n        }\n        let nodeIdx = 0;\n        let nodeKey = selectorFct(nodeList, nodeIdx);\n        // first loop : search for node not blacklisted AND not the avoided key\n        while((avoidNodeKey === nodeKey || this.#nodes[nodeKey].blacklistedUntil && this.#nodes[nodeKey].blacklistedUntil > Date.now()) && nodeIdx < nodeList.length - 1){\n            nodeIdx++;\n            nodeKey = selectorFct(nodeList, nodeIdx);\n        }\n        if (avoidNodeKey === nodeKey) {\n            // second loop, search even in blacklisted node in order to choose a different node than to be avoided\n            nodeIdx = 0;\n            while(avoidNodeKey === nodeKey && nodeIdx < nodeList.length - 1){\n                nodeIdx++;\n                nodeKey = selectorFct(nodeList, nodeIdx);\n            }\n        }\n        return nodeKey;\n    }\n    /**\n   * Connect, or if fail handle retry / set timeout error\n   *\n   * @param nodeList    current node list\n   * @param nodeKey     node name to connect\n   * @param retryFct    retry function\n   * @return {Promise}\n   * @private\n   */ _handleConnectionError(nodeList, nodeKey, retryFct) {\n        const cluster = this;\n        const node = this.#nodes[nodeKey];\n        return node.getConnection().then((conn)=>{\n            node.blacklistedUntil = null;\n            node.errorCount = 0;\n            return Promise.resolve(conn);\n        }).catch((err)=>{\n            node.errorCount = node.errorCount ? node.errorCount + 1 : 1;\n            node.blacklistedUntil = Date.now() + cluster.#opts.restoreNodeTimeout;\n            if (cluster.#opts.removeNodeErrorCount && node.errorCount >= cluster.#opts.removeNodeErrorCount && cluster.#nodes[nodeKey]) {\n                delete cluster.#nodes[nodeKey];\n                cluster.#cachedPatterns = {};\n                delete nodeList.lastRrIdx;\n                setImmediate(cluster.emit.bind(cluster, \"remove\", nodeKey));\n                //remove node from configuration if not already removed\n                node.end().catch((err)=>{\n                // dismiss error\n                });\n            }\n            if (nodeList.length !== 0 && cluster.#opts.canRetry && retryFct) {\n                return retryFct(nodeKey, err);\n            }\n            return Promise.reject(err);\n        });\n    }\n    /**\n   * Connect, or if fail handle retry / set timeout error\n   *\n   * @param nodeList    current node list\n   * @param nodeKey     node name to connect\n   * @param retryFct    retry function\n   * @param callback    callback function\n   * @private\n   */ _handleConnectionCallbackError(nodeList, nodeKey, retryFct, callback) {\n        const cluster = this;\n        const node = this.#nodes[nodeKey];\n        node.getConnection((err, conn)=>{\n            if (err) {\n                node.errorCount = node.errorCount ? node.errorCount + 1 : 1;\n                node.blacklistedUntil = Date.now() + cluster.#opts.restoreNodeTimeout;\n                if (cluster.#opts.removeNodeErrorCount && node.errorCount >= cluster.#opts.removeNodeErrorCount && cluster.#nodes[nodeKey]) {\n                    delete cluster.#nodes[nodeKey];\n                    cluster.#cachedPatterns = {};\n                    delete nodeList.lastRrIdx;\n                    setImmediate(cluster.emit.bind(cluster, \"remove\", nodeKey));\n                    //remove node from configuration if not already removed\n                    node.end(()=>{\n                    //dismiss error\n                    });\n                }\n                if (nodeList.length !== 0 && cluster.#opts.canRetry && retryFct) {\n                    return retryFct(nodeKey, err);\n                }\n                callback(err);\n            } else {\n                node.errorCount = 0;\n                callback(null, conn);\n            }\n        });\n    }\n    //*****************************************************************\n    // internal public testing methods\n    //*****************************************************************\n    get __tests() {\n        return new TestMethods(this.#nodes);\n    }\n}\nclass TestMethods {\n    #nodes;\n    constructor(nodes){\n        this.#nodes = nodes;\n    }\n    getNodes() {\n        return this.#nodes;\n    }\n}\n/**\n * Round robin selector: using nodes one after the other.\n *\n * @param nodeList  node list\n * @return {String}\n */ const roundRobinSelector = (nodeList)=>{\n    let lastRoundRobin = nodeList.lastRrIdx;\n    if (lastRoundRobin === undefined) lastRoundRobin = -1;\n    if (++lastRoundRobin >= nodeList.length) lastRoundRobin = 0;\n    nodeList.lastRrIdx = lastRoundRobin;\n    return nodeList[lastRoundRobin];\n};\n/**\n * Random selector: use a random node.\n *\n * @param nodeList  node list\n * @return {String}\n */ const randomSelector = (nodeList)=>{\n    let randomIdx = Math.floor(Math.random() * nodeList.length);\n    return nodeList[randomIdx];\n};\n/**\n * Ordered selector: always use the nodes in sequence, unless failing.\n *\n * @param nodeList  node list\n * @param retry     sequence number if last node is tagged has failing\n * @return {String}\n */ const orderedSelector = (nodeList, retry)=>{\n    return nodeList[retry];\n};\nmodule.exports = Cluster;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cluster.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/batch-bulk.js":
/*!****************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/batch-bulk.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Parser = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/mariadb/lib/cmd/parser.js\");\nconst Errors = __webpack_require__(/*! ../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst BinaryEncoder = __webpack_require__(/*! ./encoder/binary-encoder */ \"(rsc)/./node_modules/mariadb/lib/cmd/encoder/binary-encoder.js\");\nconst FieldType = __webpack_require__(/*! ../const/field-type */ \"(rsc)/./node_modules/mariadb/lib/const/field-type.js\");\nconst OkPacket = __webpack_require__(/*! ./class/ok-packet */ \"(rsc)/./node_modules/mariadb/lib/cmd/class/ok-packet.js\");\n/**\n * Protocol COM_STMT_BULK_EXECUTE\n * see : https://mariadb.com/kb/en/library/com_stmt_bulk_execute/\n */ class BatchBulk extends Parser {\n    constructor(resolve, reject, connOpts, prepare, cmdParam){\n        super(resolve, reject, connOpts, cmdParam);\n        this.encoder = new BinaryEncoder(this.opts);\n        this.cmdOpts = cmdParam.opts;\n        this.binary = true;\n        this.prepare = prepare;\n        this.canSkipMeta = true;\n    }\n    /**\n   * Send COM_STMT_BULK_EXECUTE\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */ start(out, opts, info) {\n        this.info = info;\n        this.values = this.initialValues;\n        if (this.cmdOpts && this.cmdOpts.timeout) {\n            this.bulkPacketNo = 1;\n            this.sending = false;\n            return this.sendCancelled(\"Cannot use timeout for Batch statement\", Errors.ER_TIMEOUT_NOT_SUPPORTED);\n        }\n        this.onPacketReceive = this.readResponsePacket;\n        if (this.opts.namedPlaceholders && this.prepare._placeHolderIndex) {\n            // using named placeholders, so change values accordingly\n            this.values = [];\n            if (this.initialValues) {\n                for(let r = 0; r < this.initialValues.length; r++){\n                    let val = this.initialValues[r];\n                    this.values[r] = new Array(this.prepare.parameterCount);\n                    for(let i = 0; i < this.prepare._placeHolderIndex.length; i++){\n                        this.values[r][i] = val[this.prepare._placeHolderIndex[i]];\n                    }\n                }\n            }\n        } else {\n            this.values = this.initialValues;\n        }\n        if (!this.validateParameters(info)) return;\n        this.sendComStmtBulkExecute(out, opts, info);\n    }\n    /**\n   * Set header type\n   * @param value current value\n   * @param parameterCount parameter number\n   * @returns {*[]} header type array\n   */ parameterHeaderFromValue(value, parameterCount) {\n        const parameterHeaderType = new Array(parameterCount);\n        // set header type\n        for(let i = 0; i < parameterCount; i++){\n            const val = value[i];\n            if (val != null) {\n                switch(typeof val){\n                    case \"boolean\":\n                        parameterHeaderType[i] = FieldType.TINY;\n                        break;\n                    case \"bigint\":\n                        if (val >= 2n ** 63n) {\n                            parameterHeaderType[i] = FieldType.NEWDECIMAL;\n                        } else {\n                            parameterHeaderType[i] = FieldType.BIGINT;\n                        }\n                        break;\n                    case \"number\":\n                        // additional verification, to permit query without type,\n                        // like 'SELECT ?' returning same type of value\n                        if (Number.isSafeInteger(val) && val >= -2147483648 && val < 2147483647) {\n                            parameterHeaderType[i] = FieldType.INT;\n                            break;\n                        }\n                        parameterHeaderType[i] = FieldType.DOUBLE;\n                        break;\n                    case \"string\":\n                        parameterHeaderType[i] = FieldType.VAR_STRING;\n                        break;\n                    case \"object\":\n                        if (val instanceof Date) {\n                            parameterHeaderType[i] = FieldType.TIMESTAMP;\n                        } else if (Buffer.isBuffer(val)) {\n                            parameterHeaderType[i] = FieldType.BLOB;\n                        } else if (typeof val.toSqlString === \"function\") {\n                            parameterHeaderType[i] = FieldType.VAR_STRING;\n                        } else {\n                            if (val.type != null && [\n                                \"Point\",\n                                \"LineString\",\n                                \"Polygon\",\n                                \"MultiPoint\",\n                                \"MultiLineString\",\n                                \"MultiPolygon\",\n                                \"GeometryCollection\"\n                            ].includes(val.type)) {\n                                parameterHeaderType[i] = FieldType.BLOB;\n                            } else {\n                                parameterHeaderType[i] = FieldType.VAR_STRING;\n                            }\n                        }\n                        break;\n                    default:\n                        parameterHeaderType[i] = FieldType.BLOB;\n                        break;\n                }\n            } else {\n                parameterHeaderType[i] = FieldType.VAR_STRING;\n            }\n        }\n        return parameterHeaderType;\n    }\n    /**\n   * Check current value has same header than set in initial BULK header\n   *\n   * @param parameterHeaderType current header\n   * @param value current value\n   * @param parameterCount number of parameter\n   * @returns {boolean} true if identical\n   */ checkSameHeader(parameterHeaderType, value, parameterCount) {\n        // set header type\n        let val;\n        for(let i = 0; i < parameterCount; i++){\n            if ((val = value[i]) != null) {\n                switch(typeof val){\n                    case \"boolean\":\n                        if (parameterHeaderType[i] !== FieldType.TINY) return false;\n                        break;\n                    case \"bigint\":\n                        if (val >= 2n ** 63n) {\n                            if (parameterHeaderType[i] !== FieldType.VAR_STRING) return false;\n                        } else {\n                            if (parameterHeaderType[i] !== FieldType.BIGINT) return false;\n                        }\n                        break;\n                    case \"number\":\n                        // additional verification, to permit query without type,\n                        // like 'SELECT ?' returning same type of value\n                        if (Number.isSafeInteger(val) && val >= -2147483648 && val < 2147483647) {\n                            if (parameterHeaderType[i] !== FieldType.INT) return false;\n                            break;\n                        }\n                        if (parameterHeaderType[i] !== FieldType.DOUBLE) return false;\n                        break;\n                    case \"string\":\n                        if (parameterHeaderType[i] !== FieldType.VAR_STRING) return false;\n                        break;\n                    case \"object\":\n                        if (val instanceof Date) {\n                            if (parameterHeaderType[i] !== FieldType.TIMESTAMP) return false;\n                        } else if (Buffer.isBuffer(val)) {\n                            if (parameterHeaderType[i] !== FieldType.BLOB) return false;\n                        } else if (typeof val.toSqlString === \"function\") {\n                            if (parameterHeaderType[i] !== FieldType.VAR_STRING) return false;\n                        } else {\n                            if (val.type != null && [\n                                \"Point\",\n                                \"LineString\",\n                                \"Polygon\",\n                                \"MultiPoint\",\n                                \"MultiLineString\",\n                                \"MultiPolygon\",\n                                \"GeometryCollection\"\n                            ].includes(val.type)) {\n                                if (parameterHeaderType[i] !== FieldType.BLOB) return false;\n                            } else {\n                                if (parameterHeaderType[i] !== FieldType.VAR_STRING) return false;\n                            }\n                        }\n                        break;\n                    default:\n                        if (parameterHeaderType[i] !== FieldType.BLOB) return false;\n                        break;\n                }\n            }\n        }\n        return true;\n    }\n    /**\n   * Send a COM_STMT_BULK_EXECUTE\n   * @param out output packet writer\n   * @param opts options\n   * @param info information\n   */ sendComStmtBulkExecute(out, opts, info) {\n        if (opts.logger.query) opts.logger.query(`BULK: (${this.prepare.id}) sql: ${opts.logger.logParam ? this.displaySql() : this.sql}`);\n        const parameterCount = this.prepare.parameterCount;\n        this.rowIdx = 0;\n        this.vals = this.values[this.rowIdx++];\n        let parameterHeaderType = this.parameterHeaderFromValue(this.vals, parameterCount);\n        let lastCmdData = null;\n        this.bulkPacketNo = 0;\n        this.sending = true;\n        /**\n     * Implementation After writing bunch of parameter to buffer is marked. then : - when writing\n     * next bunch of parameter, if buffer grow more than max_allowed_packet, send buffer up to mark,\n     * then create a new packet with current bunch of data - if bunch of parameter data type changes\n     * send buffer up to mark, then create a new packet with new data type.\n     *\n     * <p>Problem remains if a bunch of parameter is bigger than max_allowed_packet\n     */ main_loop: while(true){\n            this.bulkPacketNo++;\n            out.startPacket(this);\n            out.writeInt8(0xfa); // COM_STMT_BULK_EXECUTE\n            out.writeInt32(this.prepare.id); // Statement id\n            out.writeInt16(128); // always SEND_TYPES_TO_SERVER\n            for(let i = 0; i < parameterCount; i++){\n                out.writeInt16(parameterHeaderType[i]);\n            }\n            if (lastCmdData != null) {\n                const err = out.checkMaxAllowedLength(lastCmdData.length, info);\n                if (err) {\n                    this.throwError(err, info);\n                    return;\n                }\n                out.writeBuffer(lastCmdData, 0, lastCmdData.length);\n                out.mark();\n                lastCmdData = null;\n                if (!this.rowIdx >= this.values.length) {\n                    break;\n                }\n                this.vals = this.values[this.rowIdx++];\n            }\n            parameter_loop: while(true){\n                for(let i = 0; i < parameterCount; i++){\n                    let param = this.vals[i];\n                    if (param != null) {\n                        // special check for GEOJSON that can be null even if object is not\n                        if (param.type != null && [\n                            \"Point\",\n                            \"LineString\",\n                            \"Polygon\",\n                            \"MultiPoint\",\n                            \"MultiLineString\",\n                            \"MultiPolygon\",\n                            \"GeometryCollection\"\n                        ].includes(param.type)) {\n                            const geoBuff = BinaryEncoder.getBufferFromGeometryValue(param);\n                            if (geoBuff == null) {\n                                out.writeInt8(0x01); // value is null\n                            } else {\n                                out.writeInt8(0x00); // value follow\n                                param = Buffer.concat([\n                                    Buffer.from([\n                                        0,\n                                        0,\n                                        0,\n                                        0\n                                    ]),\n                                    geoBuff // WKB\n                                ]);\n                                this.encoder.writeParam(out, param, this.opts, info);\n                            }\n                        } else {\n                            out.writeInt8(0x00); // value follow\n                            this.encoder.writeParam(out, param, this.opts, info);\n                        }\n                    } else {\n                        out.writeInt8(0x01); // value is null\n                    }\n                }\n                if (!out.bufIsDataAfterMark() && !out.isMarked() && out.hasFlushed()) {\n                    // parameter were too big to fit in a MySQL packet\n                    // need to finish the packet separately\n                    out.flush();\n                    if (!this.rowIdx >= this.values.length) {\n                        break main_loop;\n                    }\n                    this.vals = this.values[this.rowIdx++];\n                    // reset header type\n                    parameterHeaderType = this.parameterHeaderFromValue(this.vals, parameterCount);\n                    break parameter_loop;\n                }\n                if (out.isMarked() && out.bufIsAfterMaxPacketLength()) {\n                    // for max_allowed_packet < 16Mb\n                    // packet length was ok at last mark, but won't with new data\n                    out.flushBufferStopAtMark();\n                    out.mark();\n                    lastCmdData = out.resetMark();\n                    break;\n                }\n                out.mark();\n                if (out.bufIsDataAfterMark()) {\n                    // flush has been done\n                    lastCmdData = out.resetMark();\n                    break;\n                }\n                if (this.rowIdx >= this.values.length) {\n                    break main_loop;\n                }\n                this.vals = this.values[this.rowIdx++];\n                // ensure type has not changed\n                if (!this.checkSameHeader(parameterHeaderType, this.vals, parameterCount)) {\n                    out.flush();\n                    // reset header type\n                    parameterHeaderType = this.parameterHeaderFromValue(this.vals, parameterCount);\n                    break parameter_loop;\n                }\n            }\n        }\n        out.flush();\n        this.sending = false;\n        this.emit(\"send_end\");\n    }\n    displaySql() {\n        if (this.sql.length > this.opts.debugLen) {\n            return this.sql.substring(0, this.opts.debugLen) + \"...\";\n        }\n        let sqlMsg = this.sql + \" - parameters:[\";\n        for(let i = 0; i < this.initialValues.length; i++){\n            if (i !== 0) sqlMsg += \",\";\n            let param = this.initialValues[i];\n            sqlMsg = this.logParameters(sqlMsg, param);\n            if (sqlMsg.length > this.opts.debugLen) {\n                sqlMsg = sqlMsg.substring(0, this.opts.debugLen) + \"...\";\n                break;\n            }\n        }\n        sqlMsg += \"]\";\n        return sqlMsg;\n    }\n    success(val) {\n        this.bulkPacketNo--;\n        // fast path doesn't push OkPacket if ony one results\n        if (this._responseIndex === 0) {\n            if (this.opts.metaAsArray) {\n                if (val[0] instanceof OkPacket) this._rows.push(val[0]);\n            } else if (val instanceof OkPacket) this._rows.push(val);\n        }\n        if (!this.sending && this.bulkPacketNo === 0) {\n            this.packet = null;\n            if (this.firstError) {\n                this.resolve = null;\n                this.onPacketReceive = null;\n                this._columns = null;\n                this._rows = null;\n                process.nextTick(this.reject, this.firstError);\n                this.reject = null;\n                this.emit(\"end\", this.firstError);\n            } else {\n                if (this._rows[0].affectedRows !== undefined) {\n                    // ok packets, reassemble them if needed\n                    let totalAffectedRows = 0;\n                    this._rows.forEach((row)=>{\n                        totalAffectedRows += row.affectedRows;\n                    });\n                    const rs = new OkPacket(totalAffectedRows, this._rows[0].insertId, this._rows[this._rows.length - 1].warningStatus);\n                    this.successEnd(this.opts.metaAsArray ? [\n                        rs,\n                        []\n                    ] : rs);\n                } else {\n                    if (this._rows.length === 1) {\n                        this.successEnd(this.opts.metaAsArray ? [\n                            this._rows[0],\n                            this._columns\n                        ] : this._rows[0]);\n                    }\n                    if (this.opts.metaAsArray) {\n                        if (this._rows.length === 1) {\n                            this.successEnd([\n                                this._rows[0],\n                                this._columns\n                            ]);\n                        } else {\n                            const rs = [];\n                            this._rows.forEach((row)=>{\n                                rs.push(...row);\n                            });\n                            this.successEnd([\n                                rs,\n                                this._columns\n                            ]);\n                        }\n                    } else {\n                        // insert with returning\n                        if (this._rows.length === 1) {\n                            this.successEnd(this._rows[0]);\n                        } else {\n                            const rs = [];\n                            this._rows.forEach((row)=>{\n                                rs.push(...row);\n                            });\n                            Object.defineProperty(rs, \"meta\", {\n                                value: this._columns,\n                                writable: true,\n                                enumerable: this.opts.metaEnumerable\n                            });\n                            this.successEnd(rs);\n                        }\n                    }\n                }\n                this._columns = null;\n                this._rows = null;\n            }\n            return;\n        }\n        if (!this.firstError) {\n            this._responseIndex++;\n            this.onPacketReceive = this.readResponsePacket;\n        }\n    }\n    throwError(err, info) {\n        this.bulkPacketNo--;\n        if (!this.firstError) {\n            if (err.fatal) {\n                this.bulkPacketNo = 0;\n            }\n            if (this.stack) {\n                err = Errors.createError(err.message, err.errno, info, err.sqlState, this.sql, err.fatal, this.stack, false);\n            }\n            this.firstError = err;\n        }\n        if (!this.sending && this.bulkPacketNo === 0) {\n            this.resolve = null;\n            this.emit(\"send_end\");\n            process.nextTick(this.reject, this.firstError);\n            this.reject = null;\n            this.onPacketReceive = null;\n            this.emit(\"end\", this.firstError);\n        } else {\n            this._responseIndex++;\n            this.onPacketReceive = this.readResponsePacket;\n        }\n    }\n    /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */ validateParameters(info) {\n        //validate parameter size.\n        const nbParameter = this.prepare.parameterCount;\n        for(let r = 0; r < this.values.length; r++){\n            if (!Array.isArray(this.values[r])) this.values[r] = [\n                this.values[r]\n            ];\n            //validate parameter is defined.\n            if (this.values[r].length < nbParameter) {\n                this.emit(\"send_end\");\n                this.throwNewError(`Expect ${nbParameter} parameters, but at index ${r}, parameters only contains ${this.values[r].length}\\n ${this.displaySql()}`, false, info, \"HY000\", Errors.ER_PARAMETER_UNDEFINED);\n                return false;\n            }\n        }\n        return true;\n    }\n}\nmodule.exports = BatchBulk;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/batch-bulk.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/change-user.js":
/*!*****************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/change-user.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n// noinspection JSBitwiseOperatorUsage\n\nconst Iconv = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\");\nconst Capabilities = __webpack_require__(/*! ../const/capabilities */ \"(rsc)/./node_modules/mariadb/lib/const/capabilities.js\");\nconst Ed25519PasswordAuth = __webpack_require__(/*! ./handshake/auth/ed25519-password-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/ed25519-password-auth.js\");\nconst NativePasswordAuth = __webpack_require__(/*! ./handshake/auth/native-password-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/native-password-auth.js\");\nconst Collations = __webpack_require__(/*! ../const/collations */ \"(rsc)/./node_modules/mariadb/lib/const/collations.js\");\nconst Authentication = __webpack_require__(/*! ./handshake/authentication */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/authentication.js\");\n/**\n * send a COM_CHANGE_USER: resets the connection and re-authenticates with the given credentials\n * see https://mariadb.com/kb/en/library/com_change_user/\n */ class ChangeUser extends Authentication {\n    constructor(cmdParam, connOpts, resolve, reject, getSocket){\n        super(cmdParam, resolve, reject, ()=>{}, getSocket);\n        this.configAssign(connOpts, cmdParam.opts);\n    }\n    start(out, opts, info) {\n        if (opts.logger.query) opts.logger.query(`CHANGE USER to '${this.opts.user || \"\"}'`);\n        let authToken;\n        const pwd = Array.isArray(this.opts.password) ? this.opts.password[0] : this.opts.password;\n        switch(info.defaultPluginName){\n            case \"mysql_native_password\":\n            case \"\":\n                authToken = NativePasswordAuth.encryptSha1Password(pwd, info.seed);\n                break;\n            case \"client_ed25519\":\n                authToken = Ed25519PasswordAuth.encryptPassword(pwd, info.seed);\n                break;\n            default:\n                authToken = Buffer.alloc(0);\n                break;\n        }\n        out.startPacket(this);\n        out.writeInt8(0x11);\n        out.writeString(this.opts.user || \"\");\n        out.writeInt8(0);\n        if (info.serverCapabilities & Capabilities.SECURE_CONNECTION) {\n            out.writeInt8(authToken.length);\n            out.writeBuffer(authToken, 0, authToken.length);\n        } else {\n            out.writeBuffer(authToken, 0, authToken.length);\n            out.writeInt8(0);\n        }\n        if (info.clientCapabilities & Capabilities.CONNECT_WITH_DB) {\n            out.writeString(this.opts.database);\n            out.writeInt8(0);\n            info.database = this.opts.database;\n        }\n        // handle default collation.\n        if (this.opts.collation) {\n            // collation has been set using charset.\n            // If server use same charset, use server collation.\n            if (!this.opts.charset || info.collation.charset !== this.opts.collation.charset) {\n                info.collation = this.opts.collation;\n            }\n        } else {\n            // if not utf8mb4 and no configuration, force to use UTF8MB4_UNICODE_CI\n            if (info.collation.charset !== \"utf8\" || info.collation.maxLength === 3) {\n                info.collation = Collations.fromIndex(224);\n            }\n        }\n        out.writeInt16(info.collation.index);\n        if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n            out.writeString(info.defaultPluginName);\n            out.writeInt8(0);\n        }\n        if (info.clientCapabilities & Capabilities.CONNECT_ATTRS) {\n            out.writeInt8(0xfc);\n            let initPos = out.pos; //save position, assuming connection attributes length will be less than 2 bytes length\n            out.writeInt16(0);\n            const encoding = info.collation.charset;\n            writeParam(out, \"_client_name\", encoding);\n            writeParam(out, \"MariaDB connector/Node\", encoding);\n            let packageJson = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/mariadb/package.json\");\n            writeParam(out, \"_client_version\", encoding);\n            writeParam(out, packageJson.version, encoding);\n            writeParam(out, \"_node_version\", encoding);\n            writeParam(out, process.versions.node, encoding);\n            if (opts.connectAttributes !== true) {\n                let attrNames = Object.keys(this.opts.connectAttributes);\n                for(let k = 0; k < attrNames.length; ++k){\n                    writeParam(out, attrNames[k], encoding);\n                    writeParam(out, this.opts.connectAttributes[attrNames[k]], encoding);\n                }\n            }\n            //write end size\n            out.writeInt16AtPos(initPos);\n        }\n        out.flush();\n        this.plugin.onPacketReceive = this.handshakeResult.bind(this);\n    }\n    /**\n   * Assign global configuration option used by result-set to current query option.\n   * a little faster than Object.assign() since doest copy all information\n   *\n   * @param connOpts  connection global configuration\n   * @param cmdOpts   current options\n   */ configAssign(connOpts, cmdOpts) {\n        if (!cmdOpts) {\n            this.opts = connOpts;\n            return;\n        }\n        this.opts = cmdOpts ? Object.assign({}, connOpts, cmdOpts) : connOpts;\n        if (cmdOpts.charset && typeof cmdOpts.charset === \"string\") {\n            this.opts.collation = Collations.fromCharset(cmdOpts.charset.toLowerCase());\n            if (this.opts.collation === undefined) {\n                this.opts.collation = Collations.fromName(cmdOpts.charset.toUpperCase());\n                if (this.opts.collation !== undefined) {\n                    this.opts.logger.warning(\"warning: please use option 'collation' \" + \"in replacement of 'charset' when using a collation name ('\" + cmdOpts.charset + \"')\\n\" + \"(collation looks like 'UTF8MB4_UNICODE_CI', charset like 'utf8').\");\n                }\n            }\n            if (this.opts.collation === undefined) throw new RangeError(\"Unknown charset '\" + cmdOpts.charset + \"'\");\n        } else if (cmdOpts.collation && typeof cmdOpts.collation === \"string\") {\n            const initial = cmdOpts.collation;\n            this.opts.collation = Collations.fromName(initial.toUpperCase());\n            if (this.opts.collation === undefined) throw new RangeError(\"Unknown collation '\" + initial + \"'\");\n        } else {\n            this.opts.collation = Collations.fromIndex(cmdOpts.charsetNumber) || connOpts.collation;\n        }\n        connOpts.password = cmdOpts.password;\n    }\n}\nfunction writeParam(out, val, encoding) {\n    let param = Buffer.isEncoding(encoding) ? Buffer.from(val, encoding) : Iconv.encode(val, encoding);\n    out.writeLengthCoded(param.length);\n    out.writeBuffer(param, 0, param.length);\n}\nmodule.exports = ChangeUser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/change-user.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/class/ok-packet.js":
/*!*********************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/class/ok-packet.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\n/**\n * Ok_Packet\n * see https://mariadb.com/kb/en/ok_packet/\n */ class OkPacket {\n    constructor(affectedRows, insertId, warningStatus){\n        this.affectedRows = affectedRows;\n        this.insertId = insertId;\n        this.warningStatus = warningStatus;\n    }\n}\nmodule.exports = OkPacket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2NsYXNzL29rLXBhY2tldC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEO0FBRUE7OztDQUdDLEdBQ0QsTUFBTUE7SUFDSkMsWUFBWUMsWUFBWSxFQUFFQyxRQUFRLEVBQUVDLGFBQWEsQ0FBRTtRQUNqRCxJQUFJLENBQUNGLFlBQVksR0FBR0E7UUFDcEIsSUFBSSxDQUFDQyxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0MsYUFBYSxHQUFHQTtJQUN2QjtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZm5leHRqcy8uL25vZGVfbW9kdWxlcy9tYXJpYWRiL2xpYi9jbWQvY2xhc3Mvb2stcGFja2V0LmpzPzFkZmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE9rX1BhY2tldFxuICogc2VlIGh0dHBzOi8vbWFyaWFkYi5jb20va2IvZW4vb2tfcGFja2V0L1xuICovXG5jbGFzcyBPa1BhY2tldCB7XG4gIGNvbnN0cnVjdG9yKGFmZmVjdGVkUm93cywgaW5zZXJ0SWQsIHdhcm5pbmdTdGF0dXMpIHtcbiAgICB0aGlzLmFmZmVjdGVkUm93cyA9IGFmZmVjdGVkUm93cztcbiAgICB0aGlzLmluc2VydElkID0gaW5zZXJ0SWQ7XG4gICAgdGhpcy53YXJuaW5nU3RhdHVzID0gd2FybmluZ1N0YXR1cztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9rUGFja2V0O1xuIl0sIm5hbWVzIjpbIk9rUGFja2V0IiwiY29uc3RydWN0b3IiLCJhZmZlY3RlZFJvd3MiLCJpbnNlcnRJZCIsIndhcm5pbmdTdGF0dXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/class/ok-packet.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/class/prepare-cache-wrapper.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/class/prepare-cache-wrapper.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst PrepareWrapper = __webpack_require__(/*! ./prepare-wrapper */ \"(rsc)/./node_modules/mariadb/lib/cmd/class/prepare-wrapper.js\");\n/**\n * Prepare cache wrapper\n * see https://mariadb.com/kb/en/com_stmt_prepare/#com_stmt_prepare_ok\n */ class PrepareCacheWrapper {\n    #use;\n    #cached;\n    #prepare;\n    constructor(prepare){\n        this.#use = 0;\n        this.#prepare = prepare;\n        this.#cached = true;\n    }\n    incrementUse() {\n        this.#use += 1;\n        return new PrepareWrapper(this, this.#prepare);\n    }\n    unCache() {\n        this.#cached = false;\n        if (this.#use === 0) {\n            this.#prepare.close();\n        }\n    }\n    decrementUse() {\n        this.#use -= 1;\n        if (this.#use === 0 && !this.#cached) {\n            this.#prepare.close();\n        }\n    }\n    toString() {\n        return \"Prepare{use:\" + this.#use + \",cached:\" + this.#cached + \"}\";\n    }\n}\nmodule.exports = PrepareCacheWrapper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2NsYXNzL3ByZXBhcmUtY2FjaGUtd3JhcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEO0FBRUEsTUFBTUEsaUJBQWlCQyxtQkFBT0EsQ0FBQztBQUUvQjs7O0NBR0MsR0FDRCxNQUFNQztJQUNKLENBQUNDLEdBQUcsQ0FBSztJQUNULENBQUNDLE1BQU0sQ0FBQztJQUNSLENBQUNDLE9BQU8sQ0FBQztJQUVUQyxZQUFZRCxPQUFPLENBQUU7YUFKckIsQ0FBQ0YsR0FBRyxHQUFHO1FBS0wsSUFBSSxDQUFDLENBQUNFLE9BQU8sR0FBR0E7UUFDaEIsSUFBSSxDQUFDLENBQUNELE1BQU0sR0FBRztJQUNqQjtJQUVBRyxlQUFlO1FBQ2IsSUFBSSxDQUFDLENBQUNKLEdBQUcsSUFBSTtRQUNiLE9BQU8sSUFBSUgsZUFBZSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUNLLE9BQU87SUFDL0M7SUFFQUcsVUFBVTtRQUNSLElBQUksQ0FBQyxDQUFDSixNQUFNLEdBQUc7UUFDZixJQUFJLElBQUksQ0FBQyxDQUFDRCxHQUFHLEtBQUssR0FBRztZQUNuQixJQUFJLENBQUMsQ0FBQ0UsT0FBTyxDQUFDSSxLQUFLO1FBQ3JCO0lBQ0Y7SUFFQUMsZUFBZTtRQUNiLElBQUksQ0FBQyxDQUFDUCxHQUFHLElBQUk7UUFDYixJQUFJLElBQUksQ0FBQyxDQUFDQSxHQUFHLEtBQUssS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDQyxNQUFNLEVBQUU7WUFDcEMsSUFBSSxDQUFDLENBQUNDLE9BQU8sQ0FBQ0ksS0FBSztRQUNyQjtJQUNGO0lBRUFFLFdBQVc7UUFDVCxPQUFPLGlCQUFpQixJQUFJLENBQUMsQ0FBQ1IsR0FBRyxHQUFHLGFBQWEsSUFBSSxDQUFDLENBQUNDLE1BQU0sR0FBRztJQUNsRTtBQUNGO0FBRUFRLE9BQU9DLE9BQU8sR0FBR1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZm5leHRqcy8uL25vZGVfbW9kdWxlcy9tYXJpYWRiL2xpYi9jbWQvY2xhc3MvcHJlcGFyZS1jYWNoZS13cmFwcGVyLmpzPzljNmUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQcmVwYXJlV3JhcHBlciA9IHJlcXVpcmUoJy4vcHJlcGFyZS13cmFwcGVyJyk7XG5cbi8qKlxuICogUHJlcGFyZSBjYWNoZSB3cmFwcGVyXG4gKiBzZWUgaHR0cHM6Ly9tYXJpYWRiLmNvbS9rYi9lbi9jb21fc3RtdF9wcmVwYXJlLyNjb21fc3RtdF9wcmVwYXJlX29rXG4gKi9cbmNsYXNzIFByZXBhcmVDYWNoZVdyYXBwZXIge1xuICAjdXNlID0gMDtcbiAgI2NhY2hlZDtcbiAgI3ByZXBhcmU7XG5cbiAgY29uc3RydWN0b3IocHJlcGFyZSkge1xuICAgIHRoaXMuI3ByZXBhcmUgPSBwcmVwYXJlO1xuICAgIHRoaXMuI2NhY2hlZCA9IHRydWU7XG4gIH1cblxuICBpbmNyZW1lbnRVc2UoKSB7XG4gICAgdGhpcy4jdXNlICs9IDE7XG4gICAgcmV0dXJuIG5ldyBQcmVwYXJlV3JhcHBlcih0aGlzLCB0aGlzLiNwcmVwYXJlKTtcbiAgfVxuXG4gIHVuQ2FjaGUoKSB7XG4gICAgdGhpcy4jY2FjaGVkID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuI3VzZSA9PT0gMCkge1xuICAgICAgdGhpcy4jcHJlcGFyZS5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGRlY3JlbWVudFVzZSgpIHtcbiAgICB0aGlzLiN1c2UgLT0gMTtcbiAgICBpZiAodGhpcy4jdXNlID09PSAwICYmICF0aGlzLiNjYWNoZWQpIHtcbiAgICAgIHRoaXMuI3ByZXBhcmUuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1ByZXBhcmV7dXNlOicgKyB0aGlzLiN1c2UgKyAnLGNhY2hlZDonICsgdGhpcy4jY2FjaGVkICsgJ30nO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJlcGFyZUNhY2hlV3JhcHBlcjtcbiJdLCJuYW1lcyI6WyJQcmVwYXJlV3JhcHBlciIsInJlcXVpcmUiLCJQcmVwYXJlQ2FjaGVXcmFwcGVyIiwidXNlIiwiY2FjaGVkIiwicHJlcGFyZSIsImNvbnN0cnVjdG9yIiwiaW5jcmVtZW50VXNlIiwidW5DYWNoZSIsImNsb3NlIiwiZGVjcmVtZW50VXNlIiwidG9TdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/class/prepare-cache-wrapper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/class/prepare-result-packet.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/class/prepare-result-packet.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst CommandParameter = __webpack_require__(/*! ../../command-parameter */ \"(rsc)/./node_modules/mariadb/lib/command-parameter.js\");\nconst Errors = __webpack_require__(/*! ../../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst ExecuteStream = __webpack_require__(/*! ../execute-stream */ \"(rsc)/./node_modules/mariadb/lib/cmd/execute-stream.js\");\n/**\n * Prepare result\n * see https://mariadb.com/kb/en/com_stmt_prepare/#com_stmt_prepare_ok\n */ class PrepareResultPacket {\n    #conn;\n    constructor(statementId, parameterCount, columns, database, sql, placeHolderIndex, conn){\n        this.id = statementId;\n        this.parameterCount = parameterCount;\n        this.columns = columns;\n        this.database = database;\n        this.query = sql;\n        this.closed = false;\n        this._placeHolderIndex = placeHolderIndex;\n        this.#conn = conn;\n    }\n    get conn() {\n        return this.#conn;\n    }\n    execute(values, opts, cb, stack) {\n        let _opts = opts, _cb = cb;\n        if (typeof _opts === \"function\") {\n            _cb = _opts;\n            _opts = undefined;\n        }\n        if (this.isClose()) {\n            const error = Errors.createError(`Execute fails, prepare command as already been closed`, Errors.ER_PREPARE_CLOSED, null, \"22000\", this.query);\n            if (!_cb) {\n                return Promise.reject(error);\n            } else {\n                _cb(error);\n                return;\n            }\n        }\n        const cmdParam = new CommandParameter(this.query, values, _opts, _cb);\n        if (stack) cmdParam.stack = stack;\n        const conn = this.conn;\n        const promise = new Promise((resolve, reject)=>conn.executePromise.call(conn, cmdParam, this, resolve, reject));\n        if (!_cb) {\n            return promise;\n        } else {\n            promise.then((res)=>{\n                if (_cb) _cb(null, res, null);\n            }).catch(_cb || function(err) {});\n        }\n    }\n    executeStream(values, opts, cb, stack) {\n        let _opts = opts, _cb = cb;\n        if (typeof _opts === \"function\") {\n            _cb = _opts;\n            _opts = undefined;\n        }\n        if (this.isClose()) {\n            const error = Errors.createError(`Execute fails, prepare command as already been closed`, Errors.ER_PREPARE_CLOSED, null, \"22000\", this.query);\n            if (!_cb) {\n                throw error;\n            } else {\n                _cb(error);\n                return;\n            }\n        }\n        const cmdParam = new CommandParameter(this.query, values, _opts, _cb);\n        if (stack) cmdParam.stack = stack;\n        const cmd = new ExecuteStream(cmdParam, this.conn.opts, this, this.conn.socket);\n        if (this.conn.opts.logger.error) cmd.on(\"error\", this.conn.opts.logger.error);\n        this.conn.addCommand(cmd);\n        return cmd.inStream;\n    }\n    isClose() {\n        return this.closed;\n    }\n    close() {\n        if (!this.closed) {\n            this.closed = true;\n            this.#conn.emit(\"close_prepare\", this);\n        }\n    }\n    toString() {\n        return \"Prepare{closed:\" + this.closed + \"}\";\n    }\n}\nmodule.exports = PrepareResultPacket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/class/prepare-result-packet.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/class/prepare-wrapper.js":
/*!***************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/class/prepare-wrapper.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\n/**\n * Prepare result wrapper\n * This permit to ensure that cache can be close only one time cache.\n */ class PrepareWrapper {\n    #closed;\n    #cacheWrapper;\n    #prepare;\n    #conn;\n    constructor(cacheWrapper, prepare){\n        this.#closed = false;\n        this.#cacheWrapper = cacheWrapper;\n        this.#prepare = prepare;\n        this.#conn = prepare.conn;\n        this.execute = this.#prepare.execute;\n        this.executeStream = this.#prepare.executeStream;\n    }\n    get conn() {\n        return this.#conn;\n    }\n    get id() {\n        return this.#prepare.id;\n    }\n    get parameterCount() {\n        return this.#prepare.parameterCount;\n    }\n    get _placeHolderIndex() {\n        return this.#prepare._placeHolderIndex;\n    }\n    get columns() {\n        return this.#prepare.columns;\n    }\n    set columns(columns) {\n        this.#prepare.columns = columns;\n    }\n    get database() {\n        return this.#prepare.database;\n    }\n    get query() {\n        return this.#prepare.query;\n    }\n    isClose() {\n        return this.#closed;\n    }\n    close() {\n        if (!this.#closed) {\n            this.#closed = true;\n            this.#cacheWrapper.decrementUse();\n        }\n    }\n    toString() {\n        return \"PrepareWrapper{closed:\" + this.#closed + \",cache:\" + this.#cacheWrapper + \"}\";\n    }\n}\nmodule.exports = PrepareWrapper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2NsYXNzL3ByZXBhcmUtd3JhcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEO0FBRUE7OztDQUdDLEdBQ0QsTUFBTUE7SUFDSixDQUFDQyxNQUFNLENBQVM7SUFDaEIsQ0FBQ0MsWUFBWSxDQUFDO0lBQ2QsQ0FBQ0MsT0FBTyxDQUFDO0lBQ1QsQ0FBQ0MsSUFBSSxDQUFDO0lBRU5DLFlBQVlILFlBQVksRUFBRUMsT0FBTyxDQUFFO2FBTG5DLENBQUNGLE1BQU0sR0FBRztRQU1SLElBQUksQ0FBQyxDQUFDQyxZQUFZLEdBQUdBO1FBQ3JCLElBQUksQ0FBQyxDQUFDQyxPQUFPLEdBQUdBO1FBQ2hCLElBQUksQ0FBQyxDQUFDQyxJQUFJLEdBQUdELFFBQVFDLElBQUk7UUFDekIsSUFBSSxDQUFDRSxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUNILE9BQU8sQ0FBQ0csT0FBTztRQUNwQyxJQUFJLENBQUNDLGFBQWEsR0FBRyxJQUFJLENBQUMsQ0FBQ0osT0FBTyxDQUFDSSxhQUFhO0lBQ2xEO0lBQ0EsSUFBSUgsT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLENBQUNBLElBQUk7SUFDbkI7SUFFQSxJQUFJSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsQ0FBQ0wsT0FBTyxDQUFDSyxFQUFFO0lBQ3pCO0lBRUEsSUFBSUMsaUJBQWlCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLENBQUNOLE9BQU8sQ0FBQ00sY0FBYztJQUNyQztJQUVBLElBQUlDLG9CQUFvQjtRQUN0QixPQUFPLElBQUksQ0FBQyxDQUFDUCxPQUFPLENBQUNPLGlCQUFpQjtJQUN4QztJQUVBLElBQUlDLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxDQUFDUixPQUFPLENBQUNRLE9BQU87SUFDOUI7SUFFQSxJQUFJQSxRQUFRQSxPQUFPLEVBQUU7UUFDbkIsSUFBSSxDQUFDLENBQUNSLE9BQU8sQ0FBQ1EsT0FBTyxHQUFHQTtJQUMxQjtJQUNBLElBQUlDLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxDQUFDVCxPQUFPLENBQUNTLFFBQVE7SUFDL0I7SUFFQSxJQUFJQyxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsQ0FBQ1YsT0FBTyxDQUFDVSxLQUFLO0lBQzVCO0lBRUFDLFVBQVU7UUFDUixPQUFPLElBQUksQ0FBQyxDQUFDYixNQUFNO0lBQ3JCO0lBRUFjLFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUNkLE1BQU0sRUFBRTtZQUNqQixJQUFJLENBQUMsQ0FBQ0EsTUFBTSxHQUFHO1lBQ2YsSUFBSSxDQUFDLENBQUNDLFlBQVksQ0FBQ2MsWUFBWTtRQUNqQztJQUNGO0lBRUFDLFdBQVc7UUFDVCxPQUFPLDJCQUEyQixJQUFJLENBQUMsQ0FBQ2hCLE1BQU0sR0FBRyxZQUFZLElBQUksQ0FBQyxDQUFDQyxZQUFZLEdBQUc7SUFDcEY7QUFDRjtBQUVBZ0IsT0FBT0MsT0FBTyxHQUFHbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZm5leHRqcy8uL25vZGVfbW9kdWxlcy9tYXJpYWRiL2xpYi9jbWQvY2xhc3MvcHJlcGFyZS13cmFwcGVyLmpzPzc3Y2UiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFByZXBhcmUgcmVzdWx0IHdyYXBwZXJcbiAqIFRoaXMgcGVybWl0IHRvIGVuc3VyZSB0aGF0IGNhY2hlIGNhbiBiZSBjbG9zZSBvbmx5IG9uZSB0aW1lIGNhY2hlLlxuICovXG5jbGFzcyBQcmVwYXJlV3JhcHBlciB7XG4gICNjbG9zZWQgPSBmYWxzZTtcbiAgI2NhY2hlV3JhcHBlcjtcbiAgI3ByZXBhcmU7XG4gICNjb25uO1xuXG4gIGNvbnN0cnVjdG9yKGNhY2hlV3JhcHBlciwgcHJlcGFyZSkge1xuICAgIHRoaXMuI2NhY2hlV3JhcHBlciA9IGNhY2hlV3JhcHBlcjtcbiAgICB0aGlzLiNwcmVwYXJlID0gcHJlcGFyZTtcbiAgICB0aGlzLiNjb25uID0gcHJlcGFyZS5jb25uO1xuICAgIHRoaXMuZXhlY3V0ZSA9IHRoaXMuI3ByZXBhcmUuZXhlY3V0ZTtcbiAgICB0aGlzLmV4ZWN1dGVTdHJlYW0gPSB0aGlzLiNwcmVwYXJlLmV4ZWN1dGVTdHJlYW07XG4gIH1cbiAgZ2V0IGNvbm4oKSB7XG4gICAgcmV0dXJuIHRoaXMuI2Nvbm47XG4gIH1cblxuICBnZXQgaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3ByZXBhcmUuaWQ7XG4gIH1cblxuICBnZXQgcGFyYW1ldGVyQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3ByZXBhcmUucGFyYW1ldGVyQ291bnQ7XG4gIH1cblxuICBnZXQgX3BsYWNlSG9sZGVySW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3ByZXBhcmUuX3BsYWNlSG9sZGVySW5kZXg7XG4gIH1cblxuICBnZXQgY29sdW1ucygpIHtcbiAgICByZXR1cm4gdGhpcy4jcHJlcGFyZS5jb2x1bW5zO1xuICB9XG5cbiAgc2V0IGNvbHVtbnMoY29sdW1ucykge1xuICAgIHRoaXMuI3ByZXBhcmUuY29sdW1ucyA9IGNvbHVtbnM7XG4gIH1cbiAgZ2V0IGRhdGFiYXNlKCkge1xuICAgIHJldHVybiB0aGlzLiNwcmVwYXJlLmRhdGFiYXNlO1xuICB9XG5cbiAgZ2V0IHF1ZXJ5KCkge1xuICAgIHJldHVybiB0aGlzLiNwcmVwYXJlLnF1ZXJ5O1xuICB9XG5cbiAgaXNDbG9zZSgpIHtcbiAgICByZXR1cm4gdGhpcy4jY2xvc2VkO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgaWYgKCF0aGlzLiNjbG9zZWQpIHtcbiAgICAgIHRoaXMuI2Nsb3NlZCA9IHRydWU7XG4gICAgICB0aGlzLiNjYWNoZVdyYXBwZXIuZGVjcmVtZW50VXNlKCk7XG4gICAgfVxuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdQcmVwYXJlV3JhcHBlcntjbG9zZWQ6JyArIHRoaXMuI2Nsb3NlZCArICcsY2FjaGU6JyArIHRoaXMuI2NhY2hlV3JhcHBlciArICd9JztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFByZXBhcmVXcmFwcGVyO1xuIl0sIm5hbWVzIjpbIlByZXBhcmVXcmFwcGVyIiwiY2xvc2VkIiwiY2FjaGVXcmFwcGVyIiwicHJlcGFyZSIsImNvbm4iLCJjb25zdHJ1Y3RvciIsImV4ZWN1dGUiLCJleGVjdXRlU3RyZWFtIiwiaWQiLCJwYXJhbWV0ZXJDb3VudCIsIl9wbGFjZUhvbGRlckluZGV4IiwiY29sdW1ucyIsImRhdGFiYXNlIiwicXVlcnkiLCJpc0Nsb3NlIiwiY2xvc2UiLCJkZWNyZW1lbnRVc2UiLCJ0b1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/class/prepare-wrapper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/close-prepare.js":
/*!*******************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/close-prepare.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Command = __webpack_require__(/*! ./command */ \"(rsc)/./node_modules/mariadb/lib/cmd/command.js\");\n/**\n * Close prepared statement\n * see https://mariadb.com/kb/en/3-binary-protocol-prepared-statements-com_stmt_close/\n */ class ClosePrepare extends Command {\n    constructor(cmdParam, resolve, reject, prepare){\n        super(cmdParam, resolve, reject);\n        this.prepare = prepare;\n    }\n    start(out, opts, info) {\n        if (opts.logger.query) opts.logger.query(`CLOSE PREPARE: (${this.prepare.id}) ${this.prepare.query}`);\n        const closeCmd = new Uint8Array([\n            5,\n            0,\n            0,\n            0,\n            0x19,\n            this.prepare.id,\n            this.prepare.id >> 8,\n            this.prepare.id >> 16,\n            this.prepare.id >> 24\n        ]);\n        out.fastFlush(this, closeCmd);\n        this.onPacketReceive = null;\n        this.emit(\"send_end\");\n        this.emit(\"end\");\n    }\n}\nmodule.exports = ClosePrepare;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2Nsb3NlLXByZXBhcmUuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQThDO0FBQzlDLGtEQUFrRDtBQUVsRDtBQUVBLE1BQU1BLFVBQVVDLG1CQUFPQSxDQUFDO0FBRXhCOzs7Q0FHQyxHQUNELE1BQU1DLHFCQUFxQkY7SUFDekJHLFlBQVlDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sQ0FBRTtRQUM5QyxLQUFLLENBQUNILFVBQVVDLFNBQVNDO1FBQ3pCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtJQUNqQjtJQUVBQyxNQUFNQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFO1FBQ3JCLElBQUlELEtBQUtFLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFSCxLQUFLRSxNQUFNLENBQUNDLEtBQUssQ0FBQyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQ04sT0FBTyxDQUFDTyxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQ1AsT0FBTyxDQUFDTSxLQUFLLENBQUMsQ0FBQztRQUNwRyxNQUFNRSxXQUFXLElBQUlDLFdBQVc7WUFDOUI7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBLElBQUksQ0FBQ1QsT0FBTyxDQUFDTyxFQUFFO1lBQ2YsSUFBSSxDQUFDUCxPQUFPLENBQUNPLEVBQUUsSUFBSTtZQUNuQixJQUFJLENBQUNQLE9BQU8sQ0FBQ08sRUFBRSxJQUFJO1lBQ25CLElBQUksQ0FBQ1AsT0FBTyxDQUFDTyxFQUFFLElBQUk7U0FDcEI7UUFDREwsSUFBSVEsU0FBUyxDQUFDLElBQUksRUFBRUY7UUFDcEIsSUFBSSxDQUFDRyxlQUFlLEdBQUc7UUFDdkIsSUFBSSxDQUFDQyxJQUFJLENBQUM7UUFDVixJQUFJLENBQUNBLElBQUksQ0FBQztJQUNaO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZm5leHRqcy8uL25vZGVfbW9kdWxlcy9tYXJpYWRiL2xpYi9jbWQvY2xvc2UtcHJlcGFyZS5qcz9iN2ExIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQ29tbWFuZCA9IHJlcXVpcmUoJy4vY29tbWFuZCcpO1xuXG4vKipcbiAqIENsb3NlIHByZXBhcmVkIHN0YXRlbWVudFxuICogc2VlIGh0dHBzOi8vbWFyaWFkYi5jb20va2IvZW4vMy1iaW5hcnktcHJvdG9jb2wtcHJlcGFyZWQtc3RhdGVtZW50cy1jb21fc3RtdF9jbG9zZS9cbiAqL1xuY2xhc3MgQ2xvc2VQcmVwYXJlIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZFBhcmFtLCByZXNvbHZlLCByZWplY3QsIHByZXBhcmUpIHtcbiAgICBzdXBlcihjbWRQYXJhbSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB0aGlzLnByZXBhcmUgPSBwcmVwYXJlO1xuICB9XG5cbiAgc3RhcnQob3V0LCBvcHRzLCBpbmZvKSB7XG4gICAgaWYgKG9wdHMubG9nZ2VyLnF1ZXJ5KSBvcHRzLmxvZ2dlci5xdWVyeShgQ0xPU0UgUFJFUEFSRTogKCR7dGhpcy5wcmVwYXJlLmlkfSkgJHt0aGlzLnByZXBhcmUucXVlcnl9YCk7XG4gICAgY29uc3QgY2xvc2VDbWQgPSBuZXcgVWludDhBcnJheShbXG4gICAgICA1LFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgMHgxOSxcbiAgICAgIHRoaXMucHJlcGFyZS5pZCxcbiAgICAgIHRoaXMucHJlcGFyZS5pZCA+PiA4LFxuICAgICAgdGhpcy5wcmVwYXJlLmlkID4+IDE2LFxuICAgICAgdGhpcy5wcmVwYXJlLmlkID4+IDI0XG4gICAgXSk7XG4gICAgb3V0LmZhc3RGbHVzaCh0aGlzLCBjbG9zZUNtZCk7XG4gICAgdGhpcy5vblBhY2tldFJlY2VpdmUgPSBudWxsO1xuICAgIHRoaXMuZW1pdCgnc2VuZF9lbmQnKTtcbiAgICB0aGlzLmVtaXQoJ2VuZCcpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xvc2VQcmVwYXJlO1xuIl0sIm5hbWVzIjpbIkNvbW1hbmQiLCJyZXF1aXJlIiwiQ2xvc2VQcmVwYXJlIiwiY29uc3RydWN0b3IiLCJjbWRQYXJhbSIsInJlc29sdmUiLCJyZWplY3QiLCJwcmVwYXJlIiwic3RhcnQiLCJvdXQiLCJvcHRzIiwiaW5mbyIsImxvZ2dlciIsInF1ZXJ5IiwiaWQiLCJjbG9zZUNtZCIsIlVpbnQ4QXJyYXkiLCJmYXN0Rmx1c2giLCJvblBhY2tldFJlY2VpdmUiLCJlbWl0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/close-prepare.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/column-definition.js":
/*!***********************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/column-definition.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Collations = __webpack_require__(/*! ../const/collations.js */ \"(rsc)/./node_modules/mariadb/lib/const/collations.js\");\nconst FieldType = __webpack_require__(/*! ../const/field-type */ \"(rsc)/./node_modules/mariadb/lib/const/field-type.js\");\nconst FieldDetails = __webpack_require__(/*! ../const/field-detail */ \"(rsc)/./node_modules/mariadb/lib/const/field-detail.js\");\nconst Capabilities = __webpack_require__(/*! ../const/capabilities */ \"(rsc)/./node_modules/mariadb/lib/const/capabilities.js\");\n// noinspection JSBitwiseOperatorUsage\n/**\n * Column definition\n * see https://mariadb.com/kb/en/library/resultset/#column-definition-packet\n */ class ColumnDef {\n    #stringParser;\n    constructor(packet, info, skipName){\n        this.#stringParser = skipName ? new StringParser(packet) : new StringParserWithName(packet);\n        if (info.clientCapabilities & Capabilities.MARIADB_CLIENT_EXTENDED_TYPE_INFO) {\n            const len = packet.readUnsignedLength();\n            if (len > 0) {\n                const subPacket = packet.subPacketLengthEncoded(len);\n                while(subPacket.remaining()){\n                    switch(subPacket.readUInt8()){\n                        case 0:\n                            this.dataTypeName = subPacket.readAsciiStringLengthEncoded();\n                            break;\n                        case 1:\n                            this.dataTypeFormat = subPacket.readAsciiStringLengthEncoded();\n                            break;\n                        default:\n                            subPacket.skip(subPacket.readUnsignedLength());\n                            break;\n                    }\n                }\n            }\n        }\n        packet.skip(1); // length of fixed fields\n        this.collation = Collations.fromIndex(packet.readUInt16());\n        this.columnLength = packet.readUInt32();\n        this.columnType = packet.readUInt8();\n        this.flags = packet.readUInt16();\n        this.scale = packet.readUInt8();\n        this.type = FieldType.TYPES[this.columnType];\n    }\n    __getDefaultGeomVal() {\n        if (this.dataTypeName) {\n            switch(this.dataTypeName){\n                case \"point\":\n                    return {\n                        type: \"Point\"\n                    };\n                case \"linestring\":\n                    return {\n                        type: \"LineString\"\n                    };\n                case \"polygon\":\n                    return {\n                        type: \"Polygon\"\n                    };\n                case \"multipoint\":\n                    return {\n                        type: \"MultiPoint\"\n                    };\n                case \"multilinestring\":\n                    return {\n                        type: \"MultiLineString\"\n                    };\n                case \"multipolygon\":\n                    return {\n                        type: \"MultiPolygon\"\n                    };\n                default:\n                    return {\n                        type: this.dataTypeName\n                    };\n            }\n        }\n        return null;\n    }\n    db() {\n        return this.#stringParser.db();\n    }\n    schema() {\n        return this.#stringParser.schema();\n    }\n    table() {\n        return this.#stringParser.table();\n    }\n    orgTable() {\n        return this.#stringParser.orgTable();\n    }\n    name() {\n        return this.#stringParser.name();\n    }\n    orgName() {\n        return this.#stringParser.orgName();\n    }\n    signed() {\n        return (this.flags & FieldDetails.UNSIGNED) === 0;\n    }\n    isSet() {\n        return (this.flags & FieldDetails.SET) !== 0;\n    }\n}\n/**\n * String parser.\n * This object permits to avoid listing all private information to metadata object.\n */ class BaseStringParser {\n    constructor(readFct, saveBuf){\n        this.buf = saveBuf;\n        this.readString = readFct;\n    }\n    _readIdentifier(skip) {\n        let pos = 0;\n        while(skip-- > 0){\n            const type = this.buf[pos++] & 0xff;\n            pos += type < 0xfb ? type : 2 + this.buf[pos] + this.buf[pos + 1] * 2 ** 8;\n        }\n        let len;\n        const type = this.buf[pos++] & 0xff;\n        len = type < 0xfb ? type : this.buf[pos++] + this.buf[pos++] * 2 ** 8;\n        return this.readString(this.buf, pos, len);\n    }\n    name() {\n        return this._readIdentifier(3);\n    }\n    db() {\n        return this._readIdentifier(0);\n    }\n    schema() {\n        return this.db();\n    }\n    table() {\n        return this._readIdentifier(1);\n    }\n    orgTable() {\n        return this._readIdentifier(2);\n    }\n    orgName() {\n        return this._readIdentifier(4);\n    }\n}\nclass StringParser extends BaseStringParser {\n    constructor(packet){\n        packet.skip(4); // skip 'def'\n        const initPos = packet.pos;\n        packet.skip(packet.readMetadataLength()); //schema\n        packet.skip(packet.readMetadataLength()); //table alias\n        packet.skip(packet.readMetadataLength()); //table\n        packet.skip(packet.readMetadataLength()); //column alias\n        packet.skip(packet.readMetadataLength()); //column\n        const len = packet.pos - initPos;\n        const saveBuf = Buffer.allocUnsafe(packet.pos - initPos);\n        for(let i = 0; i < len; i++)saveBuf[i] = packet.buf[initPos + i];\n        super(packet.readString.bind(packet), saveBuf);\n    }\n}\n/**\n * String parser.\n * This object permits to avoid listing all private information to metadata object.\n */ class StringParserWithName extends BaseStringParser {\n    constructor(packet){\n        packet.skip(4); // skip 'def'\n        const initPos = packet.pos;\n        packet.skip(packet.readMetadataLength()); //schema\n        packet.skip(packet.readMetadataLength()); //table alias\n        packet.skip(packet.readMetadataLength()); //table\n        const colName = packet.readStringLengthEncoded(); //column alias\n        packet.skip(packet.readMetadataLength()); //column\n        const len = packet.pos - initPos;\n        const saveBuf = Buffer.allocUnsafe(packet.pos - initPos);\n        for(let i = 0; i < len; i++)saveBuf[i] = packet.buf[initPos + i];\n        super(packet.readString.bind(packet), saveBuf);\n        this.colName = colName;\n    }\n    name() {\n        return this.colName;\n    }\n}\nmodule.exports = ColumnDef;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/column-definition.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/command.js":
/*!*************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/command.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst Errors = __webpack_require__(/*! ../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\n/**\n * Default command interface.\n */ class Command extends EventEmitter {\n    constructor(cmdParam, resolve, reject){\n        super();\n        this.cmdParam = cmdParam;\n        this.sequenceNo = -1;\n        this.compressSequenceNo = -1;\n        this.resolve = resolve;\n        this.reject = reject;\n        this.sending = false;\n        this.unexpectedError = this.throwUnexpectedError.bind(this);\n    }\n    displaySql() {\n        return null;\n    }\n    /**\n   * Throw an unexpected error.\n   * server exchange will still be read to keep connection in a good state, but promise will be rejected.\n   *\n   * @param msg message\n   * @param fatal is error fatal for connection\n   * @param info current server state information\n   * @param sqlState error sqlState\n   * @param errno error number\n   */ throwUnexpectedError(msg, fatal, info, sqlState, errno) {\n        const err = Errors.createError(msg, errno, info, sqlState, this.displaySql(), fatal, this.cmdParam ? this.cmdParam.stack : null, false);\n        if (this.reject) {\n            process.nextTick(this.reject, err);\n            this.resolve = null;\n            this.reject = null;\n        }\n        return err;\n    }\n    /**\n   * Create and throw new Error from error information\n   * only first called throwing an error or successfully end will be executed.\n   *\n   * @param msg message\n   * @param fatal is error fatal for connection\n   * @param info current server state information\n   * @param sqlState error sqlState\n   * @param errno error number\n   */ throwNewError(msg, fatal, info, sqlState, errno) {\n        this.onPacketReceive = null;\n        const err = this.throwUnexpectedError(msg, fatal, info, sqlState, errno);\n        this.emit(\"end\");\n        return err;\n    }\n    /**\n   * When command cannot be sent due to error.\n   * (this is only on start command)\n   *\n   * @param msg error message\n   * @param errno error number\n   * @param info connection information\n   */ sendCancelled(msg, errno, info) {\n        const err = Errors.createError(msg, errno, info, \"HY000\", this.displaySql());\n        this.emit(\"send_end\");\n        this.throwError(err, info);\n    }\n    /**\n   * Throw Error\n   *  only first called throwing an error or successfully end will be executed.\n   *\n   * @param err error to be thrown\n   * @param info current server state information\n   */ throwError(err, info) {\n        this.onPacketReceive = null;\n        if (this.reject) {\n            if (this.cmdParam && this.cmdParam.stack) {\n                err = Errors.createError(err.text ? err.text : err.message, err.errno, info, err.sqlState, err.sql, err.fatal, this.cmdParam.stack, false);\n            }\n            this.resolve = null;\n            process.nextTick(this.reject, err);\n            this.reject = null;\n        }\n        this.emit(\"end\", err);\n    }\n    /**\n   * Successfully end command.\n   * only first called throwing an error or successfully end will be executed.\n   *\n   * @param val return value.\n   */ successEnd(val) {\n        this.onPacketReceive = null;\n        if (this.resolve) {\n            this.reject = null;\n            process.nextTick(this.resolve, val);\n            this.resolve = null;\n        }\n        this.emit(\"end\");\n    }\n}\nmodule.exports = Command;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/command.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/decoder/binary-decoder.js":
/*!****************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/decoder/binary-decoder.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst FieldType = __webpack_require__(/*! ../../const/field-type */ \"(rsc)/./node_modules/mariadb/lib/const/field-type.js\");\nconst Errors = __webpack_require__(/*! ../../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nclass BinaryDecoder {\n    static newRow(packet, columns) {\n        packet.skip(1); // skip 0x00 header.\n        const len = Math.floor((columns.length + 9) / 8);\n        const nullBitMap = new Array(len);\n        for(let i = 0; i < len; i++)nullBitMap[i] = packet.readUInt8();\n        return nullBitMap;\n    }\n    static castWrapper(column, packet, opts, nullBitmap, index) {\n        column.string = ()=>isNullBitmap(index, nullBitmap) ? null : packet.readStringLengthEncoded();\n        column.buffer = ()=>isNullBitmap(index, nullBitmap) ? null : packet.readBufferLengthEncoded();\n        column.float = ()=>isNullBitmap(index, nullBitmap) ? null : packet.readFloat();\n        column.tiny = ()=>isNullBitmap(index, nullBitmap) ? null : column.signed() ? packet.readInt8() : packet.readUInt8();\n        column.short = ()=>isNullBitmap(index, nullBitmap) ? null : column.signed() ? packet.readInt16() : packet.readUInt16();\n        column.int = ()=>isNullBitmap(index, nullBitmap) ? null : packet.readInt32();\n        column.long = ()=>isNullBitmap(index, nullBitmap) ? null : packet.readBigInt64();\n        column.decimal = ()=>isNullBitmap(index, nullBitmap) ? null : packet.readDecimalLengthEncoded();\n        column.date = ()=>isNullBitmap(index, nullBitmap) ? null : packet.readBinaryDate(opts);\n        column.datetime = ()=>isNullBitmap(index, nullBitmap) ? null : packet.readBinaryDateTime();\n        column.geometry = ()=>{\n            let defaultVal = null;\n            if (column.dataTypeName) {\n                switch(column.dataTypeName){\n                    case \"point\":\n                        defaultVal = {\n                            type: \"Point\"\n                        };\n                        break;\n                    case \"linestring\":\n                        defaultVal = {\n                            type: \"LineString\"\n                        };\n                        break;\n                    case \"polygon\":\n                        defaultVal = {\n                            type: \"Polygon\"\n                        };\n                        break;\n                    case \"multipoint\":\n                        defaultVal = {\n                            type: \"MultiPoint\"\n                        };\n                        break;\n                    case \"multilinestring\":\n                        defaultVal = {\n                            type: \"MultiLineString\"\n                        };\n                        break;\n                    case \"multipolygon\":\n                        defaultVal = {\n                            type: \"MultiPolygon\"\n                        };\n                        break;\n                    default:\n                        defaultVal = {\n                            type: column.dataTypeName\n                        };\n                        break;\n                }\n            }\n            if (isNullBitmap(index, nullBitmap)) {\n                return defaultVal;\n            }\n            return packet.readGeometry(defaultVal);\n        };\n    }\n    static parser(col, opts) {\n        // set reader function read(col, packet, index, nullBitmap, opts, throwUnexpectedError)\n        // this permit for multi-row result-set to avoid resolving type parsing each data.\n        switch(col.columnType){\n            case FieldType.TINY:\n                return col.signed() ? readTinyBinarySigned : readTinyBinaryUnsigned;\n            case FieldType.YEAR:\n            case FieldType.SHORT:\n                return col.signed() ? readShortBinarySigned : readShortBinaryUnsigned;\n            case FieldType.INT24:\n                return col.signed() ? readMediumBinarySigned : readMediumBinaryUnsigned;\n            case FieldType.INT:\n                return col.signed() ? readIntBinarySigned : readIntBinaryUnsigned;\n            case FieldType.FLOAT:\n                return readFloatBinary;\n            case FieldType.DOUBLE:\n                return readDoubleBinary;\n            case FieldType.BIGINT:\n                if (col.signed()) {\n                    return opts.bigIntAsNumber || opts.supportBigNumbers ? readBigintAsIntBinarySigned : readBigintBinarySigned;\n                }\n                return opts.bigIntAsNumber || opts.supportBigNumbers ? readBigintAsIntBinaryUnsigned : readBigintBinaryUnsigned;\n            case FieldType.DATE:\n                return readDateBinary;\n            case FieldType.DATETIME:\n            case FieldType.TIMESTAMP:\n                return opts.dateStrings ? readTimestampStringBinary.bind(null, col.scale) : readTimestampBinary;\n            case FieldType.TIME:\n                return readTimeBinary;\n            case FieldType.DECIMAL:\n            case FieldType.NEWDECIMAL:\n                return col.scale === 0 ? readDecimalAsIntBinary : readDecimalBinary;\n            case FieldType.GEOMETRY:\n                let defaultVal = col.__getDefaultGeomVal();\n                return readGeometryBinary.bind(null, defaultVal);\n            case FieldType.JSON:\n                //for mysql only => parse string as JSON object\n                return readJsonBinary;\n            case FieldType.BIT:\n                if (col.columnLength === 1 && opts.bitOneIsBoolean) {\n                    return readBitBinaryBoolean;\n                }\n                return readBinaryBuffer;\n            default:\n                if (col.dataTypeFormat && col.dataTypeFormat === \"json\" && opts.autoJsonMap) {\n                    return readJsonBinary;\n                }\n                if (col.collation.index === 63) {\n                    return readBinaryBuffer;\n                }\n                if (col.isSet()) {\n                    return readBinarySet;\n                }\n                return readStringBinary;\n        }\n    }\n}\nconst isNullBitmap = (index, nullBitmap)=>{\n    return (nullBitmap[Math.floor((index + 2) / 8)] & 1 << (index + 2) % 8) > 0;\n};\nmodule.exports = BinaryDecoder;\nconst readTinyBinarySigned = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readInt8();\nconst readTinyBinaryUnsigned = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readUInt8();\nconst readShortBinarySigned = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readInt16();\nconst readShortBinaryUnsigned = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readUInt16();\nconst readMediumBinarySigned = (packet, opts, throwUnexpectedError, nullBitmap, index)=>{\n    if (isNullBitmap(index, nullBitmap)) {\n        return null;\n    }\n    const result = packet.readInt24();\n    packet.skip(1); // MEDIUMINT is encoded on 4 bytes in exchanges !\n    return result;\n};\nconst readMediumBinaryUnsigned = (packet, opts, throwUnexpectedError, nullBitmap, index)=>{\n    if (isNullBitmap(index, nullBitmap)) {\n        return null;\n    }\n    const result = packet.readInt24();\n    packet.skip(1); // MEDIUMINT is encoded on 4 bytes in exchanges !\n    return result;\n};\nconst readIntBinarySigned = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readInt32();\nconst readIntBinaryUnsigned = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readUInt32();\nconst readFloatBinary = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readFloat();\nconst readDoubleBinary = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readDouble();\nconst readBigintBinaryUnsigned = function(packet, opts, throwUnexpectedError, nullBitmap, index) {\n    if (isNullBitmap(index, nullBitmap)) return null;\n    return packet.readBigUInt64();\n};\nconst readBigintBinarySigned = function(packet, opts, throwUnexpectedError, nullBitmap, index) {\n    if (isNullBitmap(index, nullBitmap)) return null;\n    return packet.readBigInt64();\n};\nconst readBigintAsIntBinaryUnsigned = function(packet, opts, throwUnexpectedError, nullBitmap, index) {\n    if (isNullBitmap(index, nullBitmap)) return null;\n    const val = packet.readBigUInt64();\n    if (opts.bigIntAsNumber && opts.checkNumberRange && !Number.isSafeInteger(Number(val))) {\n        return throwUnexpectedError(`value ${val} can't safely be converted to number`, false, null, \"42000\", Errors.ER_PARSING_PRECISION);\n    }\n    if (opts.supportBigNumbers && (opts.bigNumberStrings || !Number.isSafeInteger(Number(val)))) {\n        return val.toString();\n    }\n    return Number(val);\n};\nconst readBigintAsIntBinarySigned = function(packet, opts, throwUnexpectedError, nullBitmap, index) {\n    if (isNullBitmap(index, nullBitmap)) return null;\n    const val = packet.readBigInt64();\n    if (opts.bigIntAsNumber && opts.checkNumberRange && !Number.isSafeInteger(Number(val))) {\n        return throwUnexpectedError(`value ${val} can't safely be converted to number`, false, null, \"42000\", Errors.ER_PARSING_PRECISION);\n    }\n    if (opts.supportBigNumbers && (opts.bigNumberStrings || !Number.isSafeInteger(Number(val)))) {\n        return val.toString();\n    }\n    return Number(val);\n};\nconst readGeometryBinary = (defaultVal, packet, opts, throwUnexpectedError, nullBitmap, index)=>{\n    if (isNullBitmap(index, nullBitmap)) {\n        return defaultVal;\n    }\n    return packet.readGeometry(defaultVal);\n};\nconst readDateBinary = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readBinaryDate(opts);\nconst readTimestampBinary = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readBinaryDateTime();\nconst readTimestampStringBinary = (scale, packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readBinaryDateTimeAsString(scale);\nconst readTimeBinary = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readBinaryTime();\nconst readDecimalAsIntBinary = (packet, opts, throwUnexpectedError, nullBitmap, index)=>{\n    //checkNumberRange additional check is only done when\n    // resulting value is an integer\n    if (isNullBitmap(index, nullBitmap)) return null;\n    const valDec = packet.readDecimalLengthEncoded();\n    if (valDec != null && (opts.decimalAsNumber || opts.supportBigNumbers)) {\n        if (opts.decimalAsNumber && opts.checkNumberRange && !Number.isSafeInteger(Number(valDec))) {\n            return throwUnexpectedError(`value ${valDec} can't safely be converted to number`, false, null, \"42000\", Errors.ER_PARSING_PRECISION);\n        }\n        if (opts.supportBigNumbers && (opts.bigNumberStrings || !Number.isSafeInteger(Number(valDec)))) {\n            return valDec.toString();\n        }\n        return Number(valDec);\n    }\n    return valDec;\n};\nconst readDecimalBinary = (packet, opts, throwUnexpectedError, nullBitmap, index)=>{\n    if (isNullBitmap(index, nullBitmap)) return null;\n    const valDec = packet.readDecimalLengthEncoded();\n    if (valDec != null && (opts.decimalAsNumber || opts.supportBigNumbers)) {\n        if (opts.supportBigNumbers && (opts.bigNumberStrings || !Number.isSafeInteger(Number(valDec)))) {\n            return valDec.toString();\n        }\n        return Number(valDec);\n    }\n    return valDec;\n};\nconst readJsonBinary = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : JSON.parse(packet.readStringLengthEncoded());\nconst readBitBinaryBoolean = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readBufferLengthEncoded()[0] === 1;\nconst readBinaryBuffer = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readBufferLengthEncoded();\nconst readBinarySet = (packet, opts, throwUnexpectedError, nullBitmap, index)=>{\n    if (isNullBitmap(index, nullBitmap)) return null;\n    const string = packet.readStringLengthEncoded();\n    return string == null ? null : string === \"\" ? [] : string.split(\",\");\n};\nconst readStringBinary = (packet, opts, throwUnexpectedError, nullBitmap, index)=>isNullBitmap(index, nullBitmap) ? null : packet.readStringLengthEncoded();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/decoder/binary-decoder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/decoder/text-decoder.js":
/*!**************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/decoder/text-decoder.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst FieldType = __webpack_require__(/*! ../../const/field-type */ \"(rsc)/./node_modules/mariadb/lib/const/field-type.js\");\nconst Errors = __webpack_require__(/*! ../../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nclass TextDecoder {\n    static castWrapper(column, packet, opts, nullBitmap, index) {\n        column.string = ()=>packet.readStringLengthEncoded();\n        column.buffer = ()=>packet.readBufferLengthEncoded();\n        column.float = ()=>packet.readFloatLengthCoded();\n        column.tiny = ()=>packet.readIntLengthEncoded();\n        column.short = ()=>packet.readIntLengthEncoded();\n        column.int = ()=>packet.readIntLengthEncoded();\n        column.long = ()=>packet.readBigIntLengthEncoded();\n        column.decimal = ()=>packet.readDecimalLengthEncoded();\n        column.date = ()=>packet.readDate(opts);\n        column.datetime = ()=>packet.readDateTime();\n        column.geometry = ()=>{\n            let defaultVal = null;\n            if (column.dataTypeName) {\n                switch(column.dataTypeName){\n                    case \"point\":\n                        defaultVal = {\n                            type: \"Point\"\n                        };\n                        break;\n                    case \"linestring\":\n                        defaultVal = {\n                            type: \"LineString\"\n                        };\n                        break;\n                    case \"polygon\":\n                        defaultVal = {\n                            type: \"Polygon\"\n                        };\n                        break;\n                    case \"multipoint\":\n                        defaultVal = {\n                            type: \"MultiPoint\"\n                        };\n                        break;\n                    case \"multilinestring\":\n                        defaultVal = {\n                            type: \"MultiLineString\"\n                        };\n                        break;\n                    case \"multipolygon\":\n                        defaultVal = {\n                            type: \"MultiPolygon\"\n                        };\n                        break;\n                    default:\n                        defaultVal = {\n                            type: column.dataTypeName\n                        };\n                        break;\n                }\n            }\n            return packet.readGeometry(defaultVal);\n        };\n    }\n    static parser(col, opts) {\n        // set reader function read(col, packet, index, nullBitmap, opts, throwUnexpectedError)\n        // this permit for multi-row result-set to avoid resolving type parsing each data.\n        switch(col.columnType){\n            case FieldType.TINY:\n            case FieldType.SHORT:\n            case FieldType.INT:\n            case FieldType.INT24:\n            case FieldType.YEAR:\n                return readIntLengthEncoded;\n            case FieldType.FLOAT:\n            case FieldType.DOUBLE:\n                return readFloatLengthCoded;\n            case FieldType.BIGINT:\n                if (opts.bigIntAsNumber || opts.supportBigNumbers) return readBigIntAsNumberLengthCoded;\n                return readBigIntLengthCoded;\n            case FieldType.DECIMAL:\n            case FieldType.NEWDECIMAL:\n                return col.scale === 0 ? readDecimalAsIntLengthCoded : readDecimalLengthCoded;\n            case FieldType.DATE:\n                return readDate;\n            case FieldType.DATETIME:\n            case FieldType.TIMESTAMP:\n                return readTimestamp;\n            case FieldType.TIME:\n                return readAsciiStringLengthEncoded;\n            case FieldType.GEOMETRY:\n                let defaultVal = col.__getDefaultGeomVal();\n                return readGeometry.bind(null, defaultVal);\n            case FieldType.JSON:\n                //for mysql only => parse string as JSON object\n                return readJson;\n            case FieldType.BIT:\n                if (col.columnLength === 1 && opts.bitOneIsBoolean) {\n                    return readBitAsBoolean;\n                }\n                return readBufferLengthEncoded;\n            default:\n                if (col.dataTypeFormat && col.dataTypeFormat === \"json\" && opts.autoJsonMap) {\n                    return readJson;\n                }\n                if (col.collation.index === 63) {\n                    return readBufferLengthEncoded;\n                }\n                if (col.isSet()) {\n                    return readSet;\n                }\n                return readStringLengthEncoded;\n        }\n    }\n}\nmodule.exports = TextDecoder;\nconst readGeometry = (defaultVal, packet, opts, throwUnexpectedError)=>packet.readGeometry(defaultVal);\nconst readIntLengthEncoded = (packet, opts, throwUnexpectedError)=>packet.readIntLengthEncoded();\nconst readStringLengthEncoded = (packet, opts, throwUnexpectedError)=>packet.readStringLengthEncoded();\nconst readFloatLengthCoded = (packet, opts, throwUnexpectedError)=>packet.readFloatLengthCoded();\nconst readBigIntLengthCoded = (packet, opts, throwUnexpectedError)=>packet.readBigIntLengthEncoded();\nconst readBigIntAsNumberLengthCoded = (packet, opts, throwUnexpectedError)=>{\n    const len = packet.readUnsignedLength();\n    if (len === null) return null;\n    if (len < 16) {\n        const val = packet._atoi(len);\n        if (opts.supportBigNumbers && opts.bigNumberStrings) {\n            return \"\" + val;\n        }\n        return val;\n    }\n    const val = packet.readBigIntFromLen(len);\n    if (opts.bigIntAsNumber && opts.checkNumberRange && !Number.isSafeInteger(Number(val))) {\n        return throwUnexpectedError(`value ${val} can't safely be converted to number`, false, null, \"42000\", Errors.ER_PARSING_PRECISION);\n    }\n    if (opts.supportBigNumbers && (opts.bigNumberStrings || !Number.isSafeInteger(Number(val)))) {\n        return val.toString();\n    }\n    return Number(val);\n};\nconst readDecimalAsIntLengthCoded = (packet, opts, throwUnexpectedError)=>{\n    const valDec = packet.readDecimalLengthEncoded();\n    if (valDec != null && (opts.decimalAsNumber || opts.supportBigNumbers)) {\n        if (opts.decimalAsNumber && opts.checkNumberRange && !Number.isSafeInteger(Number(valDec))) {\n            return throwUnexpectedError(`value ${valDec} can't safely be converted to number`, false, null, \"42000\", Errors.ER_PARSING_PRECISION);\n        }\n        if (opts.supportBigNumbers && (opts.bigNumberStrings || !Number.isSafeInteger(Number(valDec)))) {\n            return valDec.toString();\n        }\n        return Number(valDec);\n    }\n    return valDec;\n};\nconst readDecimalLengthCoded = (packet, opts, throwUnexpectedError)=>{\n    const valDec = packet.readDecimalLengthEncoded();\n    if (valDec != null && (opts.decimalAsNumber || opts.supportBigNumbers)) {\n        if (opts.supportBigNumbers && (opts.bigNumberStrings || !Number.isSafeInteger(Number(valDec)))) {\n            return valDec.toString();\n        }\n        return Number(valDec);\n    }\n    return valDec;\n};\nconst readDate = (packet, opts, throwUnexpectedError)=>{\n    if (opts.dateStrings) {\n        return packet.readAsciiStringLengthEncoded();\n    }\n    return packet.readDate();\n};\nconst readTimestamp = (packet, opts, throwUnexpectedError)=>{\n    if (opts.dateStrings) {\n        return packet.readAsciiStringLengthEncoded();\n    }\n    return packet.readDateTime();\n};\nconst readAsciiStringLengthEncoded = (packet, opts, throwUnexpectedError)=>packet.readAsciiStringLengthEncoded();\nconst readBitAsBoolean = (packet, opts, throwUnexpectedError)=>{\n    const val = packet.readBufferLengthEncoded();\n    return val == null ? null : val[0] === 1;\n};\nconst readBufferLengthEncoded = (packet, opts, throwUnexpectedError)=>packet.readBufferLengthEncoded();\nconst readJson = (packet, opts, throwUnexpectedError)=>JSON.parse(packet.readStringLengthEncoded());\nconst readSet = (packet, opts, throwUnexpectedError)=>{\n    const string = packet.readStringLengthEncoded();\n    return string == null ? null : string === \"\" ? [] : string.split(\",\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/decoder/text-decoder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/encoder/binary-encoder.js":
/*!****************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/encoder/binary-encoder.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nclass BinaryEncoder {\n    /**\n   * Write (and escape) current parameter value to output writer\n   *\n   * @param out     output writer\n   * @param value   current parameter\n   * @param opts    connection options\n   * @param info    connection information\n   */ writeParam(out, value, opts, info) {\n        // GEOJSON are not checked, because change to null/Buffer on parameter validation\n        switch(typeof value){\n            case \"boolean\":\n                out.writeInt8(value ? 0x01 : 0x00);\n                break;\n            case \"bigint\":\n                if (value >= 2n ** 63n) {\n                    out.writeLengthEncodedString(value.toString());\n                } else {\n                    out.writeBigInt(value);\n                }\n                break;\n            case \"number\":\n                // additional verification, to permit query without type,\n                // like 'SELECT ?' returning same type of value\n                if (Number.isSafeInteger(value) && value >= -2147483648 && value < 2147483647) {\n                    out.writeInt32(value);\n                    break;\n                }\n                out.writeDouble(value);\n                break;\n            case \"string\":\n                out.writeLengthEncodedString(value);\n                break;\n            case \"object\":\n                if (value instanceof Date) {\n                    out.writeBinaryDate(value);\n                } else if (Buffer.isBuffer(value)) {\n                    out.writeLengthEncodedBuffer(value);\n                } else if (typeof value.toSqlString === \"function\") {\n                    out.writeLengthEncodedString(String(value.toSqlString()));\n                } else {\n                    out.writeLengthEncodedString(JSON.stringify(value));\n                }\n                break;\n            default:\n                out.writeLengthEncodedBuffer(value);\n        }\n    }\n    static getBufferFromGeometryValue(value, headerType) {\n        let geoBuff;\n        let pos;\n        let type;\n        if (!headerType) {\n            switch(value.type){\n                case \"Point\":\n                    geoBuff = Buffer.allocUnsafe(21);\n                    geoBuff.writeInt8(0x01, 0); //LITTLE ENDIAN\n                    geoBuff.writeInt32LE(1, 1); //wkbPoint\n                    if (value.coordinates && Array.isArray(value.coordinates) && value.coordinates.length >= 2 && !isNaN(value.coordinates[0]) && !isNaN(value.coordinates[1])) {\n                        geoBuff.writeDoubleLE(value.coordinates[0], 5); //X\n                        geoBuff.writeDoubleLE(value.coordinates[1], 13); //Y\n                        return geoBuff;\n                    } else {\n                        return null;\n                    }\n                case \"LineString\":\n                    if (value.coordinates && Array.isArray(value.coordinates)) {\n                        const pointNumber = value.coordinates.length;\n                        geoBuff = Buffer.allocUnsafe(9 + 16 * pointNumber);\n                        geoBuff.writeInt8(0x01, 0); //LITTLE ENDIAN\n                        geoBuff.writeInt32LE(2, 1); //wkbLineString\n                        geoBuff.writeInt32LE(pointNumber, 5);\n                        for(let i = 0; i < pointNumber; i++){\n                            if (value.coordinates[i] && Array.isArray(value.coordinates[i]) && value.coordinates[i].length >= 2 && !isNaN(value.coordinates[i][0]) && !isNaN(value.coordinates[i][1])) {\n                                geoBuff.writeDoubleLE(value.coordinates[i][0], 9 + 16 * i); //X\n                                geoBuff.writeDoubleLE(value.coordinates[i][1], 17 + 16 * i); //Y\n                            } else {\n                                return null;\n                            }\n                        }\n                        return geoBuff;\n                    } else {\n                        return null;\n                    }\n                case \"Polygon\":\n                    if (value.coordinates && Array.isArray(value.coordinates)) {\n                        const numRings = value.coordinates.length;\n                        let size = 0;\n                        for(let i = 0; i < numRings; i++){\n                            size += 4 + 16 * value.coordinates[i].length;\n                        }\n                        geoBuff = Buffer.allocUnsafe(9 + size);\n                        geoBuff.writeInt8(0x01, 0); //LITTLE ENDIAN\n                        geoBuff.writeInt32LE(3, 1); //wkbPolygon\n                        geoBuff.writeInt32LE(numRings, 5);\n                        pos = 9;\n                        for(let i = 0; i < numRings; i++){\n                            const lineString = value.coordinates[i];\n                            if (lineString && Array.isArray(lineString)) {\n                                geoBuff.writeInt32LE(lineString.length, pos);\n                                pos += 4;\n                                for(let j = 0; j < lineString.length; j++){\n                                    if (lineString[j] && Array.isArray(lineString[j]) && lineString[j].length >= 2 && !isNaN(lineString[j][0]) && !isNaN(lineString[j][1])) {\n                                        geoBuff.writeDoubleLE(lineString[j][0], pos); //X\n                                        geoBuff.writeDoubleLE(lineString[j][1], pos + 8); //Y\n                                        pos += 16;\n                                    } else {\n                                        return null;\n                                    }\n                                }\n                            }\n                        }\n                        return geoBuff;\n                    } else {\n                        return null;\n                    }\n                case \"MultiPoint\":\n                    type = \"MultiPoint\";\n                    geoBuff = Buffer.allocUnsafe(9);\n                    geoBuff.writeInt8(0x01, 0); //LITTLE ENDIAN\n                    geoBuff.writeInt32LE(4, 1); //wkbMultiPoint\n                    break;\n                case \"MultiLineString\":\n                    type = \"MultiLineString\";\n                    geoBuff = Buffer.allocUnsafe(9);\n                    geoBuff.writeInt8(0x01, 0); //LITTLE ENDIAN\n                    geoBuff.writeInt32LE(5, 1); //wkbMultiLineString\n                    break;\n                case \"MultiPolygon\":\n                    type = \"MultiPolygon\";\n                    geoBuff = Buffer.allocUnsafe(9);\n                    geoBuff.writeInt8(0x01, 0); //LITTLE ENDIAN\n                    geoBuff.writeInt32LE(6, 1); //wkbMultiPolygon\n                    break;\n                case \"GeometryCollection\":\n                    geoBuff = Buffer.allocUnsafe(9);\n                    geoBuff.writeInt8(0x01, 0); //LITTLE ENDIAN\n                    geoBuff.writeInt32LE(7, 1); //wkbGeometryCollection\n                    if (value.geometries && Array.isArray(value.geometries)) {\n                        const coordinateLength = value.geometries.length;\n                        const subArrays = [\n                            geoBuff\n                        ];\n                        for(let i = 0; i < coordinateLength; i++){\n                            const tmpBuf = this.getBufferFromGeometryValue(value.geometries[i]);\n                            if (tmpBuf == null) break;\n                            subArrays.push(tmpBuf);\n                        }\n                        geoBuff.writeInt32LE(subArrays.length - 1, 5);\n                        return Buffer.concat(subArrays);\n                    } else {\n                        geoBuff.writeInt32LE(0, 5);\n                        return geoBuff;\n                    }\n                default:\n                    return null;\n            }\n            if (value.coordinates && Array.isArray(value.coordinates)) {\n                const coordinateLength = value.coordinates.length;\n                const subArrays = [\n                    geoBuff\n                ];\n                for(let i = 0; i < coordinateLength; i++){\n                    const tmpBuf = this.getBufferFromGeometryValue(value.coordinates[i], type);\n                    if (tmpBuf == null) break;\n                    subArrays.push(tmpBuf);\n                }\n                geoBuff.writeInt32LE(subArrays.length - 1, 5);\n                return Buffer.concat(subArrays);\n            } else {\n                geoBuff.writeInt32LE(0, 5);\n                return geoBuff;\n            }\n        } else {\n            switch(headerType){\n                case \"MultiPoint\":\n                    if (value && Array.isArray(value) && value.length >= 2 && !isNaN(value[0]) && !isNaN(value[1])) {\n                        geoBuff = Buffer.allocUnsafe(21);\n                        geoBuff.writeInt8(0x01, 0); //LITTLE ENDIAN\n                        geoBuff.writeInt32LE(1, 1); //wkbPoint\n                        geoBuff.writeDoubleLE(value[0], 5); //X\n                        geoBuff.writeDoubleLE(value[1], 13); //Y\n                        return geoBuff;\n                    }\n                    return null;\n                case \"MultiLineString\":\n                    if (value && Array.isArray(value)) {\n                        const pointNumber = value.length;\n                        geoBuff = Buffer.allocUnsafe(9 + 16 * pointNumber);\n                        geoBuff.writeInt8(0x01, 0); //LITTLE ENDIAN\n                        geoBuff.writeInt32LE(2, 1); //wkbLineString\n                        geoBuff.writeInt32LE(pointNumber, 5);\n                        for(let i = 0; i < pointNumber; i++){\n                            if (value[i] && Array.isArray(value[i]) && value[i].length >= 2 && !isNaN(value[i][0]) && !isNaN(value[i][1])) {\n                                geoBuff.writeDoubleLE(value[i][0], 9 + 16 * i); //X\n                                geoBuff.writeDoubleLE(value[i][1], 17 + 16 * i); //Y\n                            } else {\n                                return null;\n                            }\n                        }\n                        return geoBuff;\n                    }\n                    return null;\n                case \"MultiPolygon\":\n                    if (value && Array.isArray(value)) {\n                        const numRings = value.length;\n                        let size = 0;\n                        for(let i = 0; i < numRings; i++){\n                            size += 4 + 16 * value[i].length;\n                        }\n                        geoBuff = Buffer.allocUnsafe(9 + size);\n                        geoBuff.writeInt8(0x01, 0); //LITTLE ENDIAN\n                        geoBuff.writeInt32LE(3, 1); //wkbPolygon\n                        geoBuff.writeInt32LE(numRings, 5);\n                        pos = 9;\n                        for(let i = 0; i < numRings; i++){\n                            const lineString = value[i];\n                            if (lineString && Array.isArray(lineString)) {\n                                geoBuff.writeInt32LE(lineString.length, pos);\n                                pos += 4;\n                                for(let j = 0; j < lineString.length; j++){\n                                    if (lineString[j] && Array.isArray(lineString[j]) && lineString[j].length >= 2 && !isNaN(lineString[j][0]) && !isNaN(lineString[j][1])) {\n                                        geoBuff.writeDoubleLE(lineString[j][0], pos); //X\n                                        geoBuff.writeDoubleLE(lineString[j][1], pos + 8); //Y\n                                        pos += 16;\n                                    } else {\n                                        return null;\n                                    }\n                                }\n                            }\n                        }\n                        return geoBuff;\n                    }\n                    return null;\n            }\n            return null;\n        }\n    }\n}\nmodule.exports = BinaryEncoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/encoder/binary-encoder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/encoder/text-encoder.js":
/*!**************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/encoder/text-encoder.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst QUOTE = 0x27;\nclass TextEncoder {\n    /**\n   * Write (and escape) current parameter value to output writer\n   *\n   * @param out     output writer\n   * @param value   current parameter\n   * @param opts    connection options\n   * @param info    connection information\n   */ writeParam(out, value, opts, info) {\n        switch(typeof value){\n            case \"boolean\":\n                out.writeStringAscii(value ? \"true\" : \"false\");\n                break;\n            case \"bigint\":\n            case \"number\":\n                out.writeStringAscii(\"\" + value);\n                break;\n            case \"object\":\n                if (value == null) {\n                    out.writeStringAscii(\"NULL\");\n                } else if (value instanceof Date) {\n                    out.writeStringAscii(TextEncoder.getLocalDate(value));\n                } else if (Buffer.isBuffer(value)) {\n                    out.writeStringAscii(\"_BINARY '\");\n                    out.writeBufferEscape(value);\n                    out.writeInt8(QUOTE);\n                } else if (typeof value.toSqlString === \"function\") {\n                    out.writeStringEscapeQuote(String(value.toSqlString()));\n                } else if (Array.isArray(value)) {\n                    if (opts.arrayParenthesis) {\n                        out.writeStringAscii(\"(\");\n                    }\n                    for(let i = 0; i < value.length; i++){\n                        if (i !== 0) out.writeStringAscii(\",\");\n                        this.writeParam(out, value[i], opts, info);\n                    }\n                    if (opts.arrayParenthesis) {\n                        out.writeStringAscii(\")\");\n                    }\n                } else {\n                    if (value.type != null && [\n                        \"Point\",\n                        \"LineString\",\n                        \"Polygon\",\n                        \"MultiPoint\",\n                        \"MultiLineString\",\n                        \"MultiPolygon\",\n                        \"GeometryCollection\"\n                    ].includes(value.type)) {\n                        //GeoJSON format.\n                        let prefix = info.isMariaDB() && info.hasMinVersion(10, 1, 4) || !info.isMariaDB() && info.hasMinVersion(5, 7, 6) ? \"ST_\" : \"\";\n                        switch(value.type){\n                            case \"Point\":\n                                out.writeStringAscii(prefix + \"PointFromText('POINT(\" + TextEncoder.geoPointToString(value.coordinates) + \")')\");\n                                break;\n                            case \"LineString\":\n                                out.writeStringAscii(prefix + \"LineFromText('LINESTRING(\" + TextEncoder.geoArrayPointToString(value.coordinates) + \")')\");\n                                break;\n                            case \"Polygon\":\n                                out.writeStringAscii(prefix + \"PolygonFromText('POLYGON(\" + TextEncoder.geoMultiArrayPointToString(value.coordinates) + \")')\");\n                                break;\n                            case \"MultiPoint\":\n                                out.writeStringAscii(prefix + \"MULTIPOINTFROMTEXT('MULTIPOINT(\" + TextEncoder.geoArrayPointToString(value.coordinates) + \")')\");\n                                break;\n                            case \"MultiLineString\":\n                                out.writeStringAscii(prefix + \"MLineFromText('MULTILINESTRING(\" + TextEncoder.geoMultiArrayPointToString(value.coordinates) + \")')\");\n                                break;\n                            case \"MultiPolygon\":\n                                out.writeStringAscii(prefix + \"MPolyFromText('MULTIPOLYGON(\" + TextEncoder.geoMultiPolygonToString(value.coordinates) + \")')\");\n                                break;\n                            case \"GeometryCollection\":\n                                out.writeStringAscii(prefix + \"GeomCollFromText('GEOMETRYCOLLECTION(\" + TextEncoder.geometricCollectionToString(value.geometries) + \")')\");\n                                break;\n                        }\n                    } else {\n                        if (opts.permitSetMultiParamEntries) {\n                            let first = true;\n                            for(let key in value){\n                                const val = value[key];\n                                if (typeof val === \"function\") continue;\n                                if (first) {\n                                    first = false;\n                                } else {\n                                    out.writeStringAscii(\",\");\n                                }\n                                out.writeString(\"`\" + key + \"`\");\n                                out.writeStringAscii(\"=\");\n                                this.writeParam(out, val, opts, info);\n                            }\n                            if (first) out.writeStringEscapeQuote(JSON.stringify(value));\n                        } else {\n                            out.writeStringEscapeQuote(JSON.stringify(value));\n                        }\n                    }\n                }\n                break;\n            default:\n                if (value == null) {\n                    out.writeStringAscii(\"NULL\");\n                } else {\n                    out.writeStringEscapeQuote(value);\n                }\n        }\n    }\n    static geometricCollectionToString(geo) {\n        if (!geo) return \"\";\n        let st = \"\";\n        for(let i = 0; i < geo.length; i++){\n            //GeoJSON format.\n            st += i !== 0 ? \",\" : \"\";\n            switch(geo[i].type){\n                case \"Point\":\n                    st += `POINT(${TextEncoder.geoPointToString(geo[i].coordinates)})`;\n                    break;\n                case \"LineString\":\n                    st += `LINESTRING(${TextEncoder.geoArrayPointToString(geo[i].coordinates)})`;\n                    break;\n                case \"Polygon\":\n                    st += `POLYGON(${TextEncoder.geoMultiArrayPointToString(geo[i].coordinates)})`;\n                    break;\n                case \"MultiPoint\":\n                    st += `MULTIPOINT(${TextEncoder.geoArrayPointToString(geo[i].coordinates)})`;\n                    break;\n                case \"MultiLineString\":\n                    st += `MULTILINESTRING(${TextEncoder.geoMultiArrayPointToString(geo[i].coordinates)})`;\n                    break;\n                case \"MultiPolygon\":\n                    st += `MULTIPOLYGON(${TextEncoder.geoMultiPolygonToString(geo[i].coordinates)})`;\n                    break;\n            }\n        }\n        return st;\n    }\n    static geoMultiPolygonToString(coords) {\n        if (!coords) return \"\";\n        let st = \"\";\n        for(let i = 0; i < coords.length; i++){\n            st += (i !== 0 ? \",(\" : \"(\") + TextEncoder.geoMultiArrayPointToString(coords[i]) + \")\";\n        }\n        return st;\n    }\n    static geoMultiArrayPointToString(coords) {\n        if (!coords) return \"\";\n        let st = \"\";\n        for(let i = 0; i < coords.length; i++){\n            st += (i !== 0 ? \",(\" : \"(\") + TextEncoder.geoArrayPointToString(coords[i]) + \")\";\n        }\n        return st;\n    }\n    static geoArrayPointToString(coords) {\n        if (!coords) return \"\";\n        let st = \"\";\n        for(let i = 0; i < coords.length; i++){\n            st += (i !== 0 ? \",\" : \"\") + TextEncoder.geoPointToString(coords[i]);\n        }\n        return st;\n    }\n    static geoPointToString(coords) {\n        if (!coords) return \"\";\n        return (isNaN(coords[0]) ? \"\" : coords[0]) + \" \" + (isNaN(coords[1]) ? \"\" : coords[1]);\n    }\n    static getLocalDate(date) {\n        const year = date.getFullYear();\n        const mon = date.getMonth() + 1;\n        const day = date.getDate();\n        const hour = date.getHours();\n        const min = date.getMinutes();\n        const sec = date.getSeconds();\n        const ms = date.getMilliseconds();\n        //return 'YYYY-MM-DD HH:MM:SS' datetime format\n        //see https://mariadb.com/kb/en/library/datetime/\n        return \"'\" + TextEncoder.formatDigit(year, 4) + \"-\" + TextEncoder.formatDigit(mon, 2) + \"-\" + TextEncoder.formatDigit(day, 2) + \" \" + TextEncoder.formatDigit(hour, 2) + \":\" + TextEncoder.formatDigit(min, 2) + \":\" + TextEncoder.formatDigit(sec, 2) + (ms > 0 ? \".\" + TextEncoder.formatDigit(ms, 3) : \"\") + \"'\";\n    }\n    static formatDigit(val, significantDigit) {\n        let res = \"\" + val;\n        while(res.length < significantDigit)res = \"0\" + res;\n        return res;\n    }\n}\nmodule.exports = TextEncoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/encoder/text-encoder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/execute-stream.js":
/*!********************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/execute-stream.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Execute = __webpack_require__(/*! ./execute */ \"(rsc)/./node_modules/mariadb/lib/cmd/execute.js\");\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\n/**\n * Protocol COM_STMT_EXECUTE with streaming events.\n * see : https://mariadb.com/kb/en/com_stmt_execute/\n */ class ExecuteStream extends Execute {\n    constructor(cmdParam, connOpts, prepare, socket){\n        super(()=>{}, ()=>{}, connOpts, cmdParam, prepare);\n        this.socket = socket;\n        this.inStream = new Readable({\n            objectMode: true,\n            read: ()=>{\n                this.socket.resume();\n            }\n        });\n        this.on(\"fields\", function(meta) {\n            this.inStream.emit(\"fields\", meta);\n        });\n        this.on(\"error\", function(err) {\n            this.inStream.emit(\"error\", err);\n        });\n        this.on(\"close\", function(err) {\n            this.inStream.emit(\"error\", err);\n        });\n        this.on(\"end\", function(err) {\n            if (err) this.inStream.emit(\"error\", err);\n            this.socket.resume();\n            this.inStream.push(null);\n        });\n        this.inStream.close = (function() {\n            this.handleNewRows = ()=>{};\n            this.socket.resume();\n        }).bind(this);\n    }\n    handleNewRows(row) {\n        if (!this.inStream.push(row)) {\n            this.socket.pause();\n        }\n    }\n}\nmodule.exports = ExecuteStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2V4ZWN1dGUtc3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsVUFBVUMsbUJBQU9BLENBQUM7QUFDeEIsTUFBTSxFQUFFQyxRQUFRLEVBQUUsR0FBR0QsbUJBQU9BLENBQUM7QUFFN0I7OztDQUdDLEdBQ0QsTUFBTUUsc0JBQXNCSDtJQUMxQkksWUFBWUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxDQUFFO1FBQy9DLEtBQUssQ0FDSCxLQUFPLEdBQ1AsS0FBTyxHQUNQRixVQUNBRCxVQUNBRTtRQUVGLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlQLFNBQVM7WUFDM0JRLFlBQVk7WUFDWkMsTUFBTTtnQkFDSixJQUFJLENBQUNILE1BQU0sQ0FBQ0ksTUFBTTtZQUNwQjtRQUNGO1FBRUEsSUFBSSxDQUFDQyxFQUFFLENBQUMsVUFBVSxTQUFVQyxJQUFJO1lBQzlCLElBQUksQ0FBQ0wsUUFBUSxDQUFDTSxJQUFJLENBQUMsVUFBVUQ7UUFDL0I7UUFFQSxJQUFJLENBQUNELEVBQUUsQ0FBQyxTQUFTLFNBQVVHLEdBQUc7WUFDNUIsSUFBSSxDQUFDUCxRQUFRLENBQUNNLElBQUksQ0FBQyxTQUFTQztRQUM5QjtRQUVBLElBQUksQ0FBQ0gsRUFBRSxDQUFDLFNBQVMsU0FBVUcsR0FBRztZQUM1QixJQUFJLENBQUNQLFFBQVEsQ0FBQ00sSUFBSSxDQUFDLFNBQVNDO1FBQzlCO1FBRUEsSUFBSSxDQUFDSCxFQUFFLENBQUMsT0FBTyxTQUFVRyxHQUFHO1lBQzFCLElBQUlBLEtBQUssSUFBSSxDQUFDUCxRQUFRLENBQUNNLElBQUksQ0FBQyxTQUFTQztZQUNyQyxJQUFJLENBQUNSLE1BQU0sQ0FBQ0ksTUFBTTtZQUNsQixJQUFJLENBQUNILFFBQVEsQ0FBQ1EsSUFBSSxDQUFDO1FBQ3JCO1FBRUEsSUFBSSxDQUFDUixRQUFRLENBQUNTLEtBQUssR0FBRztZQUNwQixJQUFJLENBQUNDLGFBQWEsR0FBRyxLQUFPO1lBQzVCLElBQUksQ0FBQ1gsTUFBTSxDQUFDSSxNQUFNO1FBQ3BCLEdBQUVRLElBQUksQ0FBQyxJQUFJO0lBQ2I7SUFFQUQsY0FBY0UsR0FBRyxFQUFFO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUNaLFFBQVEsQ0FBQ1EsSUFBSSxDQUFDSSxNQUFNO1lBQzVCLElBQUksQ0FBQ2IsTUFBTSxDQUFDYyxLQUFLO1FBQ25CO0lBQ0Y7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvbGliL2NtZC9leGVjdXRlLXN0cmVhbS5qcz83YjUxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXhlY3V0ZSA9IHJlcXVpcmUoJy4vZXhlY3V0ZScpO1xuY29uc3QgeyBSZWFkYWJsZSB9ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbi8qKlxuICogUHJvdG9jb2wgQ09NX1NUTVRfRVhFQ1VURSB3aXRoIHN0cmVhbWluZyBldmVudHMuXG4gKiBzZWUgOiBodHRwczovL21hcmlhZGIuY29tL2tiL2VuL2NvbV9zdG10X2V4ZWN1dGUvXG4gKi9cbmNsYXNzIEV4ZWN1dGVTdHJlYW0gZXh0ZW5kcyBFeGVjdXRlIHtcbiAgY29uc3RydWN0b3IoY21kUGFyYW0sIGNvbm5PcHRzLCBwcmVwYXJlLCBzb2NrZXQpIHtcbiAgICBzdXBlcihcbiAgICAgICgpID0+IHt9LFxuICAgICAgKCkgPT4ge30sXG4gICAgICBjb25uT3B0cyxcbiAgICAgIGNtZFBhcmFtLFxuICAgICAgcHJlcGFyZVxuICAgICk7XG4gICAgdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XG4gICAgdGhpcy5pblN0cmVhbSA9IG5ldyBSZWFkYWJsZSh7XG4gICAgICBvYmplY3RNb2RlOiB0cnVlLFxuICAgICAgcmVhZDogKCkgPT4ge1xuICAgICAgICB0aGlzLnNvY2tldC5yZXN1bWUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2ZpZWxkcycsIGZ1bmN0aW9uIChtZXRhKSB7XG4gICAgICB0aGlzLmluU3RyZWFtLmVtaXQoJ2ZpZWxkcycsIG1ldGEpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICB0aGlzLmluU3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2Nsb3NlJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgdGhpcy5pblN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdlbmQnLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB0aGlzLmluU3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgIHRoaXMuc29ja2V0LnJlc3VtZSgpO1xuICAgICAgdGhpcy5pblN0cmVhbS5wdXNoKG51bGwpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5pblN0cmVhbS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuaGFuZGxlTmV3Um93cyA9ICgpID0+IHt9O1xuICAgICAgdGhpcy5zb2NrZXQucmVzdW1lKCk7XG4gICAgfS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaGFuZGxlTmV3Um93cyhyb3cpIHtcbiAgICBpZiAoIXRoaXMuaW5TdHJlYW0ucHVzaChyb3cpKSB7XG4gICAgICB0aGlzLnNvY2tldC5wYXVzZSgpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGVTdHJlYW07XG4iXSwibmFtZXMiOlsiRXhlY3V0ZSIsInJlcXVpcmUiLCJSZWFkYWJsZSIsIkV4ZWN1dGVTdHJlYW0iLCJjb25zdHJ1Y3RvciIsImNtZFBhcmFtIiwiY29ubk9wdHMiLCJwcmVwYXJlIiwic29ja2V0IiwiaW5TdHJlYW0iLCJvYmplY3RNb2RlIiwicmVhZCIsInJlc3VtZSIsIm9uIiwibWV0YSIsImVtaXQiLCJlcnIiLCJwdXNoIiwiY2xvc2UiLCJoYW5kbGVOZXdSb3dzIiwiYmluZCIsInJvdyIsInBhdXNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/execute-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/execute.js":
/*!*************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/execute.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Parser = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/mariadb/lib/cmd/parser.js\");\nconst Errors = __webpack_require__(/*! ../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst BinaryEncoder = __webpack_require__(/*! ./encoder/binary-encoder */ \"(rsc)/./node_modules/mariadb/lib/cmd/encoder/binary-encoder.js\");\nconst FieldType = __webpack_require__(/*! ../const/field-type */ \"(rsc)/./node_modules/mariadb/lib/const/field-type.js\");\n/**\n * Protocol COM_STMT_EXECUTE\n * see : https://mariadb.com/kb/en/com_stmt_execute/\n */ class Execute extends Parser {\n    constructor(resolve, reject, connOpts, cmdParam, prepare){\n        super(resolve, reject, connOpts, cmdParam);\n        this.encoder = new BinaryEncoder(this.opts);\n        this.binary = true;\n        this.prepare = prepare;\n        this.canSkipMeta = true;\n    }\n    /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */ start(out, opts, info) {\n        this.onPacketReceive = this.readResponsePacket;\n        this.values = [];\n        if (this.opts.namedPlaceholders && this.prepare._placeHolderIndex) {\n            // using named placeholders, so change values accordingly\n            this.values = new Array(this.prepare.parameterCount);\n            if (this.initialValues) {\n                for(let i = 0; i < this.prepare._placeHolderIndex.length; i++){\n                    this.values[i] = this.initialValues[this.prepare._placeHolderIndex[i]];\n                }\n            }\n        } else {\n            if (this.initialValues) this.values = Array.isArray(this.initialValues) ? this.initialValues : [\n                this.initialValues\n            ];\n        }\n        if (!this.validateParameters(info)) return;\n        // send long data using COM_STMT_SEND_LONG_DATA\n        this.longDataStep = false; // send long data\n        for(let i = 0; i < this.prepare.parameterCount; i++){\n            const value = this.values[i];\n            if (value != null && (typeof value === \"object\" && typeof value.pipe === \"function\" && typeof value.read === \"function\" || Buffer.isBuffer(value))) {\n                if (opts.logger.query) opts.logger.query(`EXECUTE: (${this.prepare.id}) sql: ${opts.logger.logParam ? this.displaySql() : this.sql}`);\n                if (!this.longDataStep) {\n                    this.longDataStep = true;\n                    this.registerStreamSendEvent(out, info);\n                    this.currentParam = i;\n                }\n                this.sendComStmtLongData(out, info, value);\n                return;\n            }\n        }\n        if (!this.longDataStep) {\n            // no stream parameter, so can send directly\n            if (opts.logger.query) opts.logger.query(`EXECUTE: (${this.prepare.id}) sql: ${opts.logger.logParam ? this.displaySql() : this.sql}`);\n            this.sendComStmtExecute(out, info);\n        }\n    }\n    /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */ validateParameters(info) {\n        //validate parameter size.\n        if (this.prepare.parameterCount > this.values.length) {\n            this.sendCancelled(`Parameter at position ${this.values.length} is not set\\\\nsql: ${this.displaySql()}`, Errors.ER_MISSING_PARAMETER, info);\n            return false;\n        }\n        //validate parameter is defined.\n        for(let i = 0; i < this.prepare.parameterCount; i++){\n            if (this.opts.namedPlaceholders && this.prepare._placeHolderIndex && this.values[i] === undefined) {\n                let errMsg = `Parameter named ${this.prepare._placeHolderIndex[i]} is not set`;\n                if (this.prepare._placeHolderIndex.length < this.prepare.parameterCount) {\n                    errMsg = `Command expect ${this.prepare.parameterCount} parameters, but found only ${this.prepare._placeHolderIndex.length} named parameters. You probably use question mark in place of named parameters`;\n                }\n                this.sendCancelled(errMsg, Errors.ER_PARAMETER_UNDEFINED, info);\n                return false;\n            }\n            // special check for GEOJSON that can be null even if object is not\n            if (this.values[i] && this.values[i].type != null && [\n                \"Point\",\n                \"LineString\",\n                \"Polygon\",\n                \"MultiPoint\",\n                \"MultiLineString\",\n                \"MultiPolygon\",\n                \"GeometryCollection\"\n            ].includes(this.values[i].type)) {\n                const geoBuff = BinaryEncoder.getBufferFromGeometryValue(this.values[i]);\n                if (geoBuff == null) {\n                    this.values[i] = null;\n                } else {\n                    this.values[i] = Buffer.concat([\n                        Buffer.from([\n                            0,\n                            0,\n                            0,\n                            0\n                        ]),\n                        geoBuff // WKB\n                    ]);\n                }\n            }\n        }\n        return true;\n    }\n    sendComStmtLongData(out, info, value) {\n        out.startPacket(this);\n        out.writeInt8(0x18);\n        out.writeInt32(this.prepare.id);\n        out.writeInt16(this.currentParam);\n        if (Buffer.isBuffer(value)) {\n            out.writeBuffer(value, 0, value.length);\n            out.flush();\n            this.currentParam++;\n            return this.paramWritten();\n        }\n        this.sending = true;\n        // streaming\n        value.on(\"data\", function(chunk) {\n            out.writeBuffer(chunk, 0, chunk.length);\n        });\n        value.on(\"end\", (function() {\n            out.flush();\n            this.currentParam++;\n            this.paramWritten();\n        }).bind(this));\n    }\n    /**\n   * Send a COM_STMT_EXECUTE\n   * @param out\n   * @param info\n   */ sendComStmtExecute(out, info) {\n        const parameterCount = this.prepare.parameterCount;\n        let nullCount = Math.floor((parameterCount + 7) / 8);\n        const nullBitsBuffer = Buffer.alloc(nullCount);\n        for(let i = 0; i < parameterCount; i++){\n            if (this.values[i] == null) {\n                nullBitsBuffer[Math.floor(i / 8)] |= 1 << i % 8;\n            }\n        }\n        out.startPacket(this);\n        out.writeInt8(0x17); // COM_STMT_EXECUTE\n        out.writeInt32(this.prepare.id); // Statement id\n        out.writeInt8(0); // no cursor flag\n        out.writeInt32(1); // 1 command\n        out.writeBuffer(nullBitsBuffer, 0, nullCount); // null buffer\n        out.writeInt8(1); // always send type to server\n        // send types\n        for(let i = 0; i < parameterCount; i++){\n            const val = this.values[i];\n            if (val != null) {\n                switch(typeof val){\n                    case \"boolean\":\n                        out.writeInt8(FieldType.TINY);\n                        break;\n                    case \"bigint\":\n                        if (val >= 2n ** 63n) {\n                            out.writeInt8(FieldType.NEWDECIMAL);\n                        } else {\n                            out.writeInt8(FieldType.BIGINT);\n                        }\n                        break;\n                    case \"number\":\n                        // additional verification, to permit query without type,\n                        // like 'SELECT ?' returning same type of value\n                        if (Number.isSafeInteger(val) && val >= -2147483648 && val < 2147483647) {\n                            out.writeInt8(FieldType.INT);\n                            break;\n                        }\n                        out.writeInt8(FieldType.DOUBLE);\n                        break;\n                    case \"string\":\n                        out.writeInt8(FieldType.VAR_STRING);\n                        break;\n                    case \"object\":\n                        if (val instanceof Date) {\n                            out.writeInt8(FieldType.DATETIME);\n                        } else if (Buffer.isBuffer(val)) {\n                            out.writeInt8(FieldType.BLOB);\n                        } else if (typeof val.toSqlString === \"function\") {\n                            out.writeInt8(FieldType.VAR_STRING);\n                        } else if (typeof val.pipe === \"function\" && typeof val.read === \"function\") {\n                            out.writeInt8(FieldType.BLOB);\n                        } else {\n                            out.writeInt8(FieldType.VAR_STRING);\n                        }\n                        break;\n                    default:\n                        out.writeInt8(FieldType.BLOB);\n                        break;\n                }\n            } else {\n                out.writeInt8(FieldType.VAR_STRING);\n            }\n            out.writeInt8(0);\n        }\n        //********************************************\n        // send not null / not streaming values\n        //********************************************\n        for(let i = 0; i < parameterCount; i++){\n            const value = this.values[i];\n            if (value != null && !(typeof value === \"object\" && typeof value.pipe === \"function\" && typeof value.read === \"function\") && !Buffer.isBuffer(value)) {\n                this.encoder.writeParam(out, value, this.opts, info);\n            }\n        }\n        out.flush();\n        this.sending = false;\n        this.emit(\"send_end\");\n    }\n    /**\n   * Define params events.\n   * Each parameter indicate that he is written to socket,\n   * emitting event so next stream parameter can be written.\n   */ registerStreamSendEvent(out, info) {\n        // note : Implementation use recursive calls, but stack won't never get near v8 max call stack size\n        //since event launched for stream parameter only\n        this.paramWritten = (function() {\n            if (this.longDataStep) {\n                for(; this.currentParam < this.prepare.parameterCount; this.currentParam++){\n                    const value = this.values[this.currentParam];\n                    if (value != null && typeof value === \"object\" && typeof value.pipe === \"function\" && typeof value.read === \"function\" || Buffer.isBuffer(value)) {\n                        this.sendComStmtLongData(out, info, value);\n                        return;\n                    }\n                }\n                this.longDataStep = false; // all streams have been send\n            }\n            if (!this.longDataStep) {\n                this.sendComStmtExecute(out, info);\n            }\n        }).bind(this);\n    }\n}\nmodule.exports = Execute;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/execute.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/caching-sha2-password-auth.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/handshake/auth/caching-sha2-password-auth.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst PluginAuth = __webpack_require__(/*! ./plugin-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/plugin-auth.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst Errors = __webpack_require__(/*! ../../../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst Sha256PasswordAuth = __webpack_require__(/*! ./sha256-password-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/sha256-password-auth.js\");\nconst State = {\n    INIT: \"INIT\",\n    FAST_AUTH_RESULT: \"FAST_AUTH_RESULT\",\n    REQUEST_SERVER_KEY: \"REQUEST_SERVER_KEY\",\n    SEND_AUTH: \"SEND_AUTH\"\n};\n/**\n * Use caching Sha2 password authentication\n */ class CachingSha2PasswordAuth extends PluginAuth {\n    constructor(packSeq, compressPackSeq, pluginData, cmdParam, reject, multiAuthResolver){\n        super(cmdParam, multiAuthResolver, reject);\n        this.multiAuthResolver = multiAuthResolver;\n        this.pluginData = pluginData;\n        this.sequenceNo = packSeq;\n        this.compressSequenceNo = compressPackSeq;\n        this.counter = 0;\n        this.state = State.INIT;\n    }\n    start(out, opts, info) {\n        this.exchange(this.pluginData, out, opts, info);\n        this.onPacketReceive = this.response;\n    }\n    exchange(packet, out, opts, info) {\n        switch(this.state){\n            case State.INIT:\n                const truncatedSeed = this.pluginData.slice(0, this.pluginData.length - 1);\n                const encPwd = Sha256PasswordAuth.encryptSha256Password(opts.password, truncatedSeed);\n                out.startPacket(this);\n                if (encPwd.length > 0) {\n                    out.writeBuffer(encPwd, 0, encPwd.length);\n                    out.flushPacket();\n                } else {\n                    out.writeEmptyPacket(true);\n                }\n                this.state = State.FAST_AUTH_RESULT;\n                return;\n            case State.FAST_AUTH_RESULT:\n                // length encoded numeric : 0x01 0x03/0x04\n                const fastAuthResult = packet[1];\n                switch(fastAuthResult){\n                    case 0x03:\n                        // success authentication\n                        // an OK_Packet will follow\n                        return;\n                    case 0x04:\n                        if (opts.ssl) {\n                            // using SSL, so sending password in clear\n                            out.startPacket(this);\n                            out.writeString(opts.password);\n                            out.writeInt8(0);\n                            out.flushPacket();\n                            return;\n                        }\n                        // retrieve public key from configuration or from server\n                        if (opts.cachingRsaPublicKey) {\n                            try {\n                                let key = opts.cachingRsaPublicKey;\n                                if (!key.includes(\"-----BEGIN\")) {\n                                    // rsaPublicKey contain path\n                                    key = fs.readFileSync(key, \"utf8\");\n                                }\n                                this.publicKey = Sha256PasswordAuth.retrievePublicKey(key);\n                            } catch (err) {\n                                return this.throwError(err, info);\n                            }\n                            // send Sha256Password Packet\n                            Sha256PasswordAuth.sendSha256PwdPacket(this, this.pluginData, this.publicKey, opts.password, out);\n                        } else {\n                            if (!opts.allowPublicKeyRetrieval) {\n                                return this.throwError(Errors.createFatalError(\"RSA public key is not available client side. Either set option `cachingRsaPublicKey` to indicate\" + \" public key path, or allow public key retrieval with option `allowPublicKeyRetrieval`\", Errors.ER_CANNOT_RETRIEVE_RSA_KEY, info), info);\n                            }\n                            this.state = State.REQUEST_SERVER_KEY;\n                            // ask caching public Key Retrieval\n                            out.startPacket(this);\n                            out.writeInt8(0x02);\n                            out.flushPacket();\n                        }\n                        return;\n                }\n            case State.REQUEST_SERVER_KEY:\n                this.publicKey = Sha256PasswordAuth.retrievePublicKey(packet.toString(undefined, 1));\n                this.state = State.SEND_AUTH;\n                Sha256PasswordAuth.sendSha256PwdPacket(this, this.pluginData, this.publicKey, opts.password, out);\n                return;\n        }\n    }\n    response(packet, out, opts, info) {\n        const marker = packet.peek();\n        switch(marker){\n            //*********************************************************************************************************\n            //* OK_Packet and Err_Packet ending packet\n            //*********************************************************************************************************\n            case 0x00:\n            case 0xff:\n                this.emit(\"send_end\");\n                return this.multiAuthResolver(packet, out, opts, info);\n            default:\n                let promptData = packet.readBufferRemaining();\n                this.exchange(promptData, out, opts, info);\n                this.onPacketReceive = this.response;\n        }\n    }\n}\nmodule.exports = CachingSha2PasswordAuth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/caching-sha2-password-auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/clear-password-auth.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/handshake/auth/clear-password-auth.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst PluginAuth = __webpack_require__(/*! ./plugin-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/plugin-auth.js\");\n/**\n * Send password in clear.\n * (used only when SSL is active)\n */ class ClearPasswordAuth extends PluginAuth {\n    constructor(packSeq, compressPackSeq, pluginData, cmdParam, resolve, reject, multiAuthResolver){\n        super(cmdParam, resolve, reject, multiAuthResolver);\n        this.sequenceNo = packSeq;\n        this.counter = 0;\n    }\n    start(out, opts, info) {\n        out.startPacket(this);\n        const pwd = opts.password;\n        if (pwd) {\n            if (Array.isArray(pwd)) {\n                out.writeString(pwd[this.counter++]);\n            } else {\n                out.writeString(pwd);\n            }\n        }\n        out.writeInt8(0);\n        out.flushPacket();\n        this.emit(\"send_end\");\n    }\n}\nmodule.exports = ClearPasswordAuth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2hhbmRzaGFrZS9hdXRoL2NsZWFyLXBhc3N3b3JkLWF1dGguanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQThDO0FBQzlDLGtEQUFrRDs7QUFFbEQsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFFM0I7OztDQUdDLEdBQ0QsTUFBTUMsMEJBQTBCRjtJQUM5QkcsWUFBWUMsT0FBTyxFQUFFQyxlQUFlLEVBQUVDLFVBQVUsRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsaUJBQWlCLENBQUU7UUFDOUYsS0FBSyxDQUFDSCxVQUFVQyxTQUFTQyxRQUFRQztRQUNqQyxJQUFJLENBQUNDLFVBQVUsR0FBR1A7UUFDbEIsSUFBSSxDQUFDUSxPQUFPLEdBQUc7SUFDakI7SUFFQUMsTUFBTUMsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRTtRQUNyQkYsSUFBSUcsV0FBVyxDQUFDLElBQUk7UUFDcEIsTUFBTUMsTUFBTUgsS0FBS0ksUUFBUTtRQUN6QixJQUFJRCxLQUFLO1lBQ1AsSUFBSUUsTUFBTUMsT0FBTyxDQUFDSCxNQUFNO2dCQUN0QkosSUFBSVEsV0FBVyxDQUFDSixHQUFHLENBQUMsSUFBSSxDQUFDTixPQUFPLEdBQUc7WUFDckMsT0FBTztnQkFDTEUsSUFBSVEsV0FBVyxDQUFDSjtZQUNsQjtRQUNGO1FBQ0FKLElBQUlTLFNBQVMsQ0FBQztRQUNkVCxJQUFJVSxXQUFXO1FBQ2YsSUFBSSxDQUFDQyxJQUFJLENBQUM7SUFDWjtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGZuZXh0anMvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2hhbmRzaGFrZS9hdXRoL2NsZWFyLXBhc3N3b3JkLWF1dGguanM/MTMwYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAgU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IExHUEwtMi4xLW9yLWxhdGVyXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE1LTIwMjMgTWFyaWFEQiBDb3Jwb3JhdGlvbiBBYlxuXG5jb25zdCBQbHVnaW5BdXRoID0gcmVxdWlyZSgnLi9wbHVnaW4tYXV0aCcpO1xuXG4vKipcbiAqIFNlbmQgcGFzc3dvcmQgaW4gY2xlYXIuXG4gKiAodXNlZCBvbmx5IHdoZW4gU1NMIGlzIGFjdGl2ZSlcbiAqL1xuY2xhc3MgQ2xlYXJQYXNzd29yZEF1dGggZXh0ZW5kcyBQbHVnaW5BdXRoIHtcbiAgY29uc3RydWN0b3IocGFja1NlcSwgY29tcHJlc3NQYWNrU2VxLCBwbHVnaW5EYXRhLCBjbWRQYXJhbSwgcmVzb2x2ZSwgcmVqZWN0LCBtdWx0aUF1dGhSZXNvbHZlcikge1xuICAgIHN1cGVyKGNtZFBhcmFtLCByZXNvbHZlLCByZWplY3QsIG11bHRpQXV0aFJlc29sdmVyKTtcbiAgICB0aGlzLnNlcXVlbmNlTm8gPSBwYWNrU2VxO1xuICAgIHRoaXMuY291bnRlciA9IDA7XG4gIH1cblxuICBzdGFydChvdXQsIG9wdHMsIGluZm8pIHtcbiAgICBvdXQuc3RhcnRQYWNrZXQodGhpcyk7XG4gICAgY29uc3QgcHdkID0gb3B0cy5wYXNzd29yZDtcbiAgICBpZiAocHdkKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwd2QpKSB7XG4gICAgICAgIG91dC53cml0ZVN0cmluZyhwd2RbdGhpcy5jb3VudGVyKytdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dC53cml0ZVN0cmluZyhwd2QpO1xuICAgICAgfVxuICAgIH1cbiAgICBvdXQud3JpdGVJbnQ4KDApO1xuICAgIG91dC5mbHVzaFBhY2tldCgpO1xuICAgIHRoaXMuZW1pdCgnc2VuZF9lbmQnKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENsZWFyUGFzc3dvcmRBdXRoO1xuIl0sIm5hbWVzIjpbIlBsdWdpbkF1dGgiLCJyZXF1aXJlIiwiQ2xlYXJQYXNzd29yZEF1dGgiLCJjb25zdHJ1Y3RvciIsInBhY2tTZXEiLCJjb21wcmVzc1BhY2tTZXEiLCJwbHVnaW5EYXRhIiwiY21kUGFyYW0iLCJyZXNvbHZlIiwicmVqZWN0IiwibXVsdGlBdXRoUmVzb2x2ZXIiLCJzZXF1ZW5jZU5vIiwiY291bnRlciIsInN0YXJ0Iiwib3V0Iiwib3B0cyIsImluZm8iLCJzdGFydFBhY2tldCIsInB3ZCIsInBhc3N3b3JkIiwiQXJyYXkiLCJpc0FycmF5Iiwid3JpdGVTdHJpbmciLCJ3cml0ZUludDgiLCJmbHVzaFBhY2tldCIsImVtaXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/clear-password-auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/ed25519-password-auth.js":
/*!******************************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/handshake/auth/ed25519-password-auth.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst PluginAuth = __webpack_require__(/*! ./plugin-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/plugin-auth.js\");\nconst Crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Standard authentication plugin\n */ class Ed25519PasswordAuth extends PluginAuth {\n    constructor(packSeq, compressPackSeq, pluginData, cmdParam, reject, multiAuthResolver){\n        super(cmdParam, multiAuthResolver, reject);\n        this.pluginData = pluginData;\n        this.sequenceNo = packSeq;\n        this.compressSequenceNo = compressPackSeq;\n    }\n    start(out, opts, info) {\n        //seed is ended with a null byte value.\n        const data = this.pluginData;\n        const sign = Ed25519PasswordAuth.encryptPassword(opts.password, data);\n        out.startPacket(this);\n        out.writeBuffer(sign, 0, sign.length);\n        out.flushPacket();\n        this.emit(\"send_end\");\n    }\n    static encryptPassword(password, seed) {\n        if (!password) return Buffer.alloc(0);\n        let i, j;\n        let p = [\n            gf(),\n            gf(),\n            gf(),\n            gf()\n        ];\n        const signedMsg = Buffer.alloc(96);\n        const bytePwd = Buffer.from(password);\n        let hash = Crypto.createHash(\"sha512\");\n        const d = hash.update(bytePwd).digest();\n        d[0] &= 248;\n        d[31] &= 127;\n        d[31] |= 64;\n        for(i = 0; i < 32; i++)signedMsg[64 + i] = seed[i];\n        for(i = 0; i < 32; i++)signedMsg[32 + i] = d[32 + i];\n        hash = Crypto.createHash(\"sha512\");\n        const r = hash.update(signedMsg.slice(32, 96)).digest();\n        reduce(r);\n        scalarbase(p, r);\n        pack(signedMsg, p);\n        p = [\n            gf(),\n            gf(),\n            gf(),\n            gf()\n        ];\n        scalarbase(p, d);\n        const tt = Buffer.alloc(32);\n        pack(tt, p);\n        for(i = 32; i < 64; i++)signedMsg[i] = tt[i - 32];\n        hash = Crypto.createHash(\"sha512\");\n        const h = hash.update(signedMsg).digest();\n        reduce(h);\n        const x = new Float64Array(64);\n        for(i = 0; i < 64; i++)x[i] = 0;\n        for(i = 0; i < 32; i++)x[i] = r[i];\n        for(i = 0; i < 32; i++){\n            for(j = 0; j < 32; j++){\n                x[i + j] += h[i] * d[j];\n            }\n        }\n        modL(signedMsg.subarray(32), x);\n        return signedMsg.slice(0, 64);\n    }\n}\n/*******************************************************\n *\n * This plugin uses the following public domain tweetnacl-js code by Dmitry Chestnykh\n * (from https://github.com/dchest/tweetnacl-js/blob/master/nacl-fast.js).\n * tweetnacl cannot be used directly (secret key mandatory size is 32 in nacl + implementation differ :\n * second scalarbase use hash of secret key, not secret key).\n *\n *******************************************************/ const gf = function(init) {\n    const r = new Float64Array(16);\n    if (init) for(let i = 0; i < init.length; i++)r[i] = init[i];\n    return r;\n};\nconst gf0 = gf(), gf1 = gf([\n    1\n]), D2 = gf([\n    0xf159,\n    0x26b2,\n    0x9b94,\n    0xebd6,\n    0xb156,\n    0x8283,\n    0x149a,\n    0x00e0,\n    0xd130,\n    0xeef3,\n    0x80f2,\n    0x198e,\n    0xfce7,\n    0x56df,\n    0xd9dc,\n    0x2406\n]), X = gf([\n    0xd51a,\n    0x8f25,\n    0x2d60,\n    0xc956,\n    0xa7b2,\n    0x9525,\n    0xc760,\n    0x692c,\n    0xdc5c,\n    0xfdd6,\n    0xe231,\n    0xc0a4,\n    0x53fe,\n    0xcd6e,\n    0x36d3,\n    0x2169\n]), Y = gf([\n    0x6658,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666\n]);\nconst L = new Float64Array([\n    0xed,\n    0xd3,\n    0xf5,\n    0x5c,\n    0x1a,\n    0x63,\n    0x12,\n    0x58,\n    0xd6,\n    0x9c,\n    0xf7,\n    0xa2,\n    0xde,\n    0xf9,\n    0xde,\n    0x14,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0x10\n]);\nfunction reduce(r) {\n    const x = new Float64Array(64);\n    let i;\n    for(i = 0; i < 64; i++)x[i] = r[i];\n    for(i = 0; i < 64; i++)r[i] = 0;\n    modL(r, x);\n}\nfunction modL(r, x) {\n    let carry, i, j, k;\n    for(i = 63; i >= 32; --i){\n        carry = 0;\n        for(j = i - 32, k = i - 12; j < k; ++j){\n            x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n            carry = x[j] + 128 >> 8;\n            x[j] -= carry * 256;\n        }\n        x[j] += carry;\n        x[i] = 0;\n    }\n    carry = 0;\n    for(j = 0; j < 32; j++){\n        x[j] += carry - (x[31] >> 4) * L[j];\n        carry = x[j] >> 8;\n        x[j] &= 255;\n    }\n    for(j = 0; j < 32; j++)x[j] -= carry * L[j];\n    for(i = 0; i < 32; i++){\n        x[i + 1] += x[i] >> 8;\n        r[i] = x[i] & 255;\n    }\n}\nfunction scalarbase(p, s) {\n    const q = [\n        gf(),\n        gf(),\n        gf(),\n        gf()\n    ];\n    set25519(q[0], X);\n    set25519(q[1], Y);\n    set25519(q[2], gf1);\n    M(q[3], X, Y);\n    scalarmult(p, q, s);\n}\nfunction set25519(r, a) {\n    for(let i = 0; i < 16; i++)r[i] = a[i] | 0;\n}\nfunction M(o, a, b) {\n    let v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0;\n    const b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n    v = a[0];\n    t0 += v * b0;\n    t1 += v * b1;\n    t2 += v * b2;\n    t3 += v * b3;\n    t4 += v * b4;\n    t5 += v * b5;\n    t6 += v * b6;\n    t7 += v * b7;\n    t8 += v * b8;\n    t9 += v * b9;\n    t10 += v * b10;\n    t11 += v * b11;\n    t12 += v * b12;\n    t13 += v * b13;\n    t14 += v * b14;\n    t15 += v * b15;\n    v = a[1];\n    t1 += v * b0;\n    t2 += v * b1;\n    t3 += v * b2;\n    t4 += v * b3;\n    t5 += v * b4;\n    t6 += v * b5;\n    t7 += v * b6;\n    t8 += v * b7;\n    t9 += v * b8;\n    t10 += v * b9;\n    t11 += v * b10;\n    t12 += v * b11;\n    t13 += v * b12;\n    t14 += v * b13;\n    t15 += v * b14;\n    t16 += v * b15;\n    v = a[2];\n    t2 += v * b0;\n    t3 += v * b1;\n    t4 += v * b2;\n    t5 += v * b3;\n    t6 += v * b4;\n    t7 += v * b5;\n    t8 += v * b6;\n    t9 += v * b7;\n    t10 += v * b8;\n    t11 += v * b9;\n    t12 += v * b10;\n    t13 += v * b11;\n    t14 += v * b12;\n    t15 += v * b13;\n    t16 += v * b14;\n    t17 += v * b15;\n    v = a[3];\n    t3 += v * b0;\n    t4 += v * b1;\n    t5 += v * b2;\n    t6 += v * b3;\n    t7 += v * b4;\n    t8 += v * b5;\n    t9 += v * b6;\n    t10 += v * b7;\n    t11 += v * b8;\n    t12 += v * b9;\n    t13 += v * b10;\n    t14 += v * b11;\n    t15 += v * b12;\n    t16 += v * b13;\n    t17 += v * b14;\n    t18 += v * b15;\n    v = a[4];\n    t4 += v * b0;\n    t5 += v * b1;\n    t6 += v * b2;\n    t7 += v * b3;\n    t8 += v * b4;\n    t9 += v * b5;\n    t10 += v * b6;\n    t11 += v * b7;\n    t12 += v * b8;\n    t13 += v * b9;\n    t14 += v * b10;\n    t15 += v * b11;\n    t16 += v * b12;\n    t17 += v * b13;\n    t18 += v * b14;\n    t19 += v * b15;\n    v = a[5];\n    t5 += v * b0;\n    t6 += v * b1;\n    t7 += v * b2;\n    t8 += v * b3;\n    t9 += v * b4;\n    t10 += v * b5;\n    t11 += v * b6;\n    t12 += v * b7;\n    t13 += v * b8;\n    t14 += v * b9;\n    t15 += v * b10;\n    t16 += v * b11;\n    t17 += v * b12;\n    t18 += v * b13;\n    t19 += v * b14;\n    t20 += v * b15;\n    v = a[6];\n    t6 += v * b0;\n    t7 += v * b1;\n    t8 += v * b2;\n    t9 += v * b3;\n    t10 += v * b4;\n    t11 += v * b5;\n    t12 += v * b6;\n    t13 += v * b7;\n    t14 += v * b8;\n    t15 += v * b9;\n    t16 += v * b10;\n    t17 += v * b11;\n    t18 += v * b12;\n    t19 += v * b13;\n    t20 += v * b14;\n    t21 += v * b15;\n    v = a[7];\n    t7 += v * b0;\n    t8 += v * b1;\n    t9 += v * b2;\n    t10 += v * b3;\n    t11 += v * b4;\n    t12 += v * b5;\n    t13 += v * b6;\n    t14 += v * b7;\n    t15 += v * b8;\n    t16 += v * b9;\n    t17 += v * b10;\n    t18 += v * b11;\n    t19 += v * b12;\n    t20 += v * b13;\n    t21 += v * b14;\n    t22 += v * b15;\n    v = a[8];\n    t8 += v * b0;\n    t9 += v * b1;\n    t10 += v * b2;\n    t11 += v * b3;\n    t12 += v * b4;\n    t13 += v * b5;\n    t14 += v * b6;\n    t15 += v * b7;\n    t16 += v * b8;\n    t17 += v * b9;\n    t18 += v * b10;\n    t19 += v * b11;\n    t20 += v * b12;\n    t21 += v * b13;\n    t22 += v * b14;\n    t23 += v * b15;\n    v = a[9];\n    t9 += v * b0;\n    t10 += v * b1;\n    t11 += v * b2;\n    t12 += v * b3;\n    t13 += v * b4;\n    t14 += v * b5;\n    t15 += v * b6;\n    t16 += v * b7;\n    t17 += v * b8;\n    t18 += v * b9;\n    t19 += v * b10;\n    t20 += v * b11;\n    t21 += v * b12;\n    t22 += v * b13;\n    t23 += v * b14;\n    t24 += v * b15;\n    v = a[10];\n    t10 += v * b0;\n    t11 += v * b1;\n    t12 += v * b2;\n    t13 += v * b3;\n    t14 += v * b4;\n    t15 += v * b5;\n    t16 += v * b6;\n    t17 += v * b7;\n    t18 += v * b8;\n    t19 += v * b9;\n    t20 += v * b10;\n    t21 += v * b11;\n    t22 += v * b12;\n    t23 += v * b13;\n    t24 += v * b14;\n    t25 += v * b15;\n    v = a[11];\n    t11 += v * b0;\n    t12 += v * b1;\n    t13 += v * b2;\n    t14 += v * b3;\n    t15 += v * b4;\n    t16 += v * b5;\n    t17 += v * b6;\n    t18 += v * b7;\n    t19 += v * b8;\n    t20 += v * b9;\n    t21 += v * b10;\n    t22 += v * b11;\n    t23 += v * b12;\n    t24 += v * b13;\n    t25 += v * b14;\n    t26 += v * b15;\n    v = a[12];\n    t12 += v * b0;\n    t13 += v * b1;\n    t14 += v * b2;\n    t15 += v * b3;\n    t16 += v * b4;\n    t17 += v * b5;\n    t18 += v * b6;\n    t19 += v * b7;\n    t20 += v * b8;\n    t21 += v * b9;\n    t22 += v * b10;\n    t23 += v * b11;\n    t24 += v * b12;\n    t25 += v * b13;\n    t26 += v * b14;\n    t27 += v * b15;\n    v = a[13];\n    t13 += v * b0;\n    t14 += v * b1;\n    t15 += v * b2;\n    t16 += v * b3;\n    t17 += v * b4;\n    t18 += v * b5;\n    t19 += v * b6;\n    t20 += v * b7;\n    t21 += v * b8;\n    t22 += v * b9;\n    t23 += v * b10;\n    t24 += v * b11;\n    t25 += v * b12;\n    t26 += v * b13;\n    t27 += v * b14;\n    t28 += v * b15;\n    v = a[14];\n    t14 += v * b0;\n    t15 += v * b1;\n    t16 += v * b2;\n    t17 += v * b3;\n    t18 += v * b4;\n    t19 += v * b5;\n    t20 += v * b6;\n    t21 += v * b7;\n    t22 += v * b8;\n    t23 += v * b9;\n    t24 += v * b10;\n    t25 += v * b11;\n    t26 += v * b12;\n    t27 += v * b13;\n    t28 += v * b14;\n    t29 += v * b15;\n    v = a[15];\n    t15 += v * b0;\n    t16 += v * b1;\n    t17 += v * b2;\n    t18 += v * b3;\n    t19 += v * b4;\n    t20 += v * b5;\n    t21 += v * b6;\n    t22 += v * b7;\n    t23 += v * b8;\n    t24 += v * b9;\n    t25 += v * b10;\n    t26 += v * b11;\n    t27 += v * b12;\n    t28 += v * b13;\n    t29 += v * b14;\n    t30 += v * b15;\n    t0 += 38 * t16;\n    t1 += 38 * t17;\n    t2 += 38 * t18;\n    t3 += 38 * t19;\n    t4 += 38 * t20;\n    t5 += 38 * t21;\n    t6 += 38 * t22;\n    t7 += 38 * t23;\n    t8 += 38 * t24;\n    t9 += 38 * t25;\n    t10 += 38 * t26;\n    t11 += 38 * t27;\n    t12 += 38 * t28;\n    t13 += 38 * t29;\n    t14 += 38 * t30;\n    // t15 left as is\n    // first car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    // second car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    o[0] = t0;\n    o[1] = t1;\n    o[2] = t2;\n    o[3] = t3;\n    o[4] = t4;\n    o[5] = t5;\n    o[6] = t6;\n    o[7] = t7;\n    o[8] = t8;\n    o[9] = t9;\n    o[10] = t10;\n    o[11] = t11;\n    o[12] = t12;\n    o[13] = t13;\n    o[14] = t14;\n    o[15] = t15;\n}\nfunction scalarmult(p, q, s) {\n    let b, i;\n    set25519(p[0], gf0);\n    set25519(p[1], gf1);\n    set25519(p[2], gf1);\n    set25519(p[3], gf0);\n    for(i = 255; i >= 0; --i){\n        b = s[i / 8 | 0] >> (i & 7) & 1;\n        cswap(p, q, b);\n        add(q, p);\n        add(p, p);\n        cswap(p, q, b);\n    }\n}\nfunction pack(r, p) {\n    const tx = gf(), ty = gf(), zi = gf();\n    inv25519(zi, p[2]);\n    M(tx, p[0], zi);\n    M(ty, p[1], zi);\n    pack25519(r, ty);\n    r[31] ^= par25519(tx) << 7;\n}\nfunction inv25519(o, i) {\n    const c = gf();\n    let a;\n    for(a = 0; a < 16; a++)c[a] = i[a];\n    for(a = 253; a >= 0; a--){\n        S(c, c);\n        if (a !== 2 && a !== 4) M(c, c, i);\n    }\n    for(a = 0; a < 16; a++)o[a] = c[a];\n}\nfunction S(o, a) {\n    M(o, a, a);\n}\nfunction par25519(a) {\n    const d = new Uint8Array(32);\n    pack25519(d, a);\n    return d[0] & 1;\n}\nfunction car25519(o) {\n    let i, v, c = 1;\n    for(i = 0; i < 16; i++){\n        v = o[i] + c + 65535;\n        c = Math.floor(v / 65536);\n        o[i] = v - c * 65536;\n    }\n    o[0] += c - 1 + 37 * (c - 1);\n}\nfunction pack25519(o, n) {\n    let i, j, b;\n    const m = gf(), t = gf();\n    for(i = 0; i < 16; i++)t[i] = n[i];\n    car25519(t);\n    car25519(t);\n    car25519(t);\n    for(j = 0; j < 2; j++){\n        m[0] = t[0] - 0xffed;\n        for(i = 1; i < 15; i++){\n            m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);\n            m[i - 1] &= 0xffff;\n        }\n        m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);\n        b = m[15] >> 16 & 1;\n        m[14] &= 0xffff;\n        sel25519(t, m, 1 - b);\n    }\n    for(i = 0; i < 16; i++){\n        o[2 * i] = t[i] & 0xff;\n        o[2 * i + 1] = t[i] >> 8;\n    }\n}\nfunction cswap(p, q, b) {\n    for(let i = 0; i < 4; i++){\n        sel25519(p[i], q[i], b);\n    }\n}\nfunction A(o, a, b) {\n    for(let i = 0; i < 16; i++)o[i] = a[i] + b[i];\n}\nfunction Z(o, a, b) {\n    for(let i = 0; i < 16; i++)o[i] = a[i] - b[i];\n}\nfunction add(p, q) {\n    const a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();\n    Z(a, p[1], p[0]);\n    Z(t, q[1], q[0]);\n    M(a, a, t);\n    A(b, p[0], p[1]);\n    A(t, q[0], q[1]);\n    M(b, b, t);\n    M(c, p[3], q[3]);\n    M(c, c, D2);\n    M(d, p[2], q[2]);\n    A(d, d, d);\n    Z(e, b, a);\n    Z(f, d, c);\n    A(g, d, c);\n    A(h, b, a);\n    M(p[0], e, f);\n    M(p[1], h, g);\n    M(p[2], g, f);\n    M(p[3], e, h);\n}\nfunction sel25519(p, q, b) {\n    const c = ~(b - 1);\n    let t;\n    for(let i = 0; i < 16; i++){\n        t = c & (p[i] ^ q[i]);\n        p[i] ^= t;\n        q[i] ^= t;\n    }\n}\nmodule.exports = Ed25519PasswordAuth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/ed25519-password-auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/handshake.js":
/*!******************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/handshake/auth/handshake.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst PluginAuth = __webpack_require__(/*! ./plugin-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/plugin-auth.js\");\nconst InitialHandshake = __webpack_require__(/*! ./initial-handshake */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/initial-handshake.js\");\nconst ClientCapabilities = __webpack_require__(/*! ../client-capabilities */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/client-capabilities.js\");\nconst Capabilities = __webpack_require__(/*! ../../../const/capabilities */ \"(rsc)/./node_modules/mariadb/lib/const/capabilities.js\");\nconst SslRequest = __webpack_require__(/*! ../ssl-request */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/ssl-request.js\");\nconst Errors = __webpack_require__(/*! ../../../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst NativePasswordAuth = __webpack_require__(/*! ./native-password-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/native-password-auth.js\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst Iconv = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\");\nconst driverVersion = (__webpack_require__(/*! ../../../../package.json */ \"(rsc)/./node_modules/mariadb/package.json\").version);\n/**\n * Handshake response\n */ class Handshake extends PluginAuth {\n    constructor(auth, getSocket, multiAuthResolver, reject){\n        super(null, multiAuthResolver, reject);\n        this.sequenceNo = 0;\n        this.compressSequenceNo = 0;\n        this.auth = auth;\n        this.getSocket = getSocket;\n        this.counter = 0;\n        this.onPacketReceive = this.parseHandshakeInit;\n    }\n    start(out, opts, info) {}\n    parseHandshakeInit(packet, out, opts, info) {\n        if (packet.peek() === 0xff) {\n            //in case that some host is not permit to connect server\n            const authErr = packet.readError(info);\n            authErr.fatal = true;\n            return this.throwError(authErr, info);\n        }\n        let handshake = new InitialHandshake(packet, info);\n        ClientCapabilities.init(opts, info);\n        if (opts.ssl) {\n            if (info.serverCapabilities & Capabilities.SSL) {\n                info.clientCapabilities |= Capabilities.SSL;\n                SslRequest.send(this, out, info, opts);\n                this.auth._createSecureContext(Handshake.send.bind(this, this, out, opts, handshake.pluginName, info));\n            } else {\n                return this.throwNewError(\"Trying to connect with ssl, but ssl not enabled in the server\", true, info, \"08S01\", Errors.ER_SERVER_SSL_DISABLED);\n            }\n        } else {\n            Handshake.send(this, out, opts, handshake.pluginName, info);\n        }\n        this.onPacketReceive = this.auth.handshakeResult.bind(this.auth);\n    }\n    /**\n   * Send Handshake response packet\n   * see https://mariadb.com/kb/en/library/1-connecting-connecting/#handshake-response-packet\n   *\n   * @param cmd         current handshake command\n   * @param out         output writer\n   * @param opts        connection options\n   * @param pluginName  plugin name\n   * @param info        connection information\n   */ static send(cmd, out, opts, pluginName, info) {\n        out.startPacket(cmd);\n        info.defaultPluginName = pluginName;\n        const pwd = Array.isArray(opts.password) ? opts.password[0] : opts.password;\n        let authToken;\n        let authPlugin;\n        switch(pluginName){\n            case \"mysql_clear_password\":\n                authToken = Buffer.from(pwd);\n                authPlugin = \"mysql_clear_password\";\n                break;\n            default:\n                authToken = NativePasswordAuth.encryptSha1Password(pwd, info.seed);\n                authPlugin = \"mysql_native_password\";\n                break;\n        }\n        out.writeInt32(Number(info.clientCapabilities & BigInt(0xffffffff)));\n        out.writeInt32(1024 * 1024 * 1024); // max packet size\n        // if collation index > 255, this will be set using SET NAMES xx COLLATE yy\n        out.writeInt8(opts.collation && opts.collation.index < 255 ? opts.collation.index : info.collation.index);\n        for(let i = 0; i < 19; i++){\n            out.writeInt8(0);\n        }\n        out.writeInt32(Number(info.clientCapabilities >> 32n));\n        //null encoded user\n        out.writeString(opts.user || \"\");\n        out.writeInt8(0);\n        if (info.serverCapabilities & Capabilities.PLUGIN_AUTH_LENENC_CLIENT_DATA) {\n            out.writeLengthCoded(authToken.length);\n            out.writeBuffer(authToken, 0, authToken.length);\n        } else if (info.serverCapabilities & Capabilities.SECURE_CONNECTION) {\n            out.writeInt8(authToken.length);\n            out.writeBuffer(authToken, 0, authToken.length);\n        } else {\n            out.writeBuffer(authToken, 0, authToken.length);\n            out.writeInt8(0);\n        }\n        if (info.clientCapabilities & Capabilities.CONNECT_WITH_DB) {\n            out.writeString(opts.database);\n            out.writeInt8(0);\n            info.database = opts.database;\n        }\n        if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n            out.writeString(authPlugin);\n            out.writeInt8(0);\n        }\n        if (info.clientCapabilities & Capabilities.CONNECT_ATTRS) {\n            out.writeInt8(0xfc);\n            let initPos = out.pos; //save position, assuming connection attributes length will be less than 2 bytes length\n            out.writeInt16(0);\n            const encoding = info.collation.charset;\n            Handshake.writeParam(out, \"_client_name\", encoding);\n            Handshake.writeParam(out, \"MariaDB connector/Node\", encoding);\n            Handshake.writeParam(out, \"_client_version\", encoding);\n            Handshake.writeParam(out, driverVersion, encoding);\n            const address = cmd.getSocket().address().address;\n            if (address) {\n                Handshake.writeParam(out, \"_server_host\", encoding);\n                Handshake.writeParam(out, address, encoding);\n            }\n            Handshake.writeParam(out, \"_os\", encoding);\n            Handshake.writeParam(out, process.platform, encoding);\n            Handshake.writeParam(out, \"_client_host\", encoding);\n            Handshake.writeParam(out, os.hostname(), encoding);\n            Handshake.writeParam(out, \"_node_version\", encoding);\n            Handshake.writeParam(out, process.versions.node, encoding);\n            if (opts.connectAttributes !== true) {\n                let attrNames = Object.keys(opts.connectAttributes);\n                for(let k = 0; k < attrNames.length; ++k){\n                    Handshake.writeParam(out, attrNames[k], encoding);\n                    Handshake.writeParam(out, opts.connectAttributes[attrNames[k]], encoding);\n                }\n            }\n            //write end size\n            out.writeInt16AtPos(initPos);\n        }\n        out.flushPacket();\n    }\n    static writeParam(out, val, encoding) {\n        let param = Buffer.isEncoding(encoding) ? Buffer.from(val, encoding) : Iconv.encode(val, encoding);\n        out.writeLengthCoded(param.length);\n        out.writeBuffer(param, 0, param.length);\n    }\n}\nmodule.exports = Handshake;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/handshake.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/initial-handshake.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/handshake/auth/initial-handshake.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Capabilities = __webpack_require__(/*! ../../../const/capabilities */ \"(rsc)/./node_modules/mariadb/lib/const/capabilities.js\");\nconst Collations = __webpack_require__(/*! ../../../const/collations */ \"(rsc)/./node_modules/mariadb/lib/const/collations.js\");\nconst ConnectionInformation = __webpack_require__(/*! ../../../misc/connection-information */ \"(rsc)/./node_modules/mariadb/lib/misc/connection-information.js\");\n/**\n * Parser server initial handshake.\n * see https://mariadb.com/kb/en/library/1-connecting-connecting/#initial-handshake-packet\n */ class InitialHandshake {\n    constructor(packet, info){\n        //protocolVersion\n        packet.skip(1);\n        info.serverVersion = {};\n        info.serverVersion.raw = packet.readStringNullEnded();\n        info.threadId = packet.readUInt32();\n        let seed1 = packet.readBuffer(8);\n        packet.skip(1); //reserved byte\n        let serverCapabilities = BigInt(packet.readUInt16());\n        info.collation = Collations.fromIndex(packet.readUInt8());\n        info.status = packet.readUInt16();\n        serverCapabilities += BigInt(packet.readUInt16()) << 16n;\n        let saltLength = 0;\n        if (serverCapabilities & Capabilities.PLUGIN_AUTH) {\n            saltLength = Math.max(12, packet.readUInt8() - 9);\n        } else {\n            packet.skip(1);\n        }\n        if (serverCapabilities & Capabilities.MYSQL) {\n            packet.skip(10);\n        } else {\n            packet.skip(6);\n            serverCapabilities += BigInt(packet.readUInt32()) << 32n;\n        }\n        if (serverCapabilities & Capabilities.SECURE_CONNECTION) {\n            let seed2 = packet.readBuffer(saltLength);\n            info.seed = Buffer.concat([\n                seed1,\n                seed2\n            ]);\n        } else {\n            info.seed = seed1;\n        }\n        packet.skip(1);\n        info.serverCapabilities = serverCapabilities;\n        /**\n     * check for MariaDB 10.x replication hack , remove fake prefix if needed\n     * MDEV-4088: in 10.0+, the real version string maybe prefixed with \"5.5.5-\",\n     * to workaround bugs in Oracle MySQL replication\n     **/ if (info.serverVersion.raw.startsWith(\"5.5.5-\")) {\n            info.serverVersion.mariaDb = true;\n            info.serverVersion.raw = info.serverVersion.raw.substring(\"5.5.5-\".length);\n        } else {\n            //Support for MDEV-7780 faking server version\n            info.serverVersion.mariaDb = info.serverVersion.raw.includes(\"MariaDB\") || (serverCapabilities & Capabilities.MYSQL) === 0n;\n        }\n        if (serverCapabilities & Capabilities.PLUGIN_AUTH) {\n            this.pluginName = packet.readStringNullEnded();\n        } else {\n            this.pluginName = \"\";\n        }\n        ConnectionInformation.parseVersionString(info);\n    }\n}\nmodule.exports = InitialHandshake;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2hhbmRzaGFrZS9hdXRoL2luaXRpYWwtaGFuZHNoYWtlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxrREFBa0Q7QUFFbEQ7QUFFQSxNQUFNQSxlQUFlQyxtQkFBT0EsQ0FBQztBQUM3QixNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQztBQUMzQixNQUFNRSx3QkFBd0JGLG1CQUFPQSxDQUFDO0FBRXRDOzs7Q0FHQyxHQUNELE1BQU1HO0lBQ0pDLFlBQVlDLE1BQU0sRUFBRUMsSUFBSSxDQUFFO1FBQ3hCLGlCQUFpQjtRQUNqQkQsT0FBT0UsSUFBSSxDQUFDO1FBQ1pELEtBQUtFLGFBQWEsR0FBRyxDQUFDO1FBQ3RCRixLQUFLRSxhQUFhLENBQUNDLEdBQUcsR0FBR0osT0FBT0ssbUJBQW1CO1FBQ25ESixLQUFLSyxRQUFRLEdBQUdOLE9BQU9PLFVBQVU7UUFFakMsSUFBSUMsUUFBUVIsT0FBT1MsVUFBVSxDQUFDO1FBQzlCVCxPQUFPRSxJQUFJLENBQUMsSUFBSSxlQUFlO1FBRS9CLElBQUlRLHFCQUFxQkMsT0FBT1gsT0FBT1ksVUFBVTtRQUNqRFgsS0FBS1ksU0FBUyxHQUFHakIsV0FBV2tCLFNBQVMsQ0FBQ2QsT0FBT2UsU0FBUztRQUN0RGQsS0FBS2UsTUFBTSxHQUFHaEIsT0FBT1ksVUFBVTtRQUMvQkYsc0JBQXNCQyxPQUFPWCxPQUFPWSxVQUFVLE9BQU8sR0FBRztRQUV4RCxJQUFJSyxhQUFhO1FBQ2pCLElBQUlQLHFCQUFxQmhCLGFBQWF3QixXQUFXLEVBQUU7WUFDakRELGFBQWFFLEtBQUtDLEdBQUcsQ0FBQyxJQUFJcEIsT0FBT2UsU0FBUyxLQUFLO1FBQ2pELE9BQU87WUFDTGYsT0FBT0UsSUFBSSxDQUFDO1FBQ2Q7UUFDQSxJQUFJUSxxQkFBcUJoQixhQUFhMkIsS0FBSyxFQUFFO1lBQzNDckIsT0FBT0UsSUFBSSxDQUFDO1FBQ2QsT0FBTztZQUNMRixPQUFPRSxJQUFJLENBQUM7WUFDWlEsc0JBQXNCQyxPQUFPWCxPQUFPTyxVQUFVLE9BQU8sR0FBRztRQUMxRDtRQUVBLElBQUlHLHFCQUFxQmhCLGFBQWE0QixpQkFBaUIsRUFBRTtZQUN2RCxJQUFJQyxRQUFRdkIsT0FBT1MsVUFBVSxDQUFDUTtZQUM5QmhCLEtBQUt1QixJQUFJLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQztnQkFBQ2xCO2dCQUFPZTthQUFNO1FBQzFDLE9BQU87WUFDTHRCLEtBQUt1QixJQUFJLEdBQUdoQjtRQUNkO1FBQ0FSLE9BQU9FLElBQUksQ0FBQztRQUNaRCxLQUFLUyxrQkFBa0IsR0FBR0E7UUFFMUI7Ozs7TUFJRSxHQUVGLElBQUlULEtBQUtFLGFBQWEsQ0FBQ0MsR0FBRyxDQUFDdUIsVUFBVSxDQUFDLFdBQVc7WUFDL0MxQixLQUFLRSxhQUFhLENBQUN5QixPQUFPLEdBQUc7WUFDN0IzQixLQUFLRSxhQUFhLENBQUNDLEdBQUcsR0FBR0gsS0FBS0UsYUFBYSxDQUFDQyxHQUFHLENBQUN5QixTQUFTLENBQUMsU0FBU0MsTUFBTTtRQUMzRSxPQUFPO1lBQ0wsNkNBQTZDO1lBQzdDN0IsS0FBS0UsYUFBYSxDQUFDeUIsT0FBTyxHQUN4QjNCLEtBQUtFLGFBQWEsQ0FBQ0MsR0FBRyxDQUFDMkIsUUFBUSxDQUFDLGNBQWMsQ0FBQ3JCLHFCQUFxQmhCLGFBQWEyQixLQUFLLE1BQU0sRUFBRTtRQUNsRztRQUVBLElBQUlYLHFCQUFxQmhCLGFBQWF3QixXQUFXLEVBQUU7WUFDakQsSUFBSSxDQUFDYyxVQUFVLEdBQUdoQyxPQUFPSyxtQkFBbUI7UUFDOUMsT0FBTztZQUNMLElBQUksQ0FBQzJCLFVBQVUsR0FBRztRQUNwQjtRQUNBbkMsc0JBQXNCb0Msa0JBQWtCLENBQUNoQztJQUMzQztBQUNGO0FBRUFpQyxPQUFPQyxPQUFPLEdBQUdyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvbGliL2NtZC9oYW5kc2hha2UvYXV0aC9pbml0aWFsLWhhbmRzaGFrZS5qcz9kZmIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQ2FwYWJpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vLi4vY29uc3QvY2FwYWJpbGl0aWVzJyk7XG5jb25zdCBDb2xsYXRpb25zID0gcmVxdWlyZSgnLi4vLi4vLi4vY29uc3QvY29sbGF0aW9ucycpO1xuY29uc3QgQ29ubmVjdGlvbkluZm9ybWF0aW9uID0gcmVxdWlyZSgnLi4vLi4vLi4vbWlzYy9jb25uZWN0aW9uLWluZm9ybWF0aW9uJyk7XG5cbi8qKlxuICogUGFyc2VyIHNlcnZlciBpbml0aWFsIGhhbmRzaGFrZS5cbiAqIHNlZSBodHRwczovL21hcmlhZGIuY29tL2tiL2VuL2xpYnJhcnkvMS1jb25uZWN0aW5nLWNvbm5lY3RpbmcvI2luaXRpYWwtaGFuZHNoYWtlLXBhY2tldFxuICovXG5jbGFzcyBJbml0aWFsSGFuZHNoYWtlIHtcbiAgY29uc3RydWN0b3IocGFja2V0LCBpbmZvKSB7XG4gICAgLy9wcm90b2NvbFZlcnNpb25cbiAgICBwYWNrZXQuc2tpcCgxKTtcbiAgICBpbmZvLnNlcnZlclZlcnNpb24gPSB7fTtcbiAgICBpbmZvLnNlcnZlclZlcnNpb24ucmF3ID0gcGFja2V0LnJlYWRTdHJpbmdOdWxsRW5kZWQoKTtcbiAgICBpbmZvLnRocmVhZElkID0gcGFja2V0LnJlYWRVSW50MzIoKTtcblxuICAgIGxldCBzZWVkMSA9IHBhY2tldC5yZWFkQnVmZmVyKDgpO1xuICAgIHBhY2tldC5za2lwKDEpOyAvL3Jlc2VydmVkIGJ5dGVcblxuICAgIGxldCBzZXJ2ZXJDYXBhYmlsaXRpZXMgPSBCaWdJbnQocGFja2V0LnJlYWRVSW50MTYoKSk7XG4gICAgaW5mby5jb2xsYXRpb24gPSBDb2xsYXRpb25zLmZyb21JbmRleChwYWNrZXQucmVhZFVJbnQ4KCkpO1xuICAgIGluZm8uc3RhdHVzID0gcGFja2V0LnJlYWRVSW50MTYoKTtcbiAgICBzZXJ2ZXJDYXBhYmlsaXRpZXMgKz0gQmlnSW50KHBhY2tldC5yZWFkVUludDE2KCkpIDw8IDE2bjtcblxuICAgIGxldCBzYWx0TGVuZ3RoID0gMDtcbiAgICBpZiAoc2VydmVyQ2FwYWJpbGl0aWVzICYgQ2FwYWJpbGl0aWVzLlBMVUdJTl9BVVRIKSB7XG4gICAgICBzYWx0TGVuZ3RoID0gTWF0aC5tYXgoMTIsIHBhY2tldC5yZWFkVUludDgoKSAtIDkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYWNrZXQuc2tpcCgxKTtcbiAgICB9XG4gICAgaWYgKHNlcnZlckNhcGFiaWxpdGllcyAmIENhcGFiaWxpdGllcy5NWVNRTCkge1xuICAgICAgcGFja2V0LnNraXAoMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYWNrZXQuc2tpcCg2KTtcbiAgICAgIHNlcnZlckNhcGFiaWxpdGllcyArPSBCaWdJbnQocGFja2V0LnJlYWRVSW50MzIoKSkgPDwgMzJuO1xuICAgIH1cblxuICAgIGlmIChzZXJ2ZXJDYXBhYmlsaXRpZXMgJiBDYXBhYmlsaXRpZXMuU0VDVVJFX0NPTk5FQ1RJT04pIHtcbiAgICAgIGxldCBzZWVkMiA9IHBhY2tldC5yZWFkQnVmZmVyKHNhbHRMZW5ndGgpO1xuICAgICAgaW5mby5zZWVkID0gQnVmZmVyLmNvbmNhdChbc2VlZDEsIHNlZWQyXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZm8uc2VlZCA9IHNlZWQxO1xuICAgIH1cbiAgICBwYWNrZXQuc2tpcCgxKTtcbiAgICBpbmZvLnNlcnZlckNhcGFiaWxpdGllcyA9IHNlcnZlckNhcGFiaWxpdGllcztcblxuICAgIC8qKlxuICAgICAqIGNoZWNrIGZvciBNYXJpYURCIDEwLnggcmVwbGljYXRpb24gaGFjayAsIHJlbW92ZSBmYWtlIHByZWZpeCBpZiBuZWVkZWRcbiAgICAgKiBNREVWLTQwODg6IGluIDEwLjArLCB0aGUgcmVhbCB2ZXJzaW9uIHN0cmluZyBtYXliZSBwcmVmaXhlZCB3aXRoIFwiNS41LjUtXCIsXG4gICAgICogdG8gd29ya2Fyb3VuZCBidWdzIGluIE9yYWNsZSBNeVNRTCByZXBsaWNhdGlvblxuICAgICAqKi9cblxuICAgIGlmIChpbmZvLnNlcnZlclZlcnNpb24ucmF3LnN0YXJ0c1dpdGgoJzUuNS41LScpKSB7XG4gICAgICBpbmZvLnNlcnZlclZlcnNpb24ubWFyaWFEYiA9IHRydWU7XG4gICAgICBpbmZvLnNlcnZlclZlcnNpb24ucmF3ID0gaW5mby5zZXJ2ZXJWZXJzaW9uLnJhdy5zdWJzdHJpbmcoJzUuNS41LScubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9TdXBwb3J0IGZvciBNREVWLTc3ODAgZmFraW5nIHNlcnZlciB2ZXJzaW9uXG4gICAgICBpbmZvLnNlcnZlclZlcnNpb24ubWFyaWFEYiA9XG4gICAgICAgIGluZm8uc2VydmVyVmVyc2lvbi5yYXcuaW5jbHVkZXMoJ01hcmlhREInKSB8fCAoc2VydmVyQ2FwYWJpbGl0aWVzICYgQ2FwYWJpbGl0aWVzLk1ZU1FMKSA9PT0gMG47XG4gICAgfVxuXG4gICAgaWYgKHNlcnZlckNhcGFiaWxpdGllcyAmIENhcGFiaWxpdGllcy5QTFVHSU5fQVVUSCkge1xuICAgICAgdGhpcy5wbHVnaW5OYW1lID0gcGFja2V0LnJlYWRTdHJpbmdOdWxsRW5kZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wbHVnaW5OYW1lID0gJyc7XG4gICAgfVxuICAgIENvbm5lY3Rpb25JbmZvcm1hdGlvbi5wYXJzZVZlcnNpb25TdHJpbmcoaW5mbyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJbml0aWFsSGFuZHNoYWtlO1xuIl0sIm5hbWVzIjpbIkNhcGFiaWxpdGllcyIsInJlcXVpcmUiLCJDb2xsYXRpb25zIiwiQ29ubmVjdGlvbkluZm9ybWF0aW9uIiwiSW5pdGlhbEhhbmRzaGFrZSIsImNvbnN0cnVjdG9yIiwicGFja2V0IiwiaW5mbyIsInNraXAiLCJzZXJ2ZXJWZXJzaW9uIiwicmF3IiwicmVhZFN0cmluZ051bGxFbmRlZCIsInRocmVhZElkIiwicmVhZFVJbnQzMiIsInNlZWQxIiwicmVhZEJ1ZmZlciIsInNlcnZlckNhcGFiaWxpdGllcyIsIkJpZ0ludCIsInJlYWRVSW50MTYiLCJjb2xsYXRpb24iLCJmcm9tSW5kZXgiLCJyZWFkVUludDgiLCJzdGF0dXMiLCJzYWx0TGVuZ3RoIiwiUExVR0lOX0FVVEgiLCJNYXRoIiwibWF4IiwiTVlTUUwiLCJTRUNVUkVfQ09OTkVDVElPTiIsInNlZWQyIiwic2VlZCIsIkJ1ZmZlciIsImNvbmNhdCIsInN0YXJ0c1dpdGgiLCJtYXJpYURiIiwic3Vic3RyaW5nIiwibGVuZ3RoIiwiaW5jbHVkZXMiLCJwbHVnaW5OYW1lIiwicGFyc2VWZXJzaW9uU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/initial-handshake.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/native-password-auth.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/handshake/auth/native-password-auth.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst PluginAuth = __webpack_require__(/*! ./plugin-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/plugin-auth.js\");\nconst Crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Standard authentication plugin\n */ class NativePasswordAuth extends PluginAuth {\n    constructor(packSeq, compressPackSeq, pluginData, cmdParam, reject, multiAuthResolver){\n        super(cmdParam, multiAuthResolver, reject);\n        this.pluginData = pluginData;\n        this.sequenceNo = packSeq;\n        this.compressSequenceNo = compressPackSeq;\n    }\n    start(out, opts, info) {\n        //seed is ended with a null byte value.\n        const data = this.pluginData.slice(0, 20);\n        let authToken = NativePasswordAuth.encryptSha1Password(opts.password, data);\n        out.startPacket(this);\n        if (authToken.length > 0) {\n            out.writeBuffer(authToken, 0, authToken.length);\n            out.flushPacket();\n        } else {\n            out.writeEmptyPacket(true);\n        }\n        this.emit(\"send_end\");\n    }\n    static encryptSha1Password(password, seed) {\n        if (!password) return Buffer.alloc(0);\n        let hash = Crypto.createHash(\"sha1\");\n        let stage1 = hash.update(password, \"utf8\").digest();\n        hash = Crypto.createHash(\"sha1\");\n        let stage2 = hash.update(stage1).digest();\n        hash = Crypto.createHash(\"sha1\");\n        hash.update(seed);\n        hash.update(stage2);\n        let digest = hash.digest();\n        let returnBytes = Buffer.allocUnsafe(digest.length);\n        for(let i = 0; i < digest.length; i++){\n            returnBytes[i] = stage1[i] ^ digest[i];\n        }\n        return returnBytes;\n    }\n}\nmodule.exports = NativePasswordAuth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2hhbmRzaGFrZS9hdXRoL25hdGl2ZS1wYXNzd29yZC1hdXRoLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxrREFBa0Q7QUFFbEQ7QUFFQSxNQUFNQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUMzQixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUV2Qjs7Q0FFQyxHQUNELE1BQU1FLDJCQUEyQkg7SUFDL0JJLFlBQVlDLE9BQU8sRUFBRUMsZUFBZSxFQUFFQyxVQUFVLEVBQUVDLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxpQkFBaUIsQ0FBRTtRQUNyRixLQUFLLENBQUNGLFVBQVVFLG1CQUFtQkQ7UUFDbkMsSUFBSSxDQUFDRixVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0ksVUFBVSxHQUFHTjtRQUNsQixJQUFJLENBQUNPLGtCQUFrQixHQUFHTjtJQUM1QjtJQUVBTyxNQUFNQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFO1FBQ3JCLHVDQUF1QztRQUN2QyxNQUFNQyxPQUFPLElBQUksQ0FBQ1YsVUFBVSxDQUFDVyxLQUFLLENBQUMsR0FBRztRQUN0QyxJQUFJQyxZQUFZaEIsbUJBQW1CaUIsbUJBQW1CLENBQUNMLEtBQUtNLFFBQVEsRUFBRUo7UUFFdEVILElBQUlRLFdBQVcsQ0FBQyxJQUFJO1FBQ3BCLElBQUlILFVBQVVJLE1BQU0sR0FBRyxHQUFHO1lBQ3hCVCxJQUFJVSxXQUFXLENBQUNMLFdBQVcsR0FBR0EsVUFBVUksTUFBTTtZQUM5Q1QsSUFBSVcsV0FBVztRQUNqQixPQUFPO1lBQ0xYLElBQUlZLGdCQUFnQixDQUFDO1FBQ3ZCO1FBQ0EsSUFBSSxDQUFDQyxJQUFJLENBQUM7SUFDWjtJQUVBLE9BQU9QLG9CQUFvQkMsUUFBUSxFQUFFTyxJQUFJLEVBQUU7UUFDekMsSUFBSSxDQUFDUCxVQUFVLE9BQU9RLE9BQU9DLEtBQUssQ0FBQztRQUVuQyxJQUFJQyxPQUFPN0IsT0FBTzhCLFVBQVUsQ0FBQztRQUM3QixJQUFJQyxTQUFTRixLQUFLRyxNQUFNLENBQUNiLFVBQVUsUUFBUWMsTUFBTTtRQUNqREosT0FBTzdCLE9BQU84QixVQUFVLENBQUM7UUFFekIsSUFBSUksU0FBU0wsS0FBS0csTUFBTSxDQUFDRCxRQUFRRSxNQUFNO1FBQ3ZDSixPQUFPN0IsT0FBTzhCLFVBQVUsQ0FBQztRQUV6QkQsS0FBS0csTUFBTSxDQUFDTjtRQUNaRyxLQUFLRyxNQUFNLENBQUNFO1FBRVosSUFBSUQsU0FBU0osS0FBS0ksTUFBTTtRQUN4QixJQUFJRSxjQUFjUixPQUFPUyxXQUFXLENBQUNILE9BQU9aLE1BQU07UUFDbEQsSUFBSyxJQUFJZ0IsSUFBSSxHQUFHQSxJQUFJSixPQUFPWixNQUFNLEVBQUVnQixJQUFLO1lBQ3RDRixXQUFXLENBQUNFLEVBQUUsR0FBR04sTUFBTSxDQUFDTSxFQUFFLEdBQUdKLE1BQU0sQ0FBQ0ksRUFBRTtRQUN4QztRQUNBLE9BQU9GO0lBQ1Q7QUFDRjtBQUVBRyxPQUFPQyxPQUFPLEdBQUd0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvbGliL2NtZC9oYW5kc2hha2UvYXV0aC9uYXRpdmUtcGFzc3dvcmQtYXV0aC5qcz85NThlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUGx1Z2luQXV0aCA9IHJlcXVpcmUoJy4vcGx1Z2luLWF1dGgnKTtcbmNvbnN0IENyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG4vKipcbiAqIFN0YW5kYXJkIGF1dGhlbnRpY2F0aW9uIHBsdWdpblxuICovXG5jbGFzcyBOYXRpdmVQYXNzd29yZEF1dGggZXh0ZW5kcyBQbHVnaW5BdXRoIHtcbiAgY29uc3RydWN0b3IocGFja1NlcSwgY29tcHJlc3NQYWNrU2VxLCBwbHVnaW5EYXRhLCBjbWRQYXJhbSwgcmVqZWN0LCBtdWx0aUF1dGhSZXNvbHZlcikge1xuICAgIHN1cGVyKGNtZFBhcmFtLCBtdWx0aUF1dGhSZXNvbHZlciwgcmVqZWN0KTtcbiAgICB0aGlzLnBsdWdpbkRhdGEgPSBwbHVnaW5EYXRhO1xuICAgIHRoaXMuc2VxdWVuY2VObyA9IHBhY2tTZXE7XG4gICAgdGhpcy5jb21wcmVzc1NlcXVlbmNlTm8gPSBjb21wcmVzc1BhY2tTZXE7XG4gIH1cblxuICBzdGFydChvdXQsIG9wdHMsIGluZm8pIHtcbiAgICAvL3NlZWQgaXMgZW5kZWQgd2l0aCBhIG51bGwgYnl0ZSB2YWx1ZS5cbiAgICBjb25zdCBkYXRhID0gdGhpcy5wbHVnaW5EYXRhLnNsaWNlKDAsIDIwKTtcbiAgICBsZXQgYXV0aFRva2VuID0gTmF0aXZlUGFzc3dvcmRBdXRoLmVuY3J5cHRTaGExUGFzc3dvcmQob3B0cy5wYXNzd29yZCwgZGF0YSk7XG5cbiAgICBvdXQuc3RhcnRQYWNrZXQodGhpcyk7XG4gICAgaWYgKGF1dGhUb2tlbi5sZW5ndGggPiAwKSB7XG4gICAgICBvdXQud3JpdGVCdWZmZXIoYXV0aFRva2VuLCAwLCBhdXRoVG9rZW4ubGVuZ3RoKTtcbiAgICAgIG91dC5mbHVzaFBhY2tldCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQud3JpdGVFbXB0eVBhY2tldCh0cnVlKTtcbiAgICB9XG4gICAgdGhpcy5lbWl0KCdzZW5kX2VuZCcpO1xuICB9XG5cbiAgc3RhdGljIGVuY3J5cHRTaGExUGFzc3dvcmQocGFzc3dvcmQsIHNlZWQpIHtcbiAgICBpZiAoIXBhc3N3b3JkKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuXG4gICAgbGV0IGhhc2ggPSBDcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpO1xuICAgIGxldCBzdGFnZTEgPSBoYXNoLnVwZGF0ZShwYXNzd29yZCwgJ3V0ZjgnKS5kaWdlc3QoKTtcbiAgICBoYXNoID0gQ3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTEnKTtcblxuICAgIGxldCBzdGFnZTIgPSBoYXNoLnVwZGF0ZShzdGFnZTEpLmRpZ2VzdCgpO1xuICAgIGhhc2ggPSBDcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpO1xuXG4gICAgaGFzaC51cGRhdGUoc2VlZCk7XG4gICAgaGFzaC51cGRhdGUoc3RhZ2UyKTtcblxuICAgIGxldCBkaWdlc3QgPSBoYXNoLmRpZ2VzdCgpO1xuICAgIGxldCByZXR1cm5CeXRlcyA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShkaWdlc3QubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZ2VzdC5sZW5ndGg7IGkrKykge1xuICAgICAgcmV0dXJuQnl0ZXNbaV0gPSBzdGFnZTFbaV0gXiBkaWdlc3RbaV07XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5CeXRlcztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE5hdGl2ZVBhc3N3b3JkQXV0aDtcbiJdLCJuYW1lcyI6WyJQbHVnaW5BdXRoIiwicmVxdWlyZSIsIkNyeXB0byIsIk5hdGl2ZVBhc3N3b3JkQXV0aCIsImNvbnN0cnVjdG9yIiwicGFja1NlcSIsImNvbXByZXNzUGFja1NlcSIsInBsdWdpbkRhdGEiLCJjbWRQYXJhbSIsInJlamVjdCIsIm11bHRpQXV0aFJlc29sdmVyIiwic2VxdWVuY2VObyIsImNvbXByZXNzU2VxdWVuY2VObyIsInN0YXJ0Iiwib3V0Iiwib3B0cyIsImluZm8iLCJkYXRhIiwic2xpY2UiLCJhdXRoVG9rZW4iLCJlbmNyeXB0U2hhMVBhc3N3b3JkIiwicGFzc3dvcmQiLCJzdGFydFBhY2tldCIsImxlbmd0aCIsIndyaXRlQnVmZmVyIiwiZmx1c2hQYWNrZXQiLCJ3cml0ZUVtcHR5UGFja2V0IiwiZW1pdCIsInNlZWQiLCJCdWZmZXIiLCJhbGxvYyIsImhhc2giLCJjcmVhdGVIYXNoIiwic3RhZ2UxIiwidXBkYXRlIiwiZGlnZXN0Iiwic3RhZ2UyIiwicmV0dXJuQnl0ZXMiLCJhbGxvY1Vuc2FmZSIsImkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/native-password-auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/pam-password-auth.js":
/*!**************************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/handshake/auth/pam-password-auth.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst PluginAuth = __webpack_require__(/*! ./plugin-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/plugin-auth.js\");\n/**\n * Use PAM authentication\n */ class PamPasswordAuth extends PluginAuth {\n    constructor(packSeq, compressPackSeq, pluginData, cmdParam, reject, multiAuthResolver){\n        super(cmdParam, multiAuthResolver, reject);\n        this.pluginData = pluginData;\n        this.sequenceNo = packSeq;\n        this.compressSequenceNo = compressPackSeq;\n        this.counter = 0;\n        this.multiAuthResolver = multiAuthResolver;\n    }\n    start(out, opts, info) {\n        this.exchange(this.pluginData, out, opts, info);\n        this.onPacketReceive = this.response;\n    }\n    exchange(buffer, out, opts, info) {\n        //conversation is :\n        // - first byte is information tell if question is a password (4) or clear text (2).\n        // - other bytes are the question to user\n        out.startPacket(this);\n        let pwd;\n        if (Array.isArray(opts.password)) {\n            pwd = opts.password[this.counter];\n            this.counter++;\n        } else {\n            pwd = opts.password;\n        }\n        if (pwd) out.writeString(pwd);\n        out.writeInt8(0);\n        out.flushPacket();\n    }\n    response(packet, out, opts, info) {\n        const marker = packet.peek();\n        switch(marker){\n            //*********************************************************************************************************\n            //* OK_Packet and Err_Packet ending packet\n            //*********************************************************************************************************\n            case 0x00:\n            case 0xff:\n                this.emit(\"send_end\");\n                return this.multiAuthResolver(packet, out, opts, info);\n            default:\n                let promptData = packet.readBuffer();\n                this.exchange(promptData, out, opts, info);\n                this.onPacketReceive = this.response;\n        }\n    }\n}\nmodule.exports = PamPasswordAuth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2hhbmRzaGFrZS9hdXRoL3BhbS1wYXNzd29yZC1hdXRoLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxrREFBa0Q7O0FBRWxELE1BQU1BLGFBQWFDLG1CQUFPQSxDQUFDO0FBRTNCOztDQUVDLEdBQ0QsTUFBTUMsd0JBQXdCRjtJQUM1QkcsWUFBWUMsT0FBTyxFQUFFQyxlQUFlLEVBQUVDLFVBQVUsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLGlCQUFpQixDQUFFO1FBQ3JGLEtBQUssQ0FBQ0YsVUFBVUUsbUJBQW1CRDtRQUNuQyxJQUFJLENBQUNGLFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDSSxVQUFVLEdBQUdOO1FBQ2xCLElBQUksQ0FBQ08sa0JBQWtCLEdBQUdOO1FBQzFCLElBQUksQ0FBQ08sT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDSCxpQkFBaUIsR0FBR0E7SUFDM0I7SUFFQUksTUFBTUMsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRTtRQUNyQixJQUFJLENBQUNDLFFBQVEsQ0FBQyxJQUFJLENBQUNYLFVBQVUsRUFBRVEsS0FBS0MsTUFBTUM7UUFDMUMsSUFBSSxDQUFDRSxlQUFlLEdBQUcsSUFBSSxDQUFDQyxRQUFRO0lBQ3RDO0lBRUFGLFNBQVNHLE1BQU0sRUFBRU4sR0FBRyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRTtRQUNoQyxtQkFBbUI7UUFDbkIsb0ZBQW9GO1FBQ3BGLHlDQUF5QztRQUV6Q0YsSUFBSU8sV0FBVyxDQUFDLElBQUk7UUFFcEIsSUFBSUM7UUFDSixJQUFJQyxNQUFNQyxPQUFPLENBQUNULEtBQUtVLFFBQVEsR0FBRztZQUNoQ0gsTUFBTVAsS0FBS1UsUUFBUSxDQUFDLElBQUksQ0FBQ2IsT0FBTyxDQUFDO1lBQ2pDLElBQUksQ0FBQ0EsT0FBTztRQUNkLE9BQU87WUFDTFUsTUFBTVAsS0FBS1UsUUFBUTtRQUNyQjtRQUVBLElBQUlILEtBQUtSLElBQUlZLFdBQVcsQ0FBQ0o7UUFDekJSLElBQUlhLFNBQVMsQ0FBQztRQUNkYixJQUFJYyxXQUFXO0lBQ2pCO0lBRUFULFNBQVNVLE1BQU0sRUFBRWYsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRTtRQUNoQyxNQUFNYyxTQUFTRCxPQUFPRSxJQUFJO1FBQzFCLE9BQVFEO1lBQ04sMkdBQTJHO1lBQzNHLDBDQUEwQztZQUMxQywyR0FBMkc7WUFDM0csS0FBSztZQUNMLEtBQUs7Z0JBQ0gsSUFBSSxDQUFDRSxJQUFJLENBQUM7Z0JBQ1YsT0FBTyxJQUFJLENBQUN2QixpQkFBaUIsQ0FBQ29CLFFBQVFmLEtBQUtDLE1BQU1DO1lBRW5EO2dCQUNFLElBQUlpQixhQUFhSixPQUFPSyxVQUFVO2dCQUNsQyxJQUFJLENBQUNqQixRQUFRLENBQUNnQixZQUFZbkIsS0FBS0MsTUFBTUM7Z0JBQ3JDLElBQUksQ0FBQ0UsZUFBZSxHQUFHLElBQUksQ0FBQ0MsUUFBUTtRQUN4QztJQUNGO0FBQ0Y7QUFFQWdCLE9BQU9DLE9BQU8sR0FBR2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGZuZXh0anMvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2hhbmRzaGFrZS9hdXRoL3BhbS1wYXNzd29yZC1hdXRoLmpzPzA2NTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuY29uc3QgUGx1Z2luQXV0aCA9IHJlcXVpcmUoJy4vcGx1Z2luLWF1dGgnKTtcblxuLyoqXG4gKiBVc2UgUEFNIGF1dGhlbnRpY2F0aW9uXG4gKi9cbmNsYXNzIFBhbVBhc3N3b3JkQXV0aCBleHRlbmRzIFBsdWdpbkF1dGgge1xuICBjb25zdHJ1Y3RvcihwYWNrU2VxLCBjb21wcmVzc1BhY2tTZXEsIHBsdWdpbkRhdGEsIGNtZFBhcmFtLCByZWplY3QsIG11bHRpQXV0aFJlc29sdmVyKSB7XG4gICAgc3VwZXIoY21kUGFyYW0sIG11bHRpQXV0aFJlc29sdmVyLCByZWplY3QpO1xuICAgIHRoaXMucGx1Z2luRGF0YSA9IHBsdWdpbkRhdGE7XG4gICAgdGhpcy5zZXF1ZW5jZU5vID0gcGFja1NlcTtcbiAgICB0aGlzLmNvbXByZXNzU2VxdWVuY2VObyA9IGNvbXByZXNzUGFja1NlcTtcbiAgICB0aGlzLmNvdW50ZXIgPSAwO1xuICAgIHRoaXMubXVsdGlBdXRoUmVzb2x2ZXIgPSBtdWx0aUF1dGhSZXNvbHZlcjtcbiAgfVxuXG4gIHN0YXJ0KG91dCwgb3B0cywgaW5mbykge1xuICAgIHRoaXMuZXhjaGFuZ2UodGhpcy5wbHVnaW5EYXRhLCBvdXQsIG9wdHMsIGluZm8pO1xuICAgIHRoaXMub25QYWNrZXRSZWNlaXZlID0gdGhpcy5yZXNwb25zZTtcbiAgfVxuXG4gIGV4Y2hhbmdlKGJ1ZmZlciwgb3V0LCBvcHRzLCBpbmZvKSB7XG4gICAgLy9jb252ZXJzYXRpb24gaXMgOlxuICAgIC8vIC0gZmlyc3QgYnl0ZSBpcyBpbmZvcm1hdGlvbiB0ZWxsIGlmIHF1ZXN0aW9uIGlzIGEgcGFzc3dvcmQgKDQpIG9yIGNsZWFyIHRleHQgKDIpLlxuICAgIC8vIC0gb3RoZXIgYnl0ZXMgYXJlIHRoZSBxdWVzdGlvbiB0byB1c2VyXG5cbiAgICBvdXQuc3RhcnRQYWNrZXQodGhpcyk7XG5cbiAgICBsZXQgcHdkO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9wdHMucGFzc3dvcmQpKSB7XG4gICAgICBwd2QgPSBvcHRzLnBhc3N3b3JkW3RoaXMuY291bnRlcl07XG4gICAgICB0aGlzLmNvdW50ZXIrKztcbiAgICB9IGVsc2Uge1xuICAgICAgcHdkID0gb3B0cy5wYXNzd29yZDtcbiAgICB9XG5cbiAgICBpZiAocHdkKSBvdXQud3JpdGVTdHJpbmcocHdkKTtcbiAgICBvdXQud3JpdGVJbnQ4KDApO1xuICAgIG91dC5mbHVzaFBhY2tldCgpO1xuICB9XG5cbiAgcmVzcG9uc2UocGFja2V0LCBvdXQsIG9wdHMsIGluZm8pIHtcbiAgICBjb25zdCBtYXJrZXIgPSBwYWNrZXQucGVlaygpO1xuICAgIHN3aXRjaCAobWFya2VyKSB7XG4gICAgICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgLy8qIE9LX1BhY2tldCBhbmQgRXJyX1BhY2tldCBlbmRpbmcgcGFja2V0XG4gICAgICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgY2FzZSAweDAwOlxuICAgICAgY2FzZSAweGZmOlxuICAgICAgICB0aGlzLmVtaXQoJ3NlbmRfZW5kJyk7XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpQXV0aFJlc29sdmVyKHBhY2tldCwgb3V0LCBvcHRzLCBpbmZvKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGV0IHByb21wdERhdGEgPSBwYWNrZXQucmVhZEJ1ZmZlcigpO1xuICAgICAgICB0aGlzLmV4Y2hhbmdlKHByb21wdERhdGEsIG91dCwgb3B0cywgaW5mbyk7XG4gICAgICAgIHRoaXMub25QYWNrZXRSZWNlaXZlID0gdGhpcy5yZXNwb25zZTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYW1QYXNzd29yZEF1dGg7XG4iXSwibmFtZXMiOlsiUGx1Z2luQXV0aCIsInJlcXVpcmUiLCJQYW1QYXNzd29yZEF1dGgiLCJjb25zdHJ1Y3RvciIsInBhY2tTZXEiLCJjb21wcmVzc1BhY2tTZXEiLCJwbHVnaW5EYXRhIiwiY21kUGFyYW0iLCJyZWplY3QiLCJtdWx0aUF1dGhSZXNvbHZlciIsInNlcXVlbmNlTm8iLCJjb21wcmVzc1NlcXVlbmNlTm8iLCJjb3VudGVyIiwic3RhcnQiLCJvdXQiLCJvcHRzIiwiaW5mbyIsImV4Y2hhbmdlIiwib25QYWNrZXRSZWNlaXZlIiwicmVzcG9uc2UiLCJidWZmZXIiLCJzdGFydFBhY2tldCIsInB3ZCIsIkFycmF5IiwiaXNBcnJheSIsInBhc3N3b3JkIiwid3JpdGVTdHJpbmciLCJ3cml0ZUludDgiLCJmbHVzaFBhY2tldCIsInBhY2tldCIsIm1hcmtlciIsInBlZWsiLCJlbWl0IiwicHJvbXB0RGF0YSIsInJlYWRCdWZmZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/pam-password-auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/plugin-auth.js":
/*!********************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/handshake/auth/plugin-auth.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Command = __webpack_require__(/*! ../../command */ \"(rsc)/./node_modules/mariadb/lib/cmd/command.js\");\n/**\n * Base authentication plugin\n */ class PluginAuth extends Command {\n    constructor(cmdParam, multiAuthResolver, reject){\n        super(cmdParam, multiAuthResolver, reject);\n        this.onPacketReceive = multiAuthResolver;\n    }\n}\nmodule.exports = PluginAuth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2hhbmRzaGFrZS9hdXRoL3BsdWdpbi1hdXRoLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxrREFBa0Q7QUFFbEQ7QUFFQSxNQUFNQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUV4Qjs7Q0FFQyxHQUNELE1BQU1DLG1CQUFtQkY7SUFDdkJHLFlBQVlDLFFBQVEsRUFBRUMsaUJBQWlCLEVBQUVDLE1BQU0sQ0FBRTtRQUMvQyxLQUFLLENBQUNGLFVBQVVDLG1CQUFtQkM7UUFDbkMsSUFBSSxDQUFDQyxlQUFlLEdBQUdGO0lBQ3pCO0FBQ0Y7QUFFQUcsT0FBT0MsT0FBTyxHQUFHUCIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvbGliL2NtZC9oYW5kc2hha2UvYXV0aC9wbHVnaW4tYXV0aC5qcz80ZmJmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQ29tbWFuZCA9IHJlcXVpcmUoJy4uLy4uL2NvbW1hbmQnKTtcblxuLyoqXG4gKiBCYXNlIGF1dGhlbnRpY2F0aW9uIHBsdWdpblxuICovXG5jbGFzcyBQbHVnaW5BdXRoIGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZFBhcmFtLCBtdWx0aUF1dGhSZXNvbHZlciwgcmVqZWN0KSB7XG4gICAgc3VwZXIoY21kUGFyYW0sIG11bHRpQXV0aFJlc29sdmVyLCByZWplY3QpO1xuICAgIHRoaXMub25QYWNrZXRSZWNlaXZlID0gbXVsdGlBdXRoUmVzb2x2ZXI7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQbHVnaW5BdXRoO1xuIl0sIm5hbWVzIjpbIkNvbW1hbmQiLCJyZXF1aXJlIiwiUGx1Z2luQXV0aCIsImNvbnN0cnVjdG9yIiwiY21kUGFyYW0iLCJtdWx0aUF1dGhSZXNvbHZlciIsInJlamVjdCIsIm9uUGFja2V0UmVjZWl2ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/plugin-auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/sha256-password-auth.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/handshake/auth/sha256-password-auth.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst PluginAuth = __webpack_require__(/*! ./plugin-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/plugin-auth.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst Errors = __webpack_require__(/*! ../../../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst Crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Use Sha256 authentication\n */ class Sha256PasswordAuth extends PluginAuth {\n    constructor(packSeq, compressPackSeq, pluginData, cmdParam, reject, multiAuthResolver){\n        super(cmdParam, multiAuthResolver, reject);\n        this.pluginData = pluginData;\n        this.sequenceNo = packSeq;\n        this.compressSequenceNo = compressPackSeq;\n        this.counter = 0;\n        this.counter = 0;\n        this.initialState = true;\n        this.multiAuthResolver = multiAuthResolver;\n    }\n    start(out, opts, info) {\n        this.exchange(this.pluginData, out, opts, info);\n        this.onPacketReceive = this.response;\n    }\n    exchange(buffer, out, opts, info) {\n        if (this.initialState) {\n            if (!opts.password) {\n                out.startPacket(this);\n                out.writeEmptyPacket(true);\n                return;\n            } else if (opts.ssl) {\n                // using SSL, so sending password in clear\n                out.startPacket(this);\n                if (opts.password) {\n                    out.writeString(opts.password);\n                }\n                out.writeInt8(0);\n                out.flushPacket();\n                return;\n            } else {\n                // retrieve public key from configuration or from server\n                if (opts.rsaPublicKey) {\n                    try {\n                        let key = opts.rsaPublicKey;\n                        if (!key.includes(\"-----BEGIN\")) {\n                            // rsaPublicKey contain path\n                            key = fs.readFileSync(key, \"utf8\");\n                        }\n                        this.publicKey = Sha256PasswordAuth.retrievePublicKey(key);\n                    } catch (err) {\n                        return this.throwError(err, info);\n                    }\n                } else {\n                    if (!opts.allowPublicKeyRetrieval) {\n                        return this.throwError(Errors.createFatalError(\"RSA public key is not available client side. Either set option `rsaPublicKey` to indicate\" + \" public key path, or allow public key retrieval with option `allowPublicKeyRetrieval`\", Errors.ER_CANNOT_RETRIEVE_RSA_KEY, info), info);\n                    }\n                    this.initialState = false;\n                    // ask public Key Retrieval\n                    out.startPacket(this);\n                    out.writeInt8(0x01);\n                    out.flushPacket();\n                    return;\n                }\n            }\n            // send Sha256Password Packet\n            Sha256PasswordAuth.sendSha256PwdPacket(this, this.pluginData, this.publicKey, opts.password, out);\n        } else {\n            // has request public key\n            this.publicKey = Sha256PasswordAuth.retrievePublicKey(buffer.toString(\"utf8\", 1));\n            Sha256PasswordAuth.sendSha256PwdPacket(this, this.pluginData, this.publicKey, opts.password, out);\n        }\n    }\n    static retrievePublicKey(key) {\n        return key.replace(\"(-+BEGIN PUBLIC KEY-+\\\\r?\\\\n|\\\\n?-+END PUBLIC KEY-+\\\\r?\\\\n?)\", \"\");\n    }\n    static sendSha256PwdPacket(cmd, pluginData, publicKey, password, out) {\n        const truncatedSeed = pluginData.slice(0, pluginData.length - 1);\n        out.startPacket(cmd);\n        const enc = Sha256PasswordAuth.encrypt(truncatedSeed, password, publicKey);\n        out.writeBuffer(enc, 0, enc.length);\n        out.flushPacket();\n    }\n    static encryptSha256Password(password, seed) {\n        if (!password) return Buffer.alloc(0);\n        let hash = Crypto.createHash(\"sha256\");\n        let stage1 = hash.update(password, \"utf8\").digest();\n        hash = Crypto.createHash(\"sha256\");\n        let stage2 = hash.update(stage1).digest();\n        hash = Crypto.createHash(\"sha256\");\n        // order is different than sha 1 !!!!!\n        hash.update(stage2);\n        hash.update(seed);\n        let digest = hash.digest();\n        let returnBytes = Buffer.allocUnsafe(digest.length);\n        for(let i = 0; i < digest.length; i++){\n            returnBytes[i] = stage1[i] ^ digest[i];\n        }\n        return returnBytes;\n    }\n    // encrypt password with public key\n    static encrypt(seed, password, publicKey) {\n        const nullFinishedPwd = Buffer.from(password + \"\\x00\");\n        const xorBytes = Buffer.allocUnsafe(nullFinishedPwd.length);\n        const seedLength = seed.length;\n        for(let i = 0; i < xorBytes.length; i++){\n            xorBytes[i] = nullFinishedPwd[i] ^ seed[i % seedLength];\n        }\n        return crypto.publicEncrypt({\n            key: publicKey,\n            padding: crypto.constants.RSA_PKCS1_OAEP_PADDING\n        }, xorBytes);\n    }\n    response(packet, out, opts, info) {\n        const marker = packet.peek();\n        switch(marker){\n            //*********************************************************************************************************\n            //* OK_Packet and Err_Packet ending packet\n            //*********************************************************************************************************\n            case 0x00:\n            case 0xff:\n                this.emit(\"send_end\");\n                return this.multiAuthResolver(packet, out, opts, info);\n            default:\n                let promptData = packet.readBufferRemaining();\n                this.exchange(promptData, out, opts, info);\n                this.onPacketReceive = this.response;\n        }\n    }\n}\nmodule.exports = Sha256PasswordAuth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/sha256-password-auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/handshake/authentication.js":
/*!******************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/handshake/authentication.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Command = __webpack_require__(/*! ../command */ \"(rsc)/./node_modules/mariadb/lib/cmd/command.js\");\nconst Errors = __webpack_require__(/*! ../../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst Capabilities = __webpack_require__(/*! ../../const/capabilities */ \"(rsc)/./node_modules/mariadb/lib/const/capabilities.js\");\nconst Handshake = __webpack_require__(/*! ./auth/handshake */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/handshake.js\");\nconst ServerStatus = __webpack_require__(/*! ../../const/server-status */ \"(rsc)/./node_modules/mariadb/lib/const/server-status.js\");\nconst StateChange = __webpack_require__(/*! ../../const/state-change */ \"(rsc)/./node_modules/mariadb/lib/const/state-change.js\");\nconst Collations = __webpack_require__(/*! ../../const/collations */ \"(rsc)/./node_modules/mariadb/lib/const/collations.js\");\nconst authenticationPlugins = {\n    mysql_native_password: __webpack_require__(/*! ./auth/native-password-auth.js */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/native-password-auth.js\"),\n    mysql_clear_password: __webpack_require__(/*! ./auth/clear-password-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/clear-password-auth.js\"),\n    client_ed25519: __webpack_require__(/*! ./auth/ed25519-password-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/ed25519-password-auth.js\"),\n    dialog: __webpack_require__(/*! ./auth/pam-password-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/pam-password-auth.js\"),\n    sha256_password: __webpack_require__(/*! ./auth/sha256-password-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/sha256-password-auth.js\"),\n    caching_sha2_password: __webpack_require__(/*! ./auth/caching-sha2-password-auth */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/auth/caching-sha2-password-auth.js\")\n};\n/**\n * Handle handshake.\n * see https://mariadb.com/kb/en/library/1-connecting-connecting/\n */ class Authentication extends Command {\n    constructor(cmdParam, resolve, reject, _createSecureContext, getSocket){\n        super(cmdParam, resolve, reject);\n        this.cmdParam = cmdParam;\n        this._createSecureContext = _createSecureContext;\n        this.getSocket = getSocket;\n        this.plugin = new Handshake(this, getSocket, this.handshakeResult, reject);\n    }\n    onPacketReceive(packet, out, opts, info) {\n        this.plugin.sequenceNo = this.sequenceNo;\n        this.plugin.compressSequenceNo = this.compressSequenceNo;\n        this.plugin.onPacketReceive(packet, out, opts, info);\n    }\n    /**\n   * Fast-path handshake results :\n   *  - if plugin was the one expected by server, server will send OK_Packet / ERR_Packet.\n   *  - if not, server send an AuthSwitchRequest packet, indicating the specific PLUGIN to use with this user.\n   *    dispatching to plugin handler then.\n   *\n   * @param packet    current packet\n   * @param out       output buffer\n   * @param opts      options\n   * @param info      connection info\n   * @returns {*}     return null if authentication succeed, depending on plugin conversation if not finished\n   */ handshakeResult(packet, out, opts, info) {\n        const marker = packet.peek();\n        switch(marker){\n            //*********************************************************************************************************\n            //* AuthSwitchRequest packet\n            //*********************************************************************************************************\n            case 0xfe:\n                this.dispatchAuthSwitchRequest(packet, out, opts, info);\n                return;\n            //*********************************************************************************************************\n            //* OK_Packet - authentication succeeded\n            //*********************************************************************************************************\n            case 0x00:\n                this.plugin.onPacketReceive = null;\n                packet.skip(1); //skip header\n                packet.skipLengthCodedNumber(); //skip affected rows\n                packet.skipLengthCodedNumber(); //skip last insert id\n                info.status = packet.readUInt16();\n                if (info.status & ServerStatus.SESSION_STATE_CHANGED) {\n                    packet.skip(2); //skip warning count\n                    packet.skipLengthCodedNumber();\n                    while(packet.remaining()){\n                        const len = packet.readUnsignedLength();\n                        if (len > 0) {\n                            const subPacket = packet.subPacketLengthEncoded(len);\n                            while(subPacket.remaining()){\n                                const type = subPacket.readUInt8();\n                                switch(type){\n                                    case StateChange.SESSION_TRACK_SYSTEM_VARIABLES:\n                                        let subSubPacket;\n                                        do {\n                                            subSubPacket = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                                            const variable = subSubPacket.readStringLengthEncoded();\n                                            const value = subSubPacket.readStringLengthEncoded();\n                                            switch(variable){\n                                                case \"character_set_client\":\n                                                    info.collation = Collations.fromCharset(value);\n                                                    if (info.collation === undefined) {\n                                                        this.throwError(new Error(\"unknown charset : '\" + value + \"'\"), info);\n                                                        return;\n                                                    }\n                                                    opts.emit(\"collation\", info.collation);\n                                                    break;\n                                                case \"connection_id\":\n                                                    info.threadId = parseInt(value);\n                                                    break;\n                                                default:\n                                            }\n                                        }while (subSubPacket.remaining() > 0);\n                                        break;\n                                    case StateChange.SESSION_TRACK_SCHEMA:\n                                        const subSubPacket2 = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                                        info.database = subSubPacket2.readStringLengthEncoded();\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                }\n                return this.successEnd();\n            //*********************************************************************************************************\n            //* ERR_Packet\n            //*********************************************************************************************************\n            case 0xff:\n                this.plugin.onPacketReceive = null;\n                const authErr = packet.readError(info, this.displaySql());\n                authErr.fatal = true;\n                return this.plugin.throwError(authErr, info);\n            //*********************************************************************************************************\n            //* unexpected\n            //*********************************************************************************************************\n            default:\n                this.throwNewError(`Unexpected type of packet during handshake phase : ${marker}`, true, info, \"42000\", Errors.ER_AUTHENTICATION_BAD_PACKET);\n        }\n    }\n    /**\n   * Handle authentication switch request : dispatch to plugin handler.\n   *\n   * @param packet  packet\n   * @param out     output writer\n   * @param opts    options\n   * @param info    connection information\n   */ dispatchAuthSwitchRequest(packet, out, opts, info) {\n        let pluginName, pluginData;\n        if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n            packet.skip(1); //header\n            if (packet.remaining()) {\n                //AuthSwitchRequest packet.\n                pluginName = packet.readStringNullEnded();\n                pluginData = packet.readBufferRemaining();\n            } else {\n                //OldAuthSwitchRequest\n                pluginName = \"mysql_old_password\";\n                pluginData = info.seed.slice(0, 8);\n            }\n        } else {\n            pluginName = packet.readStringNullEnded(\"ascii\");\n            pluginData = packet.readBufferRemaining();\n        }\n        if (opts.restrictedAuth && !opts.restrictedAuth.includes(pluginName)) {\n            this.throwNewError(`Unsupported authentication plugin ${pluginName}. Authorized plugin: ${opts.restrictedAuth.toString()}`, true, info, \"42000\", Errors.ER_NOT_SUPPORTED_AUTH_PLUGIN);\n            return;\n        }\n        try {\n            this.plugin.emit(\"end\");\n            this.plugin.onPacketReceive = null;\n            this.plugin = Authentication.pluginHandler(pluginName, this.plugin.sequenceNo, this.plugin.compressSequenceNo, pluginData, info, opts, out, this.cmdParam, this.reject, this.handshakeResult.bind(this));\n            this.plugin.start(out, opts, info);\n        } catch (err) {\n            this.reject(err);\n            return;\n        }\n    }\n    static pluginHandler(pluginName, packSeq, compressPackSeq, pluginData, info, opts, out, cmdParam, authReject, multiAuthResolver) {\n        let pluginAuth = authenticationPlugins[pluginName];\n        if (!pluginAuth) {\n            throw Errors.createFatalError(`Client does not support authentication protocol '${pluginName}' requested by server.`, Errors.ER_AUTHENTICATION_PLUGIN_NOT_SUPPORTED, info, \"08004\");\n        }\n        return new pluginAuth(packSeq, compressPackSeq, pluginData, cmdParam, authReject, multiAuthResolver);\n    }\n}\nmodule.exports = Authentication;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/handshake/authentication.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/handshake/client-capabilities.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/handshake/client-capabilities.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n// noinspection JSBitwiseOperatorUsage\n\nconst Capabilities = __webpack_require__(/*! ../../const/capabilities */ \"(rsc)/./node_modules/mariadb/lib/const/capabilities.js\");\n/**\n * Initialize client capabilities according to options and server capabilities\n *\n * @param opts                options\n * @param info                information\n */ module.exports.init = function(opts, info) {\n    let capabilities = Capabilities.IGNORE_SPACE | Capabilities.PROTOCOL_41 | Capabilities.TRANSACTIONS | Capabilities.SECURE_CONNECTION | Capabilities.MULTI_RESULTS | Capabilities.PS_MULTI_RESULTS | Capabilities.SESSION_TRACK | Capabilities.CONNECT_ATTRS | Capabilities.PLUGIN_AUTH_LENENC_CLIENT_DATA | Capabilities.MARIADB_CLIENT_EXTENDED_TYPE_INFO | Capabilities.PLUGIN_AUTH;\n    if (opts.foundRows) {\n        capabilities |= Capabilities.FOUND_ROWS;\n    }\n    if (opts.permitLocalInfile) {\n        capabilities |= Capabilities.LOCAL_FILES;\n    }\n    if (opts.multipleStatements) {\n        capabilities |= Capabilities.MULTI_STATEMENTS;\n    }\n    info.eofDeprecated = !opts.keepEof && (info.serverCapabilities & Capabilities.DEPRECATE_EOF) > 0;\n    if (info.eofDeprecated) {\n        capabilities |= Capabilities.DEPRECATE_EOF;\n    }\n    if (opts.database && info.serverCapabilities & Capabilities.CONNECT_WITH_DB) {\n        capabilities |= Capabilities.CONNECT_WITH_DB;\n    }\n    info.serverPermitSkipMeta = (info.serverCapabilities & Capabilities.MARIADB_CLIENT_CACHE_METADATA) > 0;\n    if (info.serverPermitSkipMeta) {\n        capabilities |= Capabilities.MARIADB_CLIENT_CACHE_METADATA;\n    }\n    // use compression only if requested by client and supported by server\n    if (opts.compress) {\n        if (info.serverCapabilities & Capabilities.COMPRESS) {\n            capabilities |= Capabilities.COMPRESS;\n        } else {\n            opts.compress = false;\n        }\n    }\n    if (opts.bulk && info.serverCapabilities & Capabilities.MARIADB_CLIENT_STMT_BULK_OPERATIONS) {\n        capabilities |= Capabilities.MARIADB_CLIENT_STMT_BULK_OPERATIONS;\n    }\n    if (opts.permitConnectionWhenExpired) {\n        capabilities |= Capabilities.CAN_HANDLE_EXPIRED_PASSWORDS;\n    }\n    info.clientCapabilities = capabilities & info.serverCapabilities;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2hhbmRzaGFrZS9jbGllbnQtY2FwYWJpbGl0aWVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxrREFBa0Q7QUFFbEQsc0NBQXNDO0FBRXRDO0FBRUEsTUFBTUEsZUFBZUMsbUJBQU9BLENBQUM7QUFFN0I7Ozs7O0NBS0MsR0FDREMsbUJBQW1CLEdBQUcsU0FBVUcsSUFBSSxFQUFFQyxJQUFJO0lBQ3hDLElBQUlDLGVBQ0ZQLGFBQWFRLFlBQVksR0FDekJSLGFBQWFTLFdBQVcsR0FDeEJULGFBQWFVLFlBQVksR0FDekJWLGFBQWFXLGlCQUFpQixHQUM5QlgsYUFBYVksYUFBYSxHQUMxQlosYUFBYWEsZ0JBQWdCLEdBQzdCYixhQUFhYyxhQUFhLEdBQzFCZCxhQUFhZSxhQUFhLEdBQzFCZixhQUFhZ0IsOEJBQThCLEdBQzNDaEIsYUFBYWlCLGlDQUFpQyxHQUM5Q2pCLGFBQWFrQixXQUFXO0lBRTFCLElBQUliLEtBQUtjLFNBQVMsRUFBRTtRQUNsQlosZ0JBQWdCUCxhQUFhb0IsVUFBVTtJQUN6QztJQUVBLElBQUlmLEtBQUtnQixpQkFBaUIsRUFBRTtRQUMxQmQsZ0JBQWdCUCxhQUFhc0IsV0FBVztJQUMxQztJQUVBLElBQUlqQixLQUFLa0Isa0JBQWtCLEVBQUU7UUFDM0JoQixnQkFBZ0JQLGFBQWF3QixnQkFBZ0I7SUFDL0M7SUFFQWxCLEtBQUttQixhQUFhLEdBQUcsQ0FBQ3BCLEtBQUtxQixPQUFPLElBQUksQ0FBQ3BCLEtBQUtxQixrQkFBa0IsR0FBRzNCLGFBQWE0QixhQUFhLElBQUk7SUFDL0YsSUFBSXRCLEtBQUttQixhQUFhLEVBQUU7UUFDdEJsQixnQkFBZ0JQLGFBQWE0QixhQUFhO0lBQzVDO0lBRUEsSUFBSXZCLEtBQUt3QixRQUFRLElBQUl2QixLQUFLcUIsa0JBQWtCLEdBQUczQixhQUFhOEIsZUFBZSxFQUFFO1FBQzNFdkIsZ0JBQWdCUCxhQUFhOEIsZUFBZTtJQUM5QztJQUVBeEIsS0FBS3lCLG9CQUFvQixHQUFHLENBQUN6QixLQUFLcUIsa0JBQWtCLEdBQUczQixhQUFhZ0MsNkJBQTZCLElBQUk7SUFDckcsSUFBSTFCLEtBQUt5QixvQkFBb0IsRUFBRTtRQUM3QnhCLGdCQUFnQlAsYUFBYWdDLDZCQUE2QjtJQUM1RDtJQUVBLHNFQUFzRTtJQUN0RSxJQUFJM0IsS0FBSzRCLFFBQVEsRUFBRTtRQUNqQixJQUFJM0IsS0FBS3FCLGtCQUFrQixHQUFHM0IsYUFBYWtDLFFBQVEsRUFBRTtZQUNuRDNCLGdCQUFnQlAsYUFBYWtDLFFBQVE7UUFDdkMsT0FBTztZQUNMN0IsS0FBSzRCLFFBQVEsR0FBRztRQUNsQjtJQUNGO0lBRUEsSUFBSTVCLEtBQUs4QixJQUFJLElBQUk3QixLQUFLcUIsa0JBQWtCLEdBQUczQixhQUFhb0MsbUNBQW1DLEVBQUU7UUFDM0Y3QixnQkFBZ0JQLGFBQWFvQyxtQ0FBbUM7SUFDbEU7SUFFQSxJQUFJL0IsS0FBS2dDLDJCQUEyQixFQUFFO1FBQ3BDOUIsZ0JBQWdCUCxhQUFhc0MsNEJBQTRCO0lBQzNEO0lBRUFoQyxLQUFLaUMsa0JBQWtCLEdBQUdoQyxlQUFlRCxLQUFLcUIsa0JBQWtCO0FBQ2xFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGZuZXh0anMvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2hhbmRzaGFrZS9jbGllbnQtY2FwYWJpbGl0aWVzLmpzPzc1YWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuLy8gbm9pbnNwZWN0aW9uIEpTQml0d2lzZU9wZXJhdG9yVXNhZ2VcblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDYXBhYmlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi9jb25zdC9jYXBhYmlsaXRpZXMnKTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGNsaWVudCBjYXBhYmlsaXRpZXMgYWNjb3JkaW5nIHRvIG9wdGlvbnMgYW5kIHNlcnZlciBjYXBhYmlsaXRpZXNcbiAqXG4gKiBAcGFyYW0gb3B0cyAgICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcGFyYW0gaW5mbyAgICAgICAgICAgICAgICBpbmZvcm1hdGlvblxuICovXG5tb2R1bGUuZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24gKG9wdHMsIGluZm8pIHtcbiAgbGV0IGNhcGFiaWxpdGllcyA9XG4gICAgQ2FwYWJpbGl0aWVzLklHTk9SRV9TUEFDRSB8XG4gICAgQ2FwYWJpbGl0aWVzLlBST1RPQ09MXzQxIHxcbiAgICBDYXBhYmlsaXRpZXMuVFJBTlNBQ1RJT05TIHxcbiAgICBDYXBhYmlsaXRpZXMuU0VDVVJFX0NPTk5FQ1RJT04gfFxuICAgIENhcGFiaWxpdGllcy5NVUxUSV9SRVNVTFRTIHxcbiAgICBDYXBhYmlsaXRpZXMuUFNfTVVMVElfUkVTVUxUUyB8XG4gICAgQ2FwYWJpbGl0aWVzLlNFU1NJT05fVFJBQ0sgfFxuICAgIENhcGFiaWxpdGllcy5DT05ORUNUX0FUVFJTIHxcbiAgICBDYXBhYmlsaXRpZXMuUExVR0lOX0FVVEhfTEVORU5DX0NMSUVOVF9EQVRBIHxcbiAgICBDYXBhYmlsaXRpZXMuTUFSSUFEQl9DTElFTlRfRVhURU5ERURfVFlQRV9JTkZPIHxcbiAgICBDYXBhYmlsaXRpZXMuUExVR0lOX0FVVEg7XG5cbiAgaWYgKG9wdHMuZm91bmRSb3dzKSB7XG4gICAgY2FwYWJpbGl0aWVzIHw9IENhcGFiaWxpdGllcy5GT1VORF9ST1dTO1xuICB9XG5cbiAgaWYgKG9wdHMucGVybWl0TG9jYWxJbmZpbGUpIHtcbiAgICBjYXBhYmlsaXRpZXMgfD0gQ2FwYWJpbGl0aWVzLkxPQ0FMX0ZJTEVTO1xuICB9XG5cbiAgaWYgKG9wdHMubXVsdGlwbGVTdGF0ZW1lbnRzKSB7XG4gICAgY2FwYWJpbGl0aWVzIHw9IENhcGFiaWxpdGllcy5NVUxUSV9TVEFURU1FTlRTO1xuICB9XG5cbiAgaW5mby5lb2ZEZXByZWNhdGVkID0gIW9wdHMua2VlcEVvZiAmJiAoaW5mby5zZXJ2ZXJDYXBhYmlsaXRpZXMgJiBDYXBhYmlsaXRpZXMuREVQUkVDQVRFX0VPRikgPiAwO1xuICBpZiAoaW5mby5lb2ZEZXByZWNhdGVkKSB7XG4gICAgY2FwYWJpbGl0aWVzIHw9IENhcGFiaWxpdGllcy5ERVBSRUNBVEVfRU9GO1xuICB9XG5cbiAgaWYgKG9wdHMuZGF0YWJhc2UgJiYgaW5mby5zZXJ2ZXJDYXBhYmlsaXRpZXMgJiBDYXBhYmlsaXRpZXMuQ09OTkVDVF9XSVRIX0RCKSB7XG4gICAgY2FwYWJpbGl0aWVzIHw9IENhcGFiaWxpdGllcy5DT05ORUNUX1dJVEhfREI7XG4gIH1cblxuICBpbmZvLnNlcnZlclBlcm1pdFNraXBNZXRhID0gKGluZm8uc2VydmVyQ2FwYWJpbGl0aWVzICYgQ2FwYWJpbGl0aWVzLk1BUklBREJfQ0xJRU5UX0NBQ0hFX01FVEFEQVRBKSA+IDA7XG4gIGlmIChpbmZvLnNlcnZlclBlcm1pdFNraXBNZXRhKSB7XG4gICAgY2FwYWJpbGl0aWVzIHw9IENhcGFiaWxpdGllcy5NQVJJQURCX0NMSUVOVF9DQUNIRV9NRVRBREFUQTtcbiAgfVxuXG4gIC8vIHVzZSBjb21wcmVzc2lvbiBvbmx5IGlmIHJlcXVlc3RlZCBieSBjbGllbnQgYW5kIHN1cHBvcnRlZCBieSBzZXJ2ZXJcbiAgaWYgKG9wdHMuY29tcHJlc3MpIHtcbiAgICBpZiAoaW5mby5zZXJ2ZXJDYXBhYmlsaXRpZXMgJiBDYXBhYmlsaXRpZXMuQ09NUFJFU1MpIHtcbiAgICAgIGNhcGFiaWxpdGllcyB8PSBDYXBhYmlsaXRpZXMuQ09NUFJFU1M7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdHMuY29tcHJlc3MgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0cy5idWxrICYmIGluZm8uc2VydmVyQ2FwYWJpbGl0aWVzICYgQ2FwYWJpbGl0aWVzLk1BUklBREJfQ0xJRU5UX1NUTVRfQlVMS19PUEVSQVRJT05TKSB7XG4gICAgY2FwYWJpbGl0aWVzIHw9IENhcGFiaWxpdGllcy5NQVJJQURCX0NMSUVOVF9TVE1UX0JVTEtfT1BFUkFUSU9OUztcbiAgfVxuXG4gIGlmIChvcHRzLnBlcm1pdENvbm5lY3Rpb25XaGVuRXhwaXJlZCkge1xuICAgIGNhcGFiaWxpdGllcyB8PSBDYXBhYmlsaXRpZXMuQ0FOX0hBTkRMRV9FWFBJUkVEX1BBU1NXT1JEUztcbiAgfVxuXG4gIGluZm8uY2xpZW50Q2FwYWJpbGl0aWVzID0gY2FwYWJpbGl0aWVzICYgaW5mby5zZXJ2ZXJDYXBhYmlsaXRpZXM7XG59O1xuIl0sIm5hbWVzIjpbIkNhcGFiaWxpdGllcyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5pdCIsIm9wdHMiLCJpbmZvIiwiY2FwYWJpbGl0aWVzIiwiSUdOT1JFX1NQQUNFIiwiUFJPVE9DT0xfNDEiLCJUUkFOU0FDVElPTlMiLCJTRUNVUkVfQ09OTkVDVElPTiIsIk1VTFRJX1JFU1VMVFMiLCJQU19NVUxUSV9SRVNVTFRTIiwiU0VTU0lPTl9UUkFDSyIsIkNPTk5FQ1RfQVRUUlMiLCJQTFVHSU5fQVVUSF9MRU5FTkNfQ0xJRU5UX0RBVEEiLCJNQVJJQURCX0NMSUVOVF9FWFRFTkRFRF9UWVBFX0lORk8iLCJQTFVHSU5fQVVUSCIsImZvdW5kUm93cyIsIkZPVU5EX1JPV1MiLCJwZXJtaXRMb2NhbEluZmlsZSIsIkxPQ0FMX0ZJTEVTIiwibXVsdGlwbGVTdGF0ZW1lbnRzIiwiTVVMVElfU1RBVEVNRU5UUyIsImVvZkRlcHJlY2F0ZWQiLCJrZWVwRW9mIiwic2VydmVyQ2FwYWJpbGl0aWVzIiwiREVQUkVDQVRFX0VPRiIsImRhdGFiYXNlIiwiQ09OTkVDVF9XSVRIX0RCIiwic2VydmVyUGVybWl0U2tpcE1ldGEiLCJNQVJJQURCX0NMSUVOVF9DQUNIRV9NRVRBREFUQSIsImNvbXByZXNzIiwiQ09NUFJFU1MiLCJidWxrIiwiTUFSSUFEQl9DTElFTlRfU1RNVF9CVUxLX09QRVJBVElPTlMiLCJwZXJtaXRDb25uZWN0aW9uV2hlbkV4cGlyZWQiLCJDQU5fSEFORExFX0VYUElSRURfUEFTU1dPUkRTIiwiY2xpZW50Q2FwYWJpbGl0aWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/handshake/client-capabilities.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/handshake/ssl-request.js":
/*!***************************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/handshake/ssl-request.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Capabilities = __webpack_require__(/*! ../../const/capabilities */ \"(rsc)/./node_modules/mariadb/lib/const/capabilities.js\");\n/**\n * Send SSL Request packet.\n * see : https://mariadb.com/kb/en/library/1-connecting-connecting/#sslrequest-packet\n *\n * @param cmd     current command\n * @param out     output writer\n * @param info    client information\n * @param opts    connection options\n */ module.exports.send = function sendSSLRequest(cmd, out, info, opts) {\n    out.startPacket(cmd);\n    out.writeInt32(Number(info.clientCapabilities & BigInt(0xffffffff)));\n    out.writeInt32(1024 * 1024 * 1024); // max packet size\n    out.writeInt8(opts.collation ? opts.collation.index : info.collation.index);\n    for(let i = 0; i < 19; i++){\n        out.writeInt8(0);\n    }\n    if (info.serverCapabilities & Capabilities.MYSQL) {\n        out.writeInt32(0);\n    } else {\n        out.writeInt32(Number(info.clientCapabilities >> 32n));\n    }\n    out.flushPacket();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL2hhbmRzaGFrZS9zc2wtcmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEO0FBQ0EsTUFBTUEsZUFBZUMsbUJBQU9BLENBQUM7QUFFN0I7Ozs7Ozs7O0NBUUMsR0FDREMsbUJBQW1CLEdBQUcsU0FBU0csZUFBZUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsSUFBSTtJQUNoRUYsSUFBSUcsV0FBVyxDQUFDSjtJQUNoQkMsSUFBSUksVUFBVSxDQUFDQyxPQUFPSixLQUFLSyxrQkFBa0IsR0FBR0MsT0FBTztJQUN2RFAsSUFBSUksVUFBVSxDQUFDLE9BQU8sT0FBTyxPQUFPLGtCQUFrQjtJQUN0REosSUFBSVEsU0FBUyxDQUFDTixLQUFLTyxTQUFTLEdBQUdQLEtBQUtPLFNBQVMsQ0FBQ0MsS0FBSyxHQUFHVCxLQUFLUSxTQUFTLENBQUNDLEtBQUs7SUFDMUUsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUksSUFBSUEsSUFBSztRQUMzQlgsSUFBSVEsU0FBUyxDQUFDO0lBQ2hCO0lBRUEsSUFBSVAsS0FBS1csa0JBQWtCLEdBQUduQixhQUFhb0IsS0FBSyxFQUFFO1FBQ2hEYixJQUFJSSxVQUFVLENBQUM7SUFDakIsT0FBTztRQUNMSixJQUFJSSxVQUFVLENBQUNDLE9BQU9KLEtBQUtLLGtCQUFrQixJQUFJLEdBQUc7SUFDdEQ7SUFFQU4sSUFBSWMsV0FBVztBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvbGliL2NtZC9oYW5kc2hha2Uvc3NsLXJlcXVlc3QuanM/MDc1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAgU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IExHUEwtMi4xLW9yLWxhdGVyXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE1LTIwMjMgTWFyaWFEQiBDb3Jwb3JhdGlvbiBBYlxuXG4ndXNlIHN0cmljdCc7XG5jb25zdCBDYXBhYmlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi9jb25zdC9jYXBhYmlsaXRpZXMnKTtcblxuLyoqXG4gKiBTZW5kIFNTTCBSZXF1ZXN0IHBhY2tldC5cbiAqIHNlZSA6IGh0dHBzOi8vbWFyaWFkYi5jb20va2IvZW4vbGlicmFyeS8xLWNvbm5lY3RpbmctY29ubmVjdGluZy8jc3NscmVxdWVzdC1wYWNrZXRcbiAqXG4gKiBAcGFyYW0gY21kICAgICBjdXJyZW50IGNvbW1hbmRcbiAqIEBwYXJhbSBvdXQgICAgIG91dHB1dCB3cml0ZXJcbiAqIEBwYXJhbSBpbmZvICAgIGNsaWVudCBpbmZvcm1hdGlvblxuICogQHBhcmFtIG9wdHMgICAgY29ubmVjdGlvbiBvcHRpb25zXG4gKi9cbm1vZHVsZS5leHBvcnRzLnNlbmQgPSBmdW5jdGlvbiBzZW5kU1NMUmVxdWVzdChjbWQsIG91dCwgaW5mbywgb3B0cykge1xuICBvdXQuc3RhcnRQYWNrZXQoY21kKTtcbiAgb3V0LndyaXRlSW50MzIoTnVtYmVyKGluZm8uY2xpZW50Q2FwYWJpbGl0aWVzICYgQmlnSW50KDB4ZmZmZmZmZmYpKSk7XG4gIG91dC53cml0ZUludDMyKDEwMjQgKiAxMDI0ICogMTAyNCk7IC8vIG1heCBwYWNrZXQgc2l6ZVxuICBvdXQud3JpdGVJbnQ4KG9wdHMuY29sbGF0aW9uID8gb3B0cy5jb2xsYXRpb24uaW5kZXggOiBpbmZvLmNvbGxhdGlvbi5pbmRleCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTk7IGkrKykge1xuICAgIG91dC53cml0ZUludDgoMCk7XG4gIH1cblxuICBpZiAoaW5mby5zZXJ2ZXJDYXBhYmlsaXRpZXMgJiBDYXBhYmlsaXRpZXMuTVlTUUwpIHtcbiAgICBvdXQud3JpdGVJbnQzMigwKTtcbiAgfSBlbHNlIHtcbiAgICBvdXQud3JpdGVJbnQzMihOdW1iZXIoaW5mby5jbGllbnRDYXBhYmlsaXRpZXMgPj4gMzJuKSk7XG4gIH1cblxuICBvdXQuZmx1c2hQYWNrZXQoKTtcbn07XG4iXSwibmFtZXMiOlsiQ2FwYWJpbGl0aWVzIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZW5kIiwic2VuZFNTTFJlcXVlc3QiLCJjbWQiLCJvdXQiLCJpbmZvIiwib3B0cyIsInN0YXJ0UGFja2V0Iiwid3JpdGVJbnQzMiIsIk51bWJlciIsImNsaWVudENhcGFiaWxpdGllcyIsIkJpZ0ludCIsIndyaXRlSW50OCIsImNvbGxhdGlvbiIsImluZGV4IiwiaSIsInNlcnZlckNhcGFiaWxpdGllcyIsIk1ZU1FMIiwiZmx1c2hQYWNrZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/handshake/ssl-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/parser.js":
/*!************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/parser.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Command = __webpack_require__(/*! ./command */ \"(rsc)/./node_modules/mariadb/lib/cmd/command.js\");\nconst ServerStatus = __webpack_require__(/*! ../const/server-status */ \"(rsc)/./node_modules/mariadb/lib/const/server-status.js\");\nconst ColumnDefinition = __webpack_require__(/*! ./column-definition */ \"(rsc)/./node_modules/mariadb/lib/cmd/column-definition.js\");\nconst Errors = __webpack_require__(/*! ../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst Parse = __webpack_require__(/*! ../misc/parse */ \"(rsc)/./node_modules/mariadb/lib/misc/parse.js\");\nconst BinaryDecoder = __webpack_require__(/*! ./decoder/binary-decoder */ \"(rsc)/./node_modules/mariadb/lib/cmd/decoder/binary-decoder.js\");\nconst TextDecoder = __webpack_require__(/*! ./decoder/text-decoder */ \"(rsc)/./node_modules/mariadb/lib/cmd/decoder/text-decoder.js\");\nconst OkPacket = __webpack_require__(/*! ./class/ok-packet */ \"(rsc)/./node_modules/mariadb/lib/cmd/class/ok-packet.js\");\nconst StateChange = __webpack_require__(/*! ../const/state-change */ \"(rsc)/./node_modules/mariadb/lib/const/state-change.js\");\nconst Collations = __webpack_require__(/*! ../const/collations */ \"(rsc)/./node_modules/mariadb/lib/const/collations.js\");\n/**\n * handle COM_QUERY / COM_STMT_EXECUTE results\n * see : https://mariadb.com/kb/en/library/4-server-response-packets/\n */ class Parser extends Command {\n    constructor(resolve, reject, connOpts, cmdParam){\n        super(cmdParam, resolve, reject);\n        this._responseIndex = 0;\n        this._rows = [];\n        this.opts = cmdParam.opts ? Object.assign({}, connOpts, cmdParam.opts) : connOpts;\n        this.sql = cmdParam.sql;\n        this.initialValues = cmdParam.values;\n        this.canSkipMeta = false;\n    }\n    /**\n   * Read Query response packet.\n   * packet can be :\n   * - a result-set\n   * - an ERR_Packet\n   * - a OK_Packet\n   * - LOCAL_INFILE Packet\n   *\n   * @param packet  query response\n   * @param out     output writer\n   * @param opts    connection options\n   * @param info    connection info\n   */ readResponsePacket(packet, out, opts, info) {\n        switch(packet.peek()){\n            //*********************************************************************************************************\n            //* OK response\n            //*********************************************************************************************************\n            case 0x00:\n                return this.readOKPacket(packet, out, opts, info);\n            //*********************************************************************************************************\n            //* ERROR response\n            //*********************************************************************************************************\n            case 0xff:\n                const err = packet.readError(info, this.displaySql(), this.stack);\n                //force in transaction status, since query will have created a transaction if autocommit is off\n                //goal is to avoid unnecessary COMMIT/ROLLBACK.\n                info.status |= ServerStatus.STATUS_IN_TRANS;\n                return this.throwError(err, info);\n            //*********************************************************************************************************\n            //* LOCAL INFILE response\n            //*********************************************************************************************************\n            case 0xfb:\n                return this.readLocalInfile(packet, out, opts, info);\n            //*********************************************************************************************************\n            //* Parser\n            //*********************************************************************************************************\n            default:\n                return this.readResultSet(packet, info);\n        }\n    }\n    /**\n   * Read result-set packets :\n   * see https://mariadb.com/kb/en/library/resultset/\n   *\n   * @param packet    Column count packet\n   * @param info      current connection information\n   * @returns {Parser.readColumn} next packet handler\n   */ readResultSet(packet, info) {\n        this._columnCount = packet.readUnsignedLength();\n        this._rows.push([]);\n        if (this.canSkipMeta && info.serverPermitSkipMeta && packet.readUInt8() === 0) {\n            // command support skipping meta\n            // server permits it\n            // and tells that no columns follows, using prepare results\n            this._columns = this.prepare.columns;\n            this.emit(\"fields\", this._columns);\n            this.setParser();\n            return this.onPacketReceive = info.eofDeprecated ? this.readResultSetRow : this.readIntermediateEOF;\n        }\n        this._columns = [];\n        this.onPacketReceive = this.readColumn;\n    }\n    /**\n   * Read OK_Packet.\n   * see https://mariadb.com/kb/en/library/ok_packet/\n   *\n   * @param packet    OK_Packet\n   * @param opts      connection options\n   * @param info      connection information\n   * @param out       output writer\n   * @returns {*}     null or {Result.readResponsePacket} in case of multi-result-set\n   */ readOKPacket(packet, out, opts, info) {\n        packet.skip(1); //skip header\n        const affectedRows = packet.readUnsignedLength();\n        let insertId = packet.readSignedLengthBigInt();\n        info.status = packet.readUInt16();\n        if (insertId != null && (this.opts.supportBigNumbers || this.opts.insertIdAsNumber)) {\n            if (this.opts.insertIdAsNumber && this.opts.checkNumberRange && !Number.isSafeInteger(Number(insertId))) {\n                this.onPacketReceive = info.status & ServerStatus.MORE_RESULTS_EXISTS ? this.readResponsePacket : null;\n                this.throwUnexpectedError(`last insert id value ${insertId} can't safely be converted to number`, false, info, \"42000\", Errors.ER_PARSING_PRECISION);\n                return;\n            }\n            if (this.opts.supportBigNumbers && (this.opts.bigNumberStrings || !Number.isSafeInteger(Number(insertId)))) {\n                insertId = insertId.toString();\n            } else insertId = Number(insertId);\n        }\n        const okPacket = new OkPacket(affectedRows, insertId, packet.readUInt16());\n        if (info.status & ServerStatus.SESSION_STATE_CHANGED) {\n            packet.skipLengthCodedNumber();\n            while(packet.remaining()){\n                const len = packet.readUnsignedLength();\n                if (len > 0) {\n                    const subPacket = packet.subPacketLengthEncoded(len);\n                    while(subPacket.remaining()){\n                        const type = subPacket.readUInt8();\n                        switch(type){\n                            case StateChange.SESSION_TRACK_SYSTEM_VARIABLES:\n                                let subSubPacket;\n                                do {\n                                    subSubPacket = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                                    const variable = subSubPacket.readStringLengthEncoded();\n                                    const value = subSubPacket.readStringLengthEncoded();\n                                    switch(variable){\n                                        case \"character_set_client\":\n                                            info.collation = Collations.fromCharset(value);\n                                            if (info.collation === undefined) {\n                                                this.throwError(new Error(\"unknown charset : '\" + value + \"'\"), info);\n                                                return;\n                                            }\n                                            opts.emit(\"collation\", info.collation);\n                                            break;\n                                        case \"connection_id\":\n                                            info.threadId = parseInt(value);\n                                            break;\n                                        default:\n                                    }\n                                }while (subSubPacket.remaining() > 0);\n                                break;\n                            case StateChange.SESSION_TRACK_SCHEMA:\n                                const subSubPacket2 = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                                info.database = subSubPacket2.readStringLengthEncoded();\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        if (this._responseIndex === 0) {\n            // fast path for standard single result\n            if (info.status & ServerStatus.MORE_RESULTS_EXISTS) {\n                this._rows.push(okPacket);\n                this._responseIndex++;\n                return this.onPacketReceive = this.readResponsePacket;\n            }\n            return this.success(this.opts.metaAsArray ? [\n                okPacket,\n                []\n            ] : okPacket);\n        }\n        this._rows.push(okPacket);\n        if (info.status & ServerStatus.MORE_RESULTS_EXISTS) {\n            this._responseIndex++;\n            return this.onPacketReceive = this.readResponsePacket;\n        }\n        if (this.opts.metaAsArray) {\n            if (!this._meta) {\n                this._meta = new Array(this._responseIndex);\n            }\n            this._meta[this._responseIndex] = null;\n            this.success([\n                this._rows,\n                this._meta\n            ]);\n        } else {\n            this.success(this._rows);\n        }\n    }\n    success(val) {\n        this.successEnd(val);\n        this._columns = null;\n        this._rows = null;\n    }\n    /**\n   * Read column information metadata\n   * see https://mariadb.com/kb/en/library/resultset/#column-definition-packet\n   *\n   * @param packet    column definition packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */ readColumn(packet, out, opts, info) {\n        this._columns.push(new ColumnDefinition(packet, info, this.opts.rowsAsArray));\n        // last column\n        if (this._columns.length === this._columnCount) {\n            this.setParser();\n            if (this.canSkipMeta && info.serverPermitSkipMeta && this.prepare != null) {\n                // server can skip meta, but have force sending it.\n                // metadata have changed, updating prepare result accordingly\n                this.prepare.columns = this._columns;\n            }\n            this.emit(\"fields\", this._columns);\n            return this.onPacketReceive = info.eofDeprecated ? this.readResultSetRow : this.readIntermediateEOF;\n        }\n    }\n    setParser() {\n        this._parseFonction = new Array(this._columnCount);\n        if (this.opts.typeCast) {\n            for(let i = 0; i < this._columnCount; i++){\n                this._parseFonction[i] = this.readCastValue.bind(this, this._columns[i]);\n            }\n        } else {\n            const dataParser = this.binary ? BinaryDecoder.parser : TextDecoder.parser;\n            for(let i = 0; i < this._columnCount; i++){\n                this._parseFonction[i] = dataParser(this._columns[i], this.opts);\n            }\n        }\n        if (this.opts.rowsAsArray) {\n            this.parseRow = this.parseRowAsArray;\n        } else {\n            this.tableHeader = new Array(this._columnCount);\n            this.parseRow = this.binary ? this.parseRowStdBinary : this.parseRowStdText;\n            if (this.opts.nestTables) {\n                if (typeof this.opts.nestTables === \"string\") {\n                    for(let i = 0; i < this._columnCount; i++){\n                        this.tableHeader[i] = this._columns[i].table() + this.opts.nestTables + this._columns[i].name();\n                    }\n                    this.checkDuplicates();\n                } else if (this.opts.nestTables === true) {\n                    this.parseRow = this.parseRowNested;\n                    for(let i = 0; i < this._columnCount; i++){\n                        this.tableHeader[i] = [\n                            this._columns[i].table(),\n                            this._columns[i].name()\n                        ];\n                    }\n                    this.checkNestTablesDuplicates();\n                }\n            } else {\n                for(let i = 0; i < this._columnCount; i++){\n                    this.tableHeader[i] = this._columns[i].name();\n                }\n                this.checkDuplicates();\n            }\n        }\n    }\n    checkDuplicates() {\n        if (this.opts.checkDuplicate) {\n            for(let i = 0; i < this._columnCount; i++){\n                if (this.tableHeader.indexOf(this.tableHeader[i], i + 1) > 0) {\n                    const dupes = this.tableHeader.reduce((acc, v, i, arr)=>arr.indexOf(v) !== i && acc.indexOf(v) === -1 ? acc.concat(v) : acc, []);\n                    this.throwUnexpectedError(`Error in results, duplicate field name \\`${dupes[0]}\\`.\\n(see option \\`checkDuplicate\\`)`, false, null, \"42000\", Errors.ER_DUPLICATE_FIELD);\n                }\n            }\n        }\n    }\n    checkNestTablesDuplicates() {\n        if (this.opts.checkDuplicate) {\n            for(let i = 0; i < this._columnCount; i++){\n                for(let j = 0; j < i; j++){\n                    if (this.tableHeader[j][0] === this.tableHeader[i][0] && this.tableHeader[j][1] === this.tableHeader[i][1]) {\n                        this.throwUnexpectedError(`Error in results, duplicate field name \\`${this.tableHeader[i][0]}\\`.\\`${this.tableHeader[i][1]}\\`\\n(see option \\`checkDuplicate\\`)`, false, null, \"42000\", Errors.ER_DUPLICATE_FIELD);\n                    }\n                }\n            }\n        }\n    }\n    /**\n   * Read intermediate EOF.\n   * _only for server before MariaDB 10.2 / MySQL 5.7 that doesn't have CLIENT_DEPRECATE_EOF capability_\n   * see https://mariadb.com/kb/en/library/eof_packet/\n   *\n   * @param packet    EOF Packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */ readIntermediateEOF(packet, out, opts, info) {\n        if (packet.peek() !== 0xfe) {\n            return this.throwNewError(\"Error in protocol, expected EOF packet\", true, info, \"42000\", Errors.ER_EOF_EXPECTED);\n        }\n        //before MySQL 5.7.5, last EOF doesn't contain the good flag SERVER_MORE_RESULTS_EXISTS\n        //for OUT parameters. It must be checked here\n        //(5.7.5 does have the CLIENT_DEPRECATE_EOF capability, so this packet in not even send)\n        packet.skip(3);\n        info.status = packet.readUInt16();\n        this.isOutParameter = info.status & ServerStatus.PS_OUT_PARAMS;\n        this.onPacketReceive = this.readResultSetRow;\n    }\n    handleNewRows(row) {\n        this._rows[this._responseIndex].push(row);\n    }\n    /**\n   * Check if packet is result-set end = EOF of OK_Packet with EOF header according to CLIENT_DEPRECATE_EOF capability\n   * or a result-set row\n   *\n   * @param packet    current packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */ readResultSetRow(packet, out, opts, info) {\n        if (packet.peek() >= 0xfe) {\n            if (packet.peek() === 0xff) {\n                //force in transaction status, since query will have created a transaction if autocommit is off\n                //goal is to avoid unnecessary COMMIT/ROLLBACK.\n                info.status |= ServerStatus.STATUS_IN_TRANS;\n                return this.throwError(packet.readError(info, this.displaySql(), this.stack), info);\n            }\n            if (!info.eofDeprecated && packet.length() < 13 || info.eofDeprecated && packet.length() < 0xffffff) {\n                if (!info.eofDeprecated) {\n                    packet.skip(3);\n                    info.status = packet.readUInt16();\n                } else {\n                    packet.skip(1); //skip header\n                    packet.skipLengthCodedNumber(); //skip update count\n                    packet.skipLengthCodedNumber(); //skip insert id\n                    info.status = packet.readUInt16();\n                }\n                if (this.opts.metaAsArray) {\n                    //return promise object as array :\n                    // example for SELECT 1 =>\n                    // [\n                    //   [ {\"1\": 1} ],      //rows\n                    //   [ColumnDefinition] //meta\n                    // ]\n                    if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\n                        if (!this._meta) this._meta = [];\n                        this._meta[this._responseIndex] = this._columns;\n                        this._responseIndex++;\n                        return this.onPacketReceive = this.readResponsePacket;\n                    }\n                    if (this._responseIndex === 0) {\n                        this.success([\n                            this._rows[0],\n                            this._columns\n                        ]);\n                    } else {\n                        if (!this._meta) this._meta = [];\n                        this._meta[this._responseIndex] = this._columns;\n                        this.success([\n                            this._rows,\n                            this._meta\n                        ]);\n                    }\n                } else {\n                    //return promise object as rows that have meta property :\n                    // example for SELECT 1 =>\n                    // [\n                    //   {\"1\": 1},\n                    //   meta: [ColumnDefinition]\n                    // ]\n                    Object.defineProperty(this._rows[this._responseIndex], \"meta\", {\n                        value: this._columns,\n                        writable: true,\n                        enumerable: this.opts.metaEnumerable\n                    });\n                    if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\n                        this._responseIndex++;\n                        return this.onPacketReceive = this.readResponsePacket;\n                    }\n                    this.success(this._responseIndex === 0 ? this._rows[0] : this._rows);\n                }\n                return;\n            }\n        }\n        this.handleNewRows(this.parseRow(packet));\n    }\n    /**\n   * Display current SQL with parameters (truncated if too big)\n   *\n   * @returns {string}\n   */ displaySql() {\n        if (this.opts && this.initialValues) {\n            if (this.sql.length > this.opts.debugLen) {\n                return this.sql.substring(0, this.opts.debugLen) + \"...\";\n            }\n            let sqlMsg = this.sql + \" - parameters:\";\n            return this.logParameters(sqlMsg, this.initialValues);\n        }\n        if (this.sql.length > this.opts.debugLen) {\n            return this.sql.substring(0, this.opts.debugLen) + \"... - parameters:[]\";\n        }\n        return this.sql + \" - parameters:[]\";\n    }\n    logParameters(sqlMsg, values) {\n        if (this.opts.namedPlaceholders) {\n            sqlMsg += \"{\";\n            let first = true;\n            for(let key in values){\n                if (first) {\n                    first = false;\n                } else {\n                    sqlMsg += \",\";\n                }\n                sqlMsg += \"'\" + key + \"':\";\n                let param = values[key];\n                sqlMsg = Parser.logParam(sqlMsg, param);\n                if (sqlMsg.length > this.opts.debugLen) {\n                    sqlMsg = sqlMsg.substring(0, this.opts.debugLen) + \"...\";\n                    break;\n                }\n            }\n            sqlMsg += \"}\";\n        } else {\n            sqlMsg += \"[\";\n            if (Array.isArray(values)) {\n                for(let i = 0; i < values.length; i++){\n                    if (i !== 0) sqlMsg += \",\";\n                    let param = values[i];\n                    sqlMsg = Parser.logParam(sqlMsg, param);\n                    if (sqlMsg.length > this.opts.debugLen) {\n                        sqlMsg = sqlMsg.substring(0, this.opts.debugLen) + \"...\";\n                        break;\n                    }\n                }\n            } else {\n                sqlMsg = Parser.logParam(sqlMsg, values);\n                if (sqlMsg.length > this.opts.debugLen) {\n                    sqlMsg = sqlMsg.substring(0, this.opts.debugLen) + \"...\";\n                }\n            }\n            sqlMsg += \"]\";\n        }\n        return sqlMsg;\n    }\n    parseRowAsArray(packet) {\n        const row = new Array(this._columnCount);\n        const nullBitMap = this.binary ? BinaryDecoder.newRow(packet, this._columns) : null;\n        for(let i = 0; i < this._columnCount; i++){\n            row[i] = this._parseFonction[i](packet, this.opts, this.unexpectedError, nullBitMap, i);\n        }\n        return row;\n    }\n    parseRowNested(packet) {\n        const row = {};\n        const nullBitMap = this.binary ? BinaryDecoder.newRow(packet, this._columns) : null;\n        for(let i = 0; i < this._columnCount; i++){\n            if (!row[this.tableHeader[i][0]]) row[this.tableHeader[i][0]] = {};\n            row[this.tableHeader[i][0]][this.tableHeader[i][1]] = this._parseFonction[i](packet, this.opts, this.unexpectedError, nullBitMap, i);\n        }\n        return row;\n    }\n    parseRowStdText(packet) {\n        const row = {};\n        for(let i = 0; i < this._columnCount; i++){\n            row[this.tableHeader[i]] = this._parseFonction[i](packet, this.opts, this.unexpectedError);\n        }\n        return row;\n    }\n    parseRowStdBinary(packet) {\n        const nullBitMap = BinaryDecoder.newRow(packet, this._columns);\n        const row = {};\n        for(let i = 0; i < this._columnCount; i++){\n            row[this.tableHeader[i]] = this._parseFonction[i](packet, this.opts, this.unexpectedError, nullBitMap, i);\n        }\n        return row;\n    }\n    readCastValue(column, packet, opts, unexpectedError, nullBitmap, index) {\n        if (this.binary) {\n            BinaryDecoder.castWrapper(column, packet, opts, nullBitmap, index);\n        } else {\n            TextDecoder.castWrapper(column, packet, opts, nullBitmap, index);\n        }\n        const dataParser = this.binary ? BinaryDecoder.parser : TextDecoder.parser;\n        return opts.typeCast(column, dataParser(column, opts).bind(null, packet, opts, unexpectedError, nullBitmap, index));\n    }\n    readLocalInfile(packet, out, opts, info) {\n        packet.skip(1); //skip header\n        out.startPacket(this);\n        const fileName = packet.readStringRemaining();\n        if (!Parse.validateFileName(this.sql, this.initialValues, fileName)) {\n            out.writeEmptyPacket();\n            const error = Errors.createError(\"LOCAL INFILE wrong filename. '\" + fileName + \"' doesn't correspond to query \" + this.sql + \". Query cancelled. Check for malicious server / proxy\", Errors.ER_LOCAL_INFILE_WRONG_FILENAME, info, \"HY000\", this.sql);\n            process.nextTick(this.reject, error);\n            this.reject = null;\n            this.resolve = null;\n            return this.onPacketReceive = this.readResponsePacket;\n        }\n        // this.sequenceNo = 2;\n        // this.compressSequenceNo = 2;\n        let stream;\n        try {\n            stream = this.opts.infileStreamFactory ? this.opts.infileStreamFactory(fileName) : fs.createReadStream(fileName);\n        } catch (e) {\n            out.writeEmptyPacket();\n            const error = Errors.createError(`LOCAL INFILE infileStreamFactory failed`, Errors.ER_LOCAL_INFILE_NOT_READABLE, info, \"22000\", this.sql);\n            error.cause = e;\n            process.nextTick(this.reject, error);\n            this.reject = null;\n            this.resolve = null;\n            return this.onPacketReceive = this.readResponsePacket;\n        }\n        stream.on(\"error\", (err)=>{\n            out.writeEmptyPacket();\n            const error = Errors.createError(`LOCAL INFILE command failed: ${err.message}`, Errors.ER_LOCAL_INFILE_NOT_READABLE, info, \"22000\", this.sql);\n            process.nextTick(this.reject, error);\n            this.reject = null;\n            this.resolve = null;\n        });\n        stream.on(\"data\", (chunk)=>{\n            out.writeBuffer(chunk, 0, chunk.length);\n        });\n        stream.on(\"end\", ()=>{\n            if (!out.isEmpty()) {\n                out.flushBuffer(false);\n            }\n            out.writeEmptyPacket();\n        });\n        this.onPacketReceive = this.readResponsePacket;\n    }\n    static logParam(sqlMsg, param) {\n        if (param == null) {\n            sqlMsg += param === undefined ? \"undefined\" : \"null\";\n        } else {\n            switch(param.constructor.name){\n                case \"Buffer\":\n                    sqlMsg += \"0x\" + param.toString(\"hex\", 0, Math.min(1024, param.length)) + \"\";\n                    break;\n                case \"String\":\n                    sqlMsg += \"'\" + param + \"'\";\n                    break;\n                case \"Date\":\n                    sqlMsg += getStringDate(param);\n                    break;\n                case \"Object\":\n                    sqlMsg += JSON.stringify(param);\n                    break;\n                default:\n                    sqlMsg += param.toString();\n            }\n        }\n        return sqlMsg;\n    }\n}\nfunction getStringDate(param) {\n    return \"'\" + (\"00\" + (param.getMonth() + 1)).slice(-2) + \"/\" + (\"00\" + param.getDate()).slice(-2) + \"/\" + param.getFullYear() + \" \" + (\"00\" + param.getHours()).slice(-2) + \":\" + (\"00\" + param.getMinutes()).slice(-2) + \":\" + (\"00\" + param.getSeconds()).slice(-2) + \".\" + (\"000\" + param.getMilliseconds()).slice(-3) + \"'\";\n}\nmodule.exports = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/ping.js":
/*!**********************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/ping.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Command = __webpack_require__(/*! ./command */ \"(rsc)/./node_modules/mariadb/lib/cmd/command.js\");\nconst PING_COMMAND = new Uint8Array([\n    1,\n    0,\n    0,\n    0,\n    0x0e\n]);\n/**\n * send a COM_PING: permits sending a packet containing one byte to check that the connection is active.\n * see https://mariadb.com/kb/en/library/com_ping/\n */ class Ping extends Command {\n    constructor(cmdParam, resolve, reject){\n        super(cmdParam, resolve, reject);\n    }\n    start(out, opts, info) {\n        if (opts.logger.query) opts.logger.query(\"PING\");\n        this.onPacketReceive = this.readPingResponsePacket;\n        out.fastFlush(this, PING_COMMAND);\n        this.emit(\"send_end\");\n    }\n    /**\n   * Read ping response packet.\n   * packet can be :\n   * - an ERR_Packet\n   * - an OK_Packet\n   *\n   * @param packet  query response\n   * @param out     output writer\n   * @param opts    connection options\n   * @param info    connection info\n   */ readPingResponsePacket(packet, out, opts, info) {\n        packet.skip(1); //skip header\n        packet.skipLengthCodedNumber(); //affected rows\n        packet.skipLengthCodedNumber(); //insert ids\n        info.status = packet.readUInt16();\n        this.successEnd(null);\n    }\n}\nmodule.exports = Ping;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL3BpbmcuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQThDO0FBQzlDLGtEQUFrRDtBQUVsRDtBQUVBLE1BQU1BLFVBQVVDLG1CQUFPQSxDQUFDO0FBRXhCLE1BQU1DLGVBQWUsSUFBSUMsV0FBVztJQUFDO0lBQUc7SUFBRztJQUFHO0lBQUc7Q0FBSztBQUV0RDs7O0NBR0MsR0FDRCxNQUFNQyxhQUFhSjtJQUNqQkssWUFBWUMsUUFBUSxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sQ0FBRTtRQUNyQyxLQUFLLENBQUNGLFVBQVVDLFNBQVNDO0lBQzNCO0lBRUFDLE1BQU1DLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUU7UUFDckIsSUFBSUQsS0FBS0UsTUFBTSxDQUFDQyxLQUFLLEVBQUVILEtBQUtFLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDO1FBQ3pDLElBQUksQ0FBQ0MsZUFBZSxHQUFHLElBQUksQ0FBQ0Msc0JBQXNCO1FBQ2xETixJQUFJTyxTQUFTLENBQUMsSUFBSSxFQUFFZjtRQUNwQixJQUFJLENBQUNnQixJQUFJLENBQUM7SUFDWjtJQUVBOzs7Ozs7Ozs7O0dBVUMsR0FDREYsdUJBQXVCRyxNQUFNLEVBQUVULEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUU7UUFDOUNPLE9BQU9DLElBQUksQ0FBQyxJQUFJLGFBQWE7UUFDN0JELE9BQU9FLHFCQUFxQixJQUFJLGVBQWU7UUFDL0NGLE9BQU9FLHFCQUFxQixJQUFJLFlBQVk7UUFDNUNULEtBQUtVLE1BQU0sR0FBR0gsT0FBT0ksVUFBVTtRQUMvQixJQUFJLENBQUNDLFVBQVUsQ0FBQztJQUNsQjtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGZuZXh0anMvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL3BpbmcuanM/YTFlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAgU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IExHUEwtMi4xLW9yLWxhdGVyXG4vLyAgQ29weXJpZ2h0IChjKSAyMDE1LTIwMjMgTWFyaWFEQiBDb3Jwb3JhdGlvbiBBYlxuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IENvbW1hbmQgPSByZXF1aXJlKCcuL2NvbW1hbmQnKTtcblxuY29uc3QgUElOR19DT01NQU5EID0gbmV3IFVpbnQ4QXJyYXkoWzEsIDAsIDAsIDAsIDB4MGVdKTtcblxuLyoqXG4gKiBzZW5kIGEgQ09NX1BJTkc6IHBlcm1pdHMgc2VuZGluZyBhIHBhY2tldCBjb250YWluaW5nIG9uZSBieXRlIHRvIGNoZWNrIHRoYXQgdGhlIGNvbm5lY3Rpb24gaXMgYWN0aXZlLlxuICogc2VlIGh0dHBzOi8vbWFyaWFkYi5jb20va2IvZW4vbGlicmFyeS9jb21fcGluZy9cbiAqL1xuY2xhc3MgUGluZyBleHRlbmRzIENvbW1hbmQge1xuICBjb25zdHJ1Y3RvcihjbWRQYXJhbSwgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgc3VwZXIoY21kUGFyYW0sIHJlc29sdmUsIHJlamVjdCk7XG4gIH1cblxuICBzdGFydChvdXQsIG9wdHMsIGluZm8pIHtcbiAgICBpZiAob3B0cy5sb2dnZXIucXVlcnkpIG9wdHMubG9nZ2VyLnF1ZXJ5KCdQSU5HJyk7XG4gICAgdGhpcy5vblBhY2tldFJlY2VpdmUgPSB0aGlzLnJlYWRQaW5nUmVzcG9uc2VQYWNrZXQ7XG4gICAgb3V0LmZhc3RGbHVzaCh0aGlzLCBQSU5HX0NPTU1BTkQpO1xuICAgIHRoaXMuZW1pdCgnc2VuZF9lbmQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkIHBpbmcgcmVzcG9uc2UgcGFja2V0LlxuICAgKiBwYWNrZXQgY2FuIGJlIDpcbiAgICogLSBhbiBFUlJfUGFja2V0XG4gICAqIC0gYW4gT0tfUGFja2V0XG4gICAqXG4gICAqIEBwYXJhbSBwYWNrZXQgIHF1ZXJ5IHJlc3BvbnNlXG4gICAqIEBwYXJhbSBvdXQgICAgIG91dHB1dCB3cml0ZXJcbiAgICogQHBhcmFtIG9wdHMgICAgY29ubmVjdGlvbiBvcHRpb25zXG4gICAqIEBwYXJhbSBpbmZvICAgIGNvbm5lY3Rpb24gaW5mb1xuICAgKi9cbiAgcmVhZFBpbmdSZXNwb25zZVBhY2tldChwYWNrZXQsIG91dCwgb3B0cywgaW5mbykge1xuICAgIHBhY2tldC5za2lwKDEpOyAvL3NraXAgaGVhZGVyXG4gICAgcGFja2V0LnNraXBMZW5ndGhDb2RlZE51bWJlcigpOyAvL2FmZmVjdGVkIHJvd3NcbiAgICBwYWNrZXQuc2tpcExlbmd0aENvZGVkTnVtYmVyKCk7IC8vaW5zZXJ0IGlkc1xuICAgIGluZm8uc3RhdHVzID0gcGFja2V0LnJlYWRVSW50MTYoKTtcbiAgICB0aGlzLnN1Y2Nlc3NFbmQobnVsbCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQaW5nO1xuIl0sIm5hbWVzIjpbIkNvbW1hbmQiLCJyZXF1aXJlIiwiUElOR19DT01NQU5EIiwiVWludDhBcnJheSIsIlBpbmciLCJjb25zdHJ1Y3RvciIsImNtZFBhcmFtIiwicmVzb2x2ZSIsInJlamVjdCIsInN0YXJ0Iiwib3V0Iiwib3B0cyIsImluZm8iLCJsb2dnZXIiLCJxdWVyeSIsIm9uUGFja2V0UmVjZWl2ZSIsInJlYWRQaW5nUmVzcG9uc2VQYWNrZXQiLCJmYXN0Rmx1c2giLCJlbWl0IiwicGFja2V0Iiwic2tpcCIsInNraXBMZW5ndGhDb2RlZE51bWJlciIsInN0YXR1cyIsInJlYWRVSW50MTYiLCJzdWNjZXNzRW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/ping.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/prepare.js":
/*!*************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/prepare.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Parser = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/mariadb/lib/cmd/parser.js\");\nconst Parse = __webpack_require__(/*! ../misc/parse */ \"(rsc)/./node_modules/mariadb/lib/misc/parse.js\");\nconst BinaryEncoder = __webpack_require__(/*! ./encoder/binary-encoder */ \"(rsc)/./node_modules/mariadb/lib/cmd/encoder/binary-encoder.js\");\nconst PrepareCacheWrapper = __webpack_require__(/*! ./class/prepare-cache-wrapper */ \"(rsc)/./node_modules/mariadb/lib/cmd/class/prepare-cache-wrapper.js\");\nconst PrepareResult = __webpack_require__(/*! ./class/prepare-result-packet */ \"(rsc)/./node_modules/mariadb/lib/cmd/class/prepare-result-packet.js\");\nconst ServerStatus = __webpack_require__(/*! ../const/server-status */ \"(rsc)/./node_modules/mariadb/lib/const/server-status.js\");\nconst Errors = __webpack_require__(/*! ../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst ColumnDefinition = __webpack_require__(/*! ./column-definition */ \"(rsc)/./node_modules/mariadb/lib/cmd/column-definition.js\");\n/**\n * send a COM_STMT_PREPARE: permits sending a prepare packet\n * see https://mariadb.com/kb/en/com_stmt_prepare/\n */ class Prepare extends Parser {\n    constructor(resolve, reject, connOpts, cmdParam, conn){\n        super(resolve, reject, connOpts, cmdParam);\n        this.encoder = new BinaryEncoder(this.opts);\n        this.binary = true;\n        this.conn = conn;\n    }\n    /**\n   * Send COM_STMT_PREPARE\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */ start(out, opts, info) {\n        // check in cache if enabled\n        if (this.conn.prepareCache) {\n            let cachedPrepare = this.conn.prepareCache.get(this.sql);\n            if (cachedPrepare) {\n                this.emit(\"send_end\");\n                return this.successEnd(cachedPrepare);\n            }\n        }\n        if (opts.logger.query) opts.logger.query(`PREPARE: ${this.sql}`);\n        this.onPacketReceive = this.readPrepareResultPacket;\n        if (this.opts.namedPlaceholders) {\n            const res = Parse.searchPlaceholder(this.sql);\n            this.sql = res.sql;\n            this.placeHolderIndex = res.placeHolderIndex;\n        }\n        out.startPacket(this);\n        out.writeInt8(0x16);\n        out.writeString(this.sql);\n        out.flush();\n        this.emit(\"send_end\");\n    }\n    successPrepare(info, opts) {\n        let prepare = new PrepareResult(this.statementId, this.parameterCount, this._columns, info.database, this.sql, this.placeHolderIndex, this.conn);\n        if (this.conn.prepareCache) {\n            let cached = new PrepareCacheWrapper(prepare);\n            this.conn.prepareCache.set(this.sql, cached);\n            return this.successEnd(cached.incrementUse());\n        }\n        return this.successEnd(prepare);\n    }\n    /**\n   * Read COM_STMT_PREPARE response Packet.\n   * see https://mariadb.com/kb/en/library/com_stmt_prepare/#com_stmt_prepare-response\n   *\n   * @param packet    COM_STMT_PREPARE_OK packet\n   * @param opts      connection options\n   * @param info      connection information\n   * @param out       output writer\n   * @returns {*}     null or {Result.readResponsePacket} in case of multi-result-set\n   */ readPrepareResultPacket(packet, out, opts, info) {\n        switch(packet.peek()){\n            //*********************************************************************************************************\n            //* PREPARE response\n            //*********************************************************************************************************\n            case 0x00:\n                packet.skip(1); //skip header\n                this.statementId = packet.readInt32();\n                this.columnNo = packet.readUInt16();\n                this.parameterCount = packet.readUInt16();\n                this._parameterNo = this.parameterCount;\n                this._columns = [];\n                if (this._parameterNo > 0) return this.onPacketReceive = this.skipPrepareParameterPacket;\n                if (this.columnNo > 0) return this.onPacketReceive = this.readPrepareColumnsPacket;\n                return this.successPrepare(info, opts);\n            //*********************************************************************************************************\n            //* ERROR response\n            //*********************************************************************************************************\n            case 0xff:\n                const err = packet.readError(info, this.displaySql(), this.stack);\n                //force in transaction status, since query will have created a transaction if autocommit is off\n                //goal is to avoid unnecessary COMMIT/ROLLBACK.\n                info.status |= ServerStatus.STATUS_IN_TRANS;\n                this.onPacketReceive = this.readResponsePacket;\n                return this.throwError(err, info);\n            //*********************************************************************************************************\n            //* Unexpected response\n            //*********************************************************************************************************\n            default:\n                info.status |= ServerStatus.STATUS_IN_TRANS;\n                this.onPacketReceive = this.readResponsePacket;\n                return this.throwError(Errors.ER_UNEXPECTED_PACKET, info);\n        }\n    }\n    readPrepareColumnsPacket(packet, out, opts, info) {\n        this.columnNo--;\n        this._columns.push(new ColumnDefinition(packet, info, opts.rowsAsArray));\n        if (this.columnNo === 0) {\n            if (info.eofDeprecated) {\n                return this.successPrepare(info, opts);\n            }\n            return this.onPacketReceive = this.skipEofPacket;\n        }\n    }\n    skipEofPacket(packet, out, opts, info) {\n        if (this.columnNo > 0) return this.onPacketReceive = this.readPrepareColumnsPacket;\n        return this.successPrepare(info, opts);\n    }\n    skipPrepareParameterPacket(packet, out, opts, info) {\n        this._parameterNo--;\n        if (this._parameterNo === 0) {\n            if (info.eofDeprecated) {\n                if (this.columnNo > 0) return this.onPacketReceive = this.readPrepareColumnsPacket;\n                return this.successPrepare(info, opts);\n            }\n            return this.onPacketReceive = this.skipEofPacket;\n        }\n    }\n    /**\n   * Display current SQL with parameters (truncated if too big)\n   *\n   * @returns {string}\n   */ displaySql() {\n        if (this.opts) {\n            if (this.sql.length > this.opts.debugLen) {\n                return this.sql.substring(0, this.opts.debugLen) + \"...\";\n            }\n        }\n        return this.sql;\n    }\n}\nmodule.exports = Prepare;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/prepare.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/query.js":
/*!***********************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/query.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Parser = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/mariadb/lib/cmd/parser.js\");\nconst Errors = __webpack_require__(/*! ../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst Parse = __webpack_require__(/*! ../misc/parse */ \"(rsc)/./node_modules/mariadb/lib/misc/parse.js\");\nconst TextEncoder = __webpack_require__(/*! ./encoder/text-encoder */ \"(rsc)/./node_modules/mariadb/lib/cmd/encoder/text-encoder.js\");\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nconst QUOTE = 0x27;\n/**\n * Protocol COM_QUERY\n * see : https://mariadb.com/kb/en/library/com_query/\n */ class Query extends Parser {\n    constructor(resolve, reject, connOpts, cmdParam){\n        super(resolve, reject, connOpts, cmdParam);\n        this.encoder = new TextEncoder(this.opts);\n        this.binary = false;\n    }\n    /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */ start(out, opts, info) {\n        if (opts.logger.query) opts.logger.query(`QUERY: ${opts.logger.logParam ? this.displaySql() : this.sql}`);\n        this.onPacketReceive = this.readResponsePacket;\n        if (this.initialValues === undefined) {\n            //shortcut if no parameters\n            out.startPacket(this);\n            out.writeInt8(0x03);\n            if (!this.handleTimeout(out, info)) return;\n            out.writeString(this.sql);\n            out.flush();\n            this.emit(\"send_end\");\n            return;\n        }\n        this.encodedSql = out.encodeString(this.sql);\n        if (this.opts.namedPlaceholders) {\n            try {\n                const parsed = Parse.splitQueryPlaceholder(this.encodedSql, info, this.initialValues, this.displaySql.bind(this));\n                this.paramPositions = parsed.paramPositions;\n                this.values = parsed.values;\n            } catch (err) {\n                this.emit(\"send_end\");\n                return this.throwError(err, info);\n            }\n        } else {\n            this.paramPositions = Parse.splitQuery(this.encodedSql);\n            this.values = Array.isArray(this.initialValues) ? this.initialValues : [\n                this.initialValues\n            ];\n            if (!this.validateParameters(info)) return;\n        }\n        out.startPacket(this);\n        out.writeInt8(0x03);\n        if (!this.handleTimeout(out, info)) return;\n        this.paramPos = 0;\n        this.sqlPos = 0;\n        //********************************************\n        // send params\n        //********************************************\n        const len = this.paramPositions.length / 2;\n        for(this.valueIdx = 0; this.valueIdx < len;){\n            out.writeBuffer(this.encodedSql, this.sqlPos, this.paramPositions[this.paramPos++] - this.sqlPos);\n            this.sqlPos = this.paramPositions[this.paramPos++];\n            const value = this.values[this.valueIdx++];\n            if (value != null && typeof value === \"object\" && typeof value.pipe === \"function\" && typeof value.read === \"function\") {\n                this.sending = true;\n                //********************************************\n                // param is stream,\n                // now all params will be written by event\n                //********************************************\n                this.paramWritten = this._paramWritten.bind(this, out, info);\n                out.writeInt8(QUOTE); //'\n                value.on(\"data\", out.writeBufferEscape.bind(out));\n                value.on(\"end\", (function() {\n                    out.writeInt8(QUOTE); //'\n                    this.paramWritten();\n                }).bind(this));\n                return;\n            } else {\n                //********************************************\n                // param isn't stream. directly write in buffer\n                //********************************************\n                this.encoder.writeParam(out, value, this.opts, info);\n            }\n        }\n        out.writeBuffer(this.encodedSql, this.sqlPos, this.encodedSql.length - this.sqlPos);\n        out.flush();\n        this.emit(\"send_end\");\n    }\n    /**\n   * If timeout is set, prepend query with SET STATEMENT max_statement_time=xx FOR, or throw an error\n   * @param out buffer\n   * @param info server information\n   * @returns {boolean} false if an error has been thrown\n   */ handleTimeout(out, info) {\n        if (this.opts.timeout) {\n            if (info.isMariaDB()) {\n                if (info.hasMinVersion(10, 1, 2)) {\n                    out.writeString(`SET STATEMENT max_statement_time=${this.opts.timeout / 1000} FOR `);\n                    return true;\n                } else {\n                    this.sendCancelled(`Cannot use timeout for xpand/MariaDB server before 10.1.2. timeout value: ${this.opts.timeout}`, Errors.ER_TIMEOUT_NOT_SUPPORTED, info);\n                    return false;\n                }\n            } else {\n                //not available for MySQL\n                // max_execution time exist, but only for select, and as hint\n                this.sendCancelled(`Cannot use timeout for MySQL server. timeout value: ${this.opts.timeout}`, Errors.ER_TIMEOUT_NOT_SUPPORTED, info);\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */ validateParameters(info) {\n        //validate parameter size.\n        if (this.paramPositions.length / 2 > this.values.length) {\n            this.sendCancelled(`Parameter at position ${this.values.length + 1} is not set`, Errors.ER_MISSING_PARAMETER, info);\n            return false;\n        }\n        return true;\n    }\n    _paramWritten(out, info) {\n        while(true){\n            if (this.valueIdx === this.paramPositions.length / 2) {\n                //********************************************\n                // all parameters are written.\n                // flush packet\n                //********************************************\n                out.writeBuffer(this.encodedSql, this.sqlPos, this.encodedSql.length - this.sqlPos);\n                out.flush();\n                this.sending = false;\n                this.emit(\"send_end\");\n                return;\n            } else {\n                const value = this.values[this.valueIdx++];\n                out.writeBuffer(this.encodedSql, this.sqlPos, this.paramPositions[this.paramPos++] - this.sqlPos);\n                this.sqlPos = this.paramPositions[this.paramPos++];\n                if (value == null) {\n                    out.writeStringAscii(\"NULL\");\n                    continue;\n                }\n                if (typeof value === \"object\" && typeof value.pipe === \"function\" && typeof value.read === \"function\") {\n                    //********************************************\n                    // param is stream,\n                    //********************************************\n                    out.writeInt8(QUOTE);\n                    value.once(\"end\", (function() {\n                        out.writeInt8(QUOTE);\n                        this._paramWritten(out, info);\n                    }).bind(this));\n                    value.on(\"data\", out.writeBufferEscape.bind(out));\n                    return;\n                }\n                //********************************************\n                // param isn't stream. directly write in buffer\n                //********************************************\n                this.encoder.writeParam(out, value, this.opts, info);\n            }\n        }\n    }\n    _stream(socket, options) {\n        this.socket = socket;\n        options = options || {};\n        options.objectMode = true;\n        options.read = ()=>{\n            this.socket.resume();\n        };\n        this.inStream = new Readable(options);\n        this.on(\"fields\", function(meta) {\n            this.inStream.emit(\"fields\", meta);\n        });\n        this.on(\"error\", function(err) {\n            this.inStream.emit(\"error\", err);\n        });\n        this.on(\"close\", function(err) {\n            this.inStream.emit(\"error\", err);\n        });\n        this.on(\"end\", function(err) {\n            if (err) this.inStream.emit(\"error\", err);\n            this.socket.resume();\n            this.inStream.push(null);\n        });\n        this.inStream.close = (function() {\n            this.handleNewRows = ()=>{};\n            this.socket.resume();\n        }).bind(this);\n        this.handleNewRows = function(row) {\n            if (!this.inStream.push(row)) {\n                this.socket.pause();\n            }\n        };\n        return this.inStream;\n    }\n}\nmodule.exports = Query;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL3F1ZXJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxrREFBa0Q7QUFFbEQ7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUN2QixNQUFNRSxRQUFRRixtQkFBT0EsQ0FBQztBQUN0QixNQUFNRyxjQUFjSCxtQkFBT0EsQ0FBQztBQUM1QixNQUFNLEVBQUVJLFFBQVEsRUFBRSxHQUFHSixtQkFBT0EsQ0FBQztBQUM3QixNQUFNSyxRQUFRO0FBRWQ7OztDQUdDLEdBQ0QsTUFBTUMsY0FBY1A7SUFDbEJRLFlBQVlDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsQ0FBRTtRQUMvQyxLQUFLLENBQUNILFNBQVNDLFFBQVFDLFVBQVVDO1FBQ2pDLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlULFlBQVksSUFBSSxDQUFDVSxJQUFJO1FBQ3hDLElBQUksQ0FBQ0MsTUFBTSxHQUFHO0lBQ2hCO0lBRUE7Ozs7OztHQU1DLEdBQ0RDLE1BQU1DLEdBQUcsRUFBRUgsSUFBSSxFQUFFSSxJQUFJLEVBQUU7UUFDckIsSUFBSUosS0FBS0ssTUFBTSxDQUFDQyxLQUFLLEVBQUVOLEtBQUtLLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFTixLQUFLSyxNQUFNLENBQUNFLFFBQVEsR0FBRyxJQUFJLENBQUNDLFVBQVUsS0FBSyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hHLElBQUksQ0FBQ0MsZUFBZSxHQUFHLElBQUksQ0FBQ0Msa0JBQWtCO1FBQzlDLElBQUksSUFBSSxDQUFDQyxhQUFhLEtBQUtDLFdBQVc7WUFDcEMsMkJBQTJCO1lBQzNCVixJQUFJVyxXQUFXLENBQUMsSUFBSTtZQUNwQlgsSUFBSVksU0FBUyxDQUFDO1lBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQ0MsYUFBYSxDQUFDYixL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QUksQ0FBQ2pCLEVBQUUsQ0FBQyxTQUFTLFNBQVVsQixHQUFHO1lBQzVCLElBQUksQ0FBQ2tDLFFBQVEsQ0FBQzNDLElBQUksQ0FBQyxTQUFTUztRQUM5QjtRQUVBLElBQUksQ0FBQ2tCLEVBQUUsQ0FBQyxTQUFTLFNBQVVsQixHQUFHO1lBQzVCLElBQUksQ0FBQ2tDLFFBQVEsQ0FBQzNDLElBQUksQ0FBQyxTQUFTUztRQUM5QjtRQUVBLElBQUksQ0FBQ2tCLEVBQUUsQ0FBQyxPQUFPLFNBQVVsQixHQUFHO1lBQzFCLElBQUlBLEtBQUssSUFBSSxDQUFDa0MsUUFBUSxDQUFDM0MsSUFBSSxDQUFDLFNBQVNTO1lBQ3JDLElBQUksQ0FBQzhCLE1BQU0sQ0FBQ0csTUFBTTtZQUNsQixJQUFJLENBQUNDLFFBQVEsQ0FBQ0UsSUFBSSxDQUFDO1FBQ3JCO1FBRUEsSUFBSSxDQUFDRixRQUFRLENBQUNHLEtBQUssR0FBRztZQUNwQixJQUFJLENBQUNDLGFBQWEsR0FBRyxLQUFPO1lBQzVCLElBQUksQ0FBQ1IsTUFBTSxDQUFDRyxNQUFNO1FBQ3BCLEdBQUVwQyxJQUFJLENBQUMsSUFBSTtRQUVYLElBQUksQ0FBQ3lDLGFBQWEsR0FBRyxTQUFVQyxHQUFHO1lBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUNMLFFBQVEsQ0FBQ0UsSUFBSSxDQUFDRyxNQUFNO2dCQUM1QixJQUFJLENBQUNULE1BQU0sQ0FBQ1UsS0FBSztZQUNuQjtRQUNGO1FBRUEsT0FBTyxJQUFJLENBQUNOLFFBQVE7SUFDdEI7QUFDRjtBQUVBTyxPQUFPQyxPQUFPLEdBQUc3RSIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvbGliL2NtZC9xdWVyeS5qcz81MzZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXInKTtcbmNvbnN0IEVycm9ycyA9IHJlcXVpcmUoJy4uL21pc2MvZXJyb3JzJyk7XG5jb25zdCBQYXJzZSA9IHJlcXVpcmUoJy4uL21pc2MvcGFyc2UnKTtcbmNvbnN0IFRleHRFbmNvZGVyID0gcmVxdWlyZSgnLi9lbmNvZGVyL3RleHQtZW5jb2RlcicpO1xuY29uc3QgeyBSZWFkYWJsZSB9ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5jb25zdCBRVU9URSA9IDB4Mjc7XG5cbi8qKlxuICogUHJvdG9jb2wgQ09NX1FVRVJZXG4gKiBzZWUgOiBodHRwczovL21hcmlhZGIuY29tL2tiL2VuL2xpYnJhcnkvY29tX3F1ZXJ5L1xuICovXG5jbGFzcyBRdWVyeSBleHRlbmRzIFBhcnNlciB7XG4gIGNvbnN0cnVjdG9yKHJlc29sdmUsIHJlamVjdCwgY29ubk9wdHMsIGNtZFBhcmFtKSB7XG4gICAgc3VwZXIocmVzb2x2ZSwgcmVqZWN0LCBjb25uT3B0cywgY21kUGFyYW0pO1xuICAgIHRoaXMuZW5jb2RlciA9IG5ldyBUZXh0RW5jb2Rlcih0aGlzLm9wdHMpO1xuICAgIHRoaXMuYmluYXJ5ID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBDT01fUVVFUllcbiAgICpcbiAgICogQHBhcmFtIG91dCAgIG91dHB1dCB3cml0ZXJcbiAgICogQHBhcmFtIG9wdHMgIGNvbm5lY3Rpb24gb3B0aW9uc1xuICAgKiBAcGFyYW0gaW5mbyAgY29ubmVjdGlvbiBpbmZvcm1hdGlvblxuICAgKi9cbiAgc3RhcnQob3V0LCBvcHRzLCBpbmZvKSB7XG4gICAgaWYgKG9wdHMubG9nZ2VyLnF1ZXJ5KSBvcHRzLmxvZ2dlci5xdWVyeShgUVVFUlk6ICR7b3B0cy5sb2dnZXIubG9nUGFyYW0gPyB0aGlzLmRpc3BsYXlTcWwoKSA6IHRoaXMuc3FsfWApO1xuICAgIHRoaXMub25QYWNrZXRSZWNlaXZlID0gdGhpcy5yZWFkUmVzcG9uc2VQYWNrZXQ7XG4gICAgaWYgKHRoaXMuaW5pdGlhbFZhbHVlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvL3Nob3J0Y3V0IGlmIG5vIHBhcmFtZXRlcnNcbiAgICAgIG91dC5zdGFydFBhY2tldCh0aGlzKTtcbiAgICAgIG91dC53cml0ZUludDgoMHgwMyk7XG4gICAgICBpZiAoIXRoaXMuaGFuZGxlVGltZW91dChvdXQsIGluZm8pKSByZXR1cm47XG4gICAgICBvdXQud3JpdGVTdHJpbmcodGhpcy5zcWwpO1xuICAgICAgb3V0LmZsdXNoKCk7XG4gICAgICB0aGlzLmVtaXQoJ3NlbmRfZW5kJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5lbmNvZGVkU3FsID0gb3V0LmVuY29kZVN0cmluZyh0aGlzLnNxbCk7XG5cbiAgICBpZiAodGhpcy5vcHRzLm5hbWVkUGxhY2Vob2xkZXJzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBQYXJzZS5zcGxpdFF1ZXJ5UGxhY2Vob2xkZXIoXG4gICAgICAgICAgdGhpcy5lbmNvZGVkU3FsLFxuICAgICAgICAgIGluZm8sXG4gICAgICAgICAgdGhpcy5pbml0aWFsVmFsdWVzLFxuICAgICAgICAgIHRoaXMuZGlzcGxheVNxbC5iaW5kKHRoaXMpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucGFyYW1Qb3NpdGlvbnMgPSBwYXJzZWQucGFyYW1Qb3NpdGlvbnM7XG4gICAgICAgIHRoaXMudmFsdWVzID0gcGFyc2VkLnZhbHVlcztcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aGlzLmVtaXQoJ3NlbmRfZW5kJyk7XG4gICAgICAgIHJldHVybiB0aGlzLnRocm93RXJyb3IoZXJyLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYXJhbVBvc2l0aW9ucyA9IFBhcnNlLnNwbGl0UXVlcnkodGhpcy5lbmNvZGVkU3FsKTtcbiAgICAgIHRoaXMudmFsdWVzID0gQXJyYXkuaXNBcnJheSh0aGlzLmluaXRpYWxWYWx1ZXMpID8gdGhpcy5pbml0aWFsVmFsdWVzIDogW3RoaXMuaW5pdGlhbFZhbHVlc107XG4gICAgICBpZiAoIXRoaXMudmFsaWRhdGVQYXJhbWV0ZXJzKGluZm8pKSByZXR1cm47XG4gICAgfVxuXG4gICAgb3V0LnN0YXJ0UGFja2V0KHRoaXMpO1xuICAgIG91dC53cml0ZUludDgoMHgwMyk7XG4gICAgaWYgKCF0aGlzLmhhbmRsZVRpbWVvdXQob3V0LCBpbmZvKSkgcmV0dXJuO1xuXG4gICAgdGhpcy5wYXJhbVBvcyA9IDA7XG4gICAgdGhpcy5zcWxQb3MgPSAwO1xuXG4gICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgIC8vIHNlbmQgcGFyYW1zXG4gICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgIGNvbnN0IGxlbiA9IHRoaXMucGFyYW1Qb3NpdGlvbnMubGVuZ3RoIC8gMjtcbiAgICBmb3IgKHRoaXMudmFsdWVJZHggPSAwOyB0aGlzLnZhbHVlSWR4IDwgbGVuOyApIHtcbiAgICAgIG91dC53cml0ZUJ1ZmZlcih0aGlzLmVuY29kZWRTcWwsIHRoaXMuc3FsUG9zLCB0aGlzLnBhcmFtUG9zaXRpb25zW3RoaXMucGFyYW1Qb3MrK10gLSB0aGlzLnNxbFBvcyk7XG4gICAgICB0aGlzLnNxbFBvcyA9IHRoaXMucGFyYW1Qb3NpdGlvbnNbdGhpcy5wYXJhbVBvcysrXTtcblxuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlc1t0aGlzLnZhbHVlSWR4KytdO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgICB0eXBlb2YgdmFsdWUucGlwZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB0eXBlb2YgdmFsdWUucmVhZCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuc2VuZGluZyA9IHRydWU7XG4gICAgICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgLy8gcGFyYW0gaXMgc3RyZWFtLFxuICAgICAgICAvLyBub3cgYWxsIHBhcmFtcyB3aWxsIGJlIHdyaXR0ZW4gYnkgZXZlbnRcbiAgICAgICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgICB0aGlzLnBhcmFtV3JpdHRlbiA9IHRoaXMuX3BhcmFtV3JpdHRlbi5iaW5kKHRoaXMsIG91dCwgaW5mbyk7XG4gICAgICAgIG91dC53cml0ZUludDgoUVVPVEUpOyAvLydcbiAgICAgICAgdmFsdWUub24oJ2RhdGEnLCBvdXQud3JpdGVCdWZmZXJFc2NhcGUuYmluZChvdXQpKTtcblxuICAgICAgICB2YWx1ZS5vbihcbiAgICAgICAgICAnZW5kJyxcbiAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBvdXQud3JpdGVJbnQ4KFFVT1RFKTsgLy8nXG4gICAgICAgICAgICB0aGlzLnBhcmFtV3JpdHRlbigpO1xuICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgLy8gcGFyYW0gaXNuJ3Qgc3RyZWFtLiBkaXJlY3RseSB3cml0ZSBpbiBidWZmZXJcbiAgICAgICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgICB0aGlzLmVuY29kZXIud3JpdGVQYXJhbShvdXQsIHZhbHVlLCB0aGlzLm9wdHMsIGluZm8pO1xuICAgICAgfVxuICAgIH1cbiAgICBvdXQud3JpdGVCdWZmZXIodGhpcy5lbmNvZGVkU3FsLCB0aGlzLnNxbFBvcywgdGhpcy5lbmNvZGVkU3FsLmxlbmd0aCAtIHRoaXMuc3FsUG9zKTtcbiAgICBvdXQuZmx1c2goKTtcbiAgICB0aGlzLmVtaXQoJ3NlbmRfZW5kJyk7XG4gIH1cblxuICAvKipcbiAgICogSWYgdGltZW91dCBpcyBzZXQsIHByZXBlbmQgcXVlcnkgd2l0aCBTRVQgU1RBVEVNRU5UIG1heF9zdGF0ZW1lbnRfdGltZT14eCBGT1IsIG9yIHRocm93IGFuIGVycm9yXG4gICAqIEBwYXJhbSBvdXQgYnVmZmVyXG4gICAqIEBwYXJhbSBpbmZvIHNlcnZlciBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gZmFsc2UgaWYgYW4gZXJyb3IgaGFzIGJlZW4gdGhyb3duXG4gICAqL1xuICBoYW5kbGVUaW1lb3V0KG91dCwgaW5mbykge1xuICAgIGlmICh0aGlzLm9wdHMudGltZW91dCkge1xuICAgICAgaWYgKGluZm8uaXNNYXJpYURCKCkpIHtcbiAgICAgICAgaWYgKGluZm8uaGFzTWluVmVyc2lvbigxMCwgMSwgMikpIHtcbiAgICAgICAgICBvdXQud3JpdGVTdHJpbmcoYFNFVCBTVEFURU1FTlQgbWF4X3N0YXRlbWVudF90aW1lPSR7dGhpcy5vcHRzLnRpbWVvdXQgLyAxMDAwfSBGT1IgYCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZW5kQ2FuY2VsbGVkKFxuICAgICAgICAgICAgYENhbm5vdCB1c2UgdGltZW91dCBmb3IgeHBhbmQvTWFyaWFEQiBzZXJ2ZXIgYmVmb3JlIDEwLjEuMi4gdGltZW91dCB2YWx1ZTogJHt0aGlzLm9wdHMudGltZW91dH1gLFxuICAgICAgICAgICAgRXJyb3JzLkVSX1RJTUVPVVRfTk9UX1NVUFBPUlRFRCxcbiAgICAgICAgICAgIGluZm9cbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9ub3QgYXZhaWxhYmxlIGZvciBNeVNRTFxuICAgICAgICAvLyBtYXhfZXhlY3V0aW9uIHRpbWUgZXhpc3QsIGJ1dCBvbmx5IGZvciBzZWxlY3QsIGFuZCBhcyBoaW50XG4gICAgICAgIHRoaXMuc2VuZENhbmNlbGxlZChcbiAgICAgICAgICBgQ2Fubm90IHVzZSB0aW1lb3V0IGZvciBNeVNRTCBzZXJ2ZXIuIHRpbWVvdXQgdmFsdWU6ICR7dGhpcy5vcHRzLnRpbWVvdXR9YCxcbiAgICAgICAgICBFcnJvcnMuRVJfVElNRU9VVF9OT1RfU1VQUE9SVEVELFxuICAgICAgICAgIGluZm9cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSB0aGF0IHBhcmFtZXRlcnMgZXhpc3RzIGFuZCBhcmUgZGVmaW5lZC5cbiAgICpcbiAgICogQHBhcmFtIGluZm8gICAgICAgIGNvbm5lY3Rpb24gaW5mb1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gcmV0dXJuIGZhbHNlIGlmIGFueSBlcnJvciBvY2N1ci5cbiAgICovXG4gIHZhbGlkYXRlUGFyYW1ldGVycyhpbmZvKSB7XG4gICAgLy92YWxpZGF0ZSBwYXJhbWV0ZXIgc2l6ZS5cbiAgICBpZiAodGhpcy5wYXJhbVBvc2l0aW9ucy5sZW5ndGggLyAyID4gdGhpcy52YWx1ZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnNlbmRDYW5jZWxsZWQoXG4gICAgICAgIGBQYXJhbWV0ZXIgYXQgcG9zaXRpb24gJHt0aGlzLnZhbHVlcy5sZW5ndGggKyAxfSBpcyBub3Qgc2V0YCxcbiAgICAgICAgRXJyb3JzLkVSX01JU1NJTkdfUEFSQU1FVEVSLFxuICAgICAgICBpbmZvXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIF9wYXJhbVdyaXR0ZW4ob3V0LCBpbmZvKSB7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmICh0aGlzLnZhbHVlSWR4ID09PSB0aGlzLnBhcmFtUG9zaXRpb25zLmxlbmd0aCAvIDIpIHtcbiAgICAgICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgICAvLyBhbGwgcGFyYW1ldGVycyBhcmUgd3JpdHRlbi5cbiAgICAgICAgLy8gZmx1c2ggcGFja2V0XG4gICAgICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgb3V0LndyaXRlQnVmZmVyKHRoaXMuZW5jb2RlZFNxbCwgdGhpcy5zcWxQb3MsIHRoaXMuZW5jb2RlZFNxbC5sZW5ndGggLSB0aGlzLnNxbFBvcyk7XG4gICAgICAgIG91dC5mbHVzaCgpO1xuICAgICAgICB0aGlzLnNlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbWl0KCdzZW5kX2VuZCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWVzW3RoaXMudmFsdWVJZHgrK107XG4gICAgICAgIG91dC53cml0ZUJ1ZmZlcih0aGlzLmVuY29kZWRTcWwsIHRoaXMuc3FsUG9zLCB0aGlzLnBhcmFtUG9zaXRpb25zW3RoaXMucGFyYW1Qb3MrK10gLSB0aGlzLnNxbFBvcyk7XG4gICAgICAgIHRoaXMuc3FsUG9zID0gdGhpcy5wYXJhbVBvc2l0aW9uc1t0aGlzLnBhcmFtUG9zKytdO1xuXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgb3V0LndyaXRlU3RyaW5nQXNjaWkoJ05VTEwnKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS5waXBlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZS5yZWFkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgICAgIC8vIHBhcmFtIGlzIHN0cmVhbSxcbiAgICAgICAgICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICAgICAgb3V0LndyaXRlSW50OChRVU9URSk7XG4gICAgICAgICAgdmFsdWUub25jZShcbiAgICAgICAgICAgICdlbmQnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBvdXQud3JpdGVJbnQ4KFFVT1RFKTtcbiAgICAgICAgICAgICAgdGhpcy5fcGFyYW1Xcml0dGVuKG91dCwgaW5mbyk7XG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgICApO1xuICAgICAgICAgIHZhbHVlLm9uKCdkYXRhJywgb3V0LndyaXRlQnVmZmVyRXNjYXBlLmJpbmQob3V0KSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAgICAvLyBwYXJhbSBpc24ndCBzdHJlYW0uIGRpcmVjdGx5IHdyaXRlIGluIGJ1ZmZlclxuICAgICAgICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICAgIHRoaXMuZW5jb2Rlci53cml0ZVBhcmFtKG91dCwgdmFsdWUsIHRoaXMub3B0cywgaW5mbyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3N0cmVhbShzb2NrZXQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLm9iamVjdE1vZGUgPSB0cnVlO1xuICAgIG9wdGlvbnMucmVhZCA9ICgpID0+IHtcbiAgICAgIHRoaXMuc29ja2V0LnJlc3VtZSgpO1xuICAgIH07XG4gICAgdGhpcy5pblN0cmVhbSA9IG5ldyBSZWFkYWJsZShvcHRpb25zKTtcblxuICAgIHRoaXMub24oJ2ZpZWxkcycsIGZ1bmN0aW9uIChtZXRhKSB7XG4gICAgICB0aGlzLmluU3RyZWFtLmVtaXQoJ2ZpZWxkcycsIG1ldGEpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICB0aGlzLmluU3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2Nsb3NlJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgdGhpcy5pblN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdlbmQnLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB0aGlzLmluU3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgIHRoaXMuc29ja2V0LnJlc3VtZSgpO1xuICAgICAgdGhpcy5pblN0cmVhbS5wdXNoKG51bGwpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5pblN0cmVhbS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuaGFuZGxlTmV3Um93cyA9ICgpID0+IHt9O1xuICAgICAgdGhpcy5zb2NrZXQucmVzdW1lKCk7XG4gICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5oYW5kbGVOZXdSb3dzID0gZnVuY3Rpb24gKHJvdykge1xuICAgICAgaWYgKCF0aGlzLmluU3RyZWFtLnB1c2gocm93KSkge1xuICAgICAgICB0aGlzLnNvY2tldC5wYXVzZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5pblN0cmVhbTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXJ5O1xuIl0sIm5hbWVzIjpbIlBhcnNlciIsInJlcXVpcmUiLCJFcnJvcnMiLCJQYXJzZSIsIlRleHRFbmNvZGVyIiwiUmVhZGFibGUiLCJRVU9URSIsIlF1ZXJ5IiwiY29uc3RydWN0b3IiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29ubk9wdHMiLCJjbWRQYXJhbSIsImVuY29kZXIiLCJvcHRzIiwiYmluYXJ5Iiwic3RhcnQiLCJvdXQiLCJpbmZvIiwibG9nZ2VyIiwicXVlcnkiLCJsb2dQYXJhbSIsImRpc3BsYXlTcWwiLCJzcWwiLCJvblBhY2tldFJlY2VpdmUiLCJyZWFkUmVzcG9uc2VQYWNrZXQiLCJpbml0aWFsVmFsdWVzIiwidW5kZWZpbmVkIiwic3RhcnRQYWNrZXQiLCJ3cml0ZUludDgiLCJoYW5kbGVUaW1lb3V0Iiwid3JpdGVTdHJpbmciLCJmbHVzaCIsImVtaXQiLCJlbmNvZGVkU3FsIiwiZW5jb2RlU3RyaW5nIiwibmFtZWRQbGFjZWhvbGRlcnMiLCJwYXJzZWQiLCJzcGxpdFF1ZXJ5UGxhY2Vob2xkZXIiLCJiaW5kIiwicGFyYW1Qb3NpdGlvbnMiLCJ2YWx1ZXMiLCJlcnIiLCJ0aHJvd0Vycm9yIiwic3BsaXRRdWVyeSIsIkFycmF5IiwiaXNBcnJheSIsInZhbGlkYXRlUGFyYW1ldGVycyIsInBhcmFtUG9zIiwic3FsUG9zIiwibGVuIiwibGVuZ3RoIiwidmFsdWVJZHgiLCJ3cml0ZUJ1ZmZlciIsInZhbHVlIiwicGlwZSIsInJlYWQiLCJzZW5kaW5nIiwicGFyYW1Xcml0dGVuIiwiX3BhcmFtV3JpdHRlbiIsIm9uIiwid3JpdGVCdWZmZXJFc2NhcGUiLCJ3cml0ZVBhcmFtIiwidGltZW91dCIsImlzTWFyaWFEQiIsImhhc01pblZlcnNpb24iLCJzZW5kQ2FuY2VsbGVkIiwiRVJfVElNRU9VVF9OT1RfU1VQUE9SVEVEIiwiRVJfTUlTU0lOR19QQVJBTUVURVIiLCJ3cml0ZVN0cmluZ0FzY2lpIiwib25jZSIsIl9zdHJlYW0iLCJzb2NrZXQiLCJvcHRpb25zIiwib2JqZWN0TW9kZSIsInJlc3VtZSIsImluU3RyZWFtIiwibWV0YSIsInB1c2giLCJjbG9zZSIsImhhbmRsZU5ld1Jvd3MiLCJyb3ciLCJwYXVzZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/quit.js":
/*!**********************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/quit.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Command = __webpack_require__(/*! ./command */ \"(rsc)/./node_modules/mariadb/lib/cmd/command.js\");\nconst QUIT_COMMAND = new Uint8Array([\n    1,\n    0,\n    0,\n    0,\n    0x01\n]);\n/**\n * Quit (close connection)\n * see https://mariadb.com/kb/en/library/com_quit/\n */ class Quit extends Command {\n    constructor(cmdParam, resolve, reject){\n        super(cmdParam, resolve, reject);\n    }\n    start(out, opts, info) {\n        if (opts.logger.query) opts.logger.query(\"QUIT\");\n        this.onPacketReceive = this.skipResults;\n        out.fastFlush(this, QUIT_COMMAND);\n        this.emit(\"send_end\");\n        this.successEnd();\n    }\n    skipResults(packet, out, opts, info) {\n    //deliberately empty, if server send answer\n    }\n}\nmodule.exports = Quit;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL3F1aXQuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQThDO0FBQzlDLGtEQUFrRDtBQUVsRDtBQUVBLE1BQU1BLFVBQVVDLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1DLGVBQWUsSUFBSUMsV0FBVztJQUFDO0lBQUc7SUFBRztJQUFHO0lBQUc7Q0FBSztBQUV0RDs7O0NBR0MsR0FDRCxNQUFNQyxhQUFhSjtJQUNqQkssWUFBWUMsUUFBUSxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sQ0FBRTtRQUNyQyxLQUFLLENBQUNGLFVBQVVDLFNBQVNDO0lBQzNCO0lBRUFDLE1BQU1DLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUU7UUFDckIsSUFBSUQsS0FBS0UsTUFBTSxDQUFDQyxLQUFLLEVBQUVILEtBQUtFLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDO1FBQ3pDLElBQUksQ0FBQ0MsZUFBZSxHQUFHLElBQUksQ0FBQ0MsV0FBVztRQUN2Q04sSUFBSU8sU0FBUyxDQUFDLElBQUksRUFBRWY7UUFDcEIsSUFBSSxDQUFDZ0IsSUFBSSxDQUFDO1FBQ1YsSUFBSSxDQUFDQyxVQUFVO0lBQ2pCO0lBRUFILFlBQVlJLE1BQU0sRUFBRVYsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRTtJQUNuQywyQ0FBMkM7SUFDN0M7QUFDRjtBQUVBUyxPQUFPQyxPQUFPLEdBQUdsQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvbGliL2NtZC9xdWl0LmpzPzM5ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDb21tYW5kID0gcmVxdWlyZSgnLi9jb21tYW5kJyk7XG5jb25zdCBRVUlUX0NPTU1BTkQgPSBuZXcgVWludDhBcnJheShbMSwgMCwgMCwgMCwgMHgwMV0pO1xuXG4vKipcbiAqIFF1aXQgKGNsb3NlIGNvbm5lY3Rpb24pXG4gKiBzZWUgaHR0cHM6Ly9tYXJpYWRiLmNvbS9rYi9lbi9saWJyYXJ5L2NvbV9xdWl0L1xuICovXG5jbGFzcyBRdWl0IGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZFBhcmFtLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICBzdXBlcihjbWRQYXJhbSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgfVxuXG4gIHN0YXJ0KG91dCwgb3B0cywgaW5mbykge1xuICAgIGlmIChvcHRzLmxvZ2dlci5xdWVyeSkgb3B0cy5sb2dnZXIucXVlcnkoJ1FVSVQnKTtcbiAgICB0aGlzLm9uUGFja2V0UmVjZWl2ZSA9IHRoaXMuc2tpcFJlc3VsdHM7XG4gICAgb3V0LmZhc3RGbHVzaCh0aGlzLCBRVUlUX0NPTU1BTkQpO1xuICAgIHRoaXMuZW1pdCgnc2VuZF9lbmQnKTtcbiAgICB0aGlzLnN1Y2Nlc3NFbmQoKTtcbiAgfVxuXG4gIHNraXBSZXN1bHRzKHBhY2tldCwgb3V0LCBvcHRzLCBpbmZvKSB7XG4gICAgLy9kZWxpYmVyYXRlbHkgZW1wdHksIGlmIHNlcnZlciBzZW5kIGFuc3dlclxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUXVpdDtcbiJdLCJuYW1lcyI6WyJDb21tYW5kIiwicmVxdWlyZSIsIlFVSVRfQ09NTUFORCIsIlVpbnQ4QXJyYXkiLCJRdWl0IiwiY29uc3RydWN0b3IiLCJjbWRQYXJhbSIsInJlc29sdmUiLCJyZWplY3QiLCJzdGFydCIsIm91dCIsIm9wdHMiLCJpbmZvIiwibG9nZ2VyIiwicXVlcnkiLCJvblBhY2tldFJlY2VpdmUiLCJza2lwUmVzdWx0cyIsImZhc3RGbHVzaCIsImVtaXQiLCJzdWNjZXNzRW5kIiwicGFja2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/quit.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/reset.js":
/*!***********************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/reset.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Command = __webpack_require__(/*! ./command */ \"(rsc)/./node_modules/mariadb/lib/cmd/command.js\");\nconst RESET_COMMAND = new Uint8Array([\n    1,\n    0,\n    0,\n    0,\n    0x1f\n]);\n/**\n * send a COM_RESET_CONNECTION: permits to reset a connection without re-authentication.\n * see https://mariadb.com/kb/en/library/com_reset_connection/\n */ class Reset extends Command {\n    constructor(cmdParam, resolve, reject){\n        super(cmdParam, resolve, reject);\n    }\n    start(out, opts, info) {\n        if (opts.logger.query) opts.logger.query(\"RESET\");\n        this.onPacketReceive = this.readResetResponsePacket;\n        out.fastFlush(this, RESET_COMMAND);\n        this.emit(\"send_end\");\n    }\n    /**\n   * Read response packet.\n   * packet can be :\n   * - an ERR_Packet\n   * - a OK_Packet\n   *\n   * @param packet  query response\n   * @param out     output writer\n   * @param opts    connection options\n   * @param info    connection info\n   */ readResetResponsePacket(packet, out, opts, info) {\n        packet.skip(1); //skip header\n        packet.skipLengthCodedNumber(); //affected rows\n        packet.skipLengthCodedNumber(); //insert ids\n        info.status = packet.readUInt16();\n        this.successEnd();\n    }\n}\nmodule.exports = Reset;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL3Jlc2V0LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxrREFBa0Q7QUFFbEQ7QUFFQSxNQUFNQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUN4QixNQUFNQyxnQkFBZ0IsSUFBSUMsV0FBVztJQUFDO0lBQUc7SUFBRztJQUFHO0lBQUc7Q0FBSztBQUN2RDs7O0NBR0MsR0FDRCxNQUFNQyxjQUFjSjtJQUNsQkssWUFBWUMsUUFBUSxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sQ0FBRTtRQUNyQyxLQUFLLENBQUNGLFVBQVVDLFNBQVNDO0lBQzNCO0lBRUFDLE1BQU1DLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUU7UUFDckIsSUFBSUQsS0FBS0UsTUFBTSxDQUFDQyxLQUFLLEVBQUVILEtBQUtFLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDO1FBQ3pDLElBQUksQ0FBQ0MsZUFBZSxHQUFHLElBQUksQ0FBQ0MsdUJBQXVCO1FBQ25ETixJQUFJTyxTQUFTLENBQUMsSUFBSSxFQUFFZjtRQUNwQixJQUFJLENBQUNnQixJQUFJLENBQUM7SUFDWjtJQUVBOzs7Ozs7Ozs7O0dBVUMsR0FDREYsd0JBQXdCRyxNQUFNLEVBQUVULEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUU7UUFDL0NPLE9BQU9DLElBQUksQ0FBQyxJQUFJLGFBQWE7UUFDN0JELE9BQU9FLHFCQUFxQixJQUFJLGVBQWU7UUFDL0NGLE9BQU9FLHFCQUFxQixJQUFJLFlBQVk7UUFFNUNULEtBQUtVLE1BQU0sR0FBR0gsT0FBT0ksVUFBVTtRQUMvQixJQUFJLENBQUNDLFVBQVU7SUFDakI7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUd0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvbGliL2NtZC9yZXNldC5qcz8yOGI5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQ29tbWFuZCA9IHJlcXVpcmUoJy4vY29tbWFuZCcpO1xuY29uc3QgUkVTRVRfQ09NTUFORCA9IG5ldyBVaW50OEFycmF5KFsxLCAwLCAwLCAwLCAweDFmXSk7XG4vKipcbiAqIHNlbmQgYSBDT01fUkVTRVRfQ09OTkVDVElPTjogcGVybWl0cyB0byByZXNldCBhIGNvbm5lY3Rpb24gd2l0aG91dCByZS1hdXRoZW50aWNhdGlvbi5cbiAqIHNlZSBodHRwczovL21hcmlhZGIuY29tL2tiL2VuL2xpYnJhcnkvY29tX3Jlc2V0X2Nvbm5lY3Rpb24vXG4gKi9cbmNsYXNzIFJlc2V0IGV4dGVuZHMgQ29tbWFuZCB7XG4gIGNvbnN0cnVjdG9yKGNtZFBhcmFtLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICBzdXBlcihjbWRQYXJhbSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgfVxuXG4gIHN0YXJ0KG91dCwgb3B0cywgaW5mbykge1xuICAgIGlmIChvcHRzLmxvZ2dlci5xdWVyeSkgb3B0cy5sb2dnZXIucXVlcnkoJ1JFU0VUJyk7XG4gICAgdGhpcy5vblBhY2tldFJlY2VpdmUgPSB0aGlzLnJlYWRSZXNldFJlc3BvbnNlUGFja2V0O1xuICAgIG91dC5mYXN0Rmx1c2godGhpcywgUkVTRVRfQ09NTUFORCk7XG4gICAgdGhpcy5lbWl0KCdzZW5kX2VuZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWQgcmVzcG9uc2UgcGFja2V0LlxuICAgKiBwYWNrZXQgY2FuIGJlIDpcbiAgICogLSBhbiBFUlJfUGFja2V0XG4gICAqIC0gYSBPS19QYWNrZXRcbiAgICpcbiAgICogQHBhcmFtIHBhY2tldCAgcXVlcnkgcmVzcG9uc2VcbiAgICogQHBhcmFtIG91dCAgICAgb3V0cHV0IHdyaXRlclxuICAgKiBAcGFyYW0gb3B0cyAgICBjb25uZWN0aW9uIG9wdGlvbnNcbiAgICogQHBhcmFtIGluZm8gICAgY29ubmVjdGlvbiBpbmZvXG4gICAqL1xuICByZWFkUmVzZXRSZXNwb25zZVBhY2tldChwYWNrZXQsIG91dCwgb3B0cywgaW5mbykge1xuICAgIHBhY2tldC5za2lwKDEpOyAvL3NraXAgaGVhZGVyXG4gICAgcGFja2V0LnNraXBMZW5ndGhDb2RlZE51bWJlcigpOyAvL2FmZmVjdGVkIHJvd3NcbiAgICBwYWNrZXQuc2tpcExlbmd0aENvZGVkTnVtYmVyKCk7IC8vaW5zZXJ0IGlkc1xuXG4gICAgaW5mby5zdGF0dXMgPSBwYWNrZXQucmVhZFVJbnQxNigpO1xuICAgIHRoaXMuc3VjY2Vzc0VuZCgpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzZXQ7XG4iXSwibmFtZXMiOlsiQ29tbWFuZCIsInJlcXVpcmUiLCJSRVNFVF9DT01NQU5EIiwiVWludDhBcnJheSIsIlJlc2V0IiwiY29uc3RydWN0b3IiLCJjbWRQYXJhbSIsInJlc29sdmUiLCJyZWplY3QiLCJzdGFydCIsIm91dCIsIm9wdHMiLCJpbmZvIiwibG9nZ2VyIiwicXVlcnkiLCJvblBhY2tldFJlY2VpdmUiLCJyZWFkUmVzZXRSZXNwb25zZVBhY2tldCIsImZhc3RGbHVzaCIsImVtaXQiLCJwYWNrZXQiLCJza2lwIiwic2tpcExlbmd0aENvZGVkTnVtYmVyIiwic3RhdHVzIiwicmVhZFVJbnQxNiIsInN1Y2Nlc3NFbmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/reset.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/cmd/stream.js":
/*!************************************************!*\
  !*** ./node_modules/mariadb/lib/cmd/stream.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Query = __webpack_require__(/*! ./query */ \"(rsc)/./node_modules/mariadb/lib/cmd/query.js\");\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\n/**\n * Protocol COM_QUERY with streaming events.\n * see : https://mariadb.com/kb/en/library/com_query/\n */ class Stream extends Query {\n    constructor(cmdParam, connOpts, socket){\n        super(()=>{}, ()=>{}, connOpts, cmdParam);\n        this.socket = socket;\n        this.inStream = new Readable({\n            objectMode: true,\n            read: ()=>{\n                this.socket.resume();\n            }\n        });\n        this.on(\"fields\", function(meta) {\n            this.inStream.emit(\"fields\", meta);\n        });\n        this.on(\"error\", function(err) {\n            this.inStream.emit(\"error\", err);\n        });\n        this.on(\"close\", function(err) {\n            this.inStream.emit(\"error\", err);\n        });\n        this.on(\"end\", function(err) {\n            if (err) this.inStream.emit(\"error\", err);\n            this.socket.resume();\n            this.inStream.push(null);\n        });\n        this.inStream.close = (function() {\n            this.handleNewRows = ()=>{};\n            this.socket.resume();\n        }).bind(this);\n    }\n    handleNewRows(row) {\n        if (!this.inStream.push(row)) {\n            this.socket.pause();\n        }\n    }\n}\nmodule.exports = Stream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEO0FBRUEsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUM7QUFDdEIsTUFBTSxFQUFFQyxRQUFRLEVBQUUsR0FBR0QsbUJBQU9BLENBQUM7QUFFN0I7OztDQUdDLEdBQ0QsTUFBTUUsZUFBZUg7SUFDbkJJLFlBQVlDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLENBQUU7UUFDdEMsS0FBSyxDQUNILEtBQU8sR0FDUCxLQUFPLEdBQ1BELFVBQ0FEO1FBRUYsSUFBSSxDQUFDRSxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSU4sU0FBUztZQUMzQk8sWUFBWTtZQUNaQyxNQUFNO2dCQUNKLElBQUksQ0FBQ0gsTUFBTSxDQUFDSSxNQUFNO1lBQ3BCO1FBQ0Y7UUFFQSxJQUFJLENBQUNDLEVBQUUsQ0FBQyxVQUFVLFNBQVVDLElBQUk7WUFDOUIsSUFBSSxDQUFDTCxRQUFRLENBQUNNLElBQUksQ0FBQyxVQUFVRDtRQUMvQjtRQUVBLElBQUksQ0FBQ0QsRUFBRSxDQUFDLFNBQVMsU0FBVUcsR0FBRztZQUM1QixJQUFJLENBQUNQLFFBQVEsQ0FBQ00sSUFBSSxDQUFDLFNBQVNDO1FBQzlCO1FBRUEsSUFBSSxDQUFDSCxFQUFFLENBQUMsU0FBUyxTQUFVRyxHQUFHO1lBQzVCLElBQUksQ0FBQ1AsUUFBUSxDQUFDTSxJQUFJLENBQUMsU0FBU0M7UUFDOUI7UUFFQSxJQUFJLENBQUNILEVBQUUsQ0FBQyxPQUFPLFNBQVVHLEdBQUc7WUFDMUIsSUFBSUEsS0FBSyxJQUFJLENBQUNQLFFBQVEsQ0FBQ00sSUFBSSxDQUFDLFNBQVNDO1lBQ3JDLElBQUksQ0FBQ1IsTUFBTSxDQUFDSSxNQUFNO1lBQ2xCLElBQUksQ0FBQ0gsUUFBUSxDQUFDUSxJQUFJLENBQUM7UUFDckI7UUFFQSxJQUFJLENBQUNSLFFBQVEsQ0FBQ1MsS0FBSyxHQUFHO1lBQ3BCLElBQUksQ0FBQ0MsYUFBYSxHQUFHLEtBQU87WUFDNUIsSUFBSSxDQUFDWCxNQUFNLENBQUNJLE1BQU07UUFDcEIsR0FBRVEsSUFBSSxDQUFDLElBQUk7SUFDYjtJQUVBRCxjQUFjRSxHQUFHLEVBQUU7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQ1osUUFBUSxDQUFDUSxJQUFJLENBQUNJLE1BQU07WUFDNUIsSUFBSSxDQUFDYixNQUFNLENBQUNjLEtBQUs7UUFDbkI7SUFDRjtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGZuZXh0anMvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY21kL3N0cmVhbS5qcz84NzU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUXVlcnkgPSByZXF1aXJlKCcuL3F1ZXJ5Jyk7XG5jb25zdCB7IFJlYWRhYmxlIH0gPSByZXF1aXJlKCdzdHJlYW0nKTtcblxuLyoqXG4gKiBQcm90b2NvbCBDT01fUVVFUlkgd2l0aCBzdHJlYW1pbmcgZXZlbnRzLlxuICogc2VlIDogaHR0cHM6Ly9tYXJpYWRiLmNvbS9rYi9lbi9saWJyYXJ5L2NvbV9xdWVyeS9cbiAqL1xuY2xhc3MgU3RyZWFtIGV4dGVuZHMgUXVlcnkge1xuICBjb25zdHJ1Y3RvcihjbWRQYXJhbSwgY29ubk9wdHMsIHNvY2tldCkge1xuICAgIHN1cGVyKFxuICAgICAgKCkgPT4ge30sXG4gICAgICAoKSA9PiB7fSxcbiAgICAgIGNvbm5PcHRzLFxuICAgICAgY21kUGFyYW1cbiAgICApO1xuICAgIHRoaXMuc29ja2V0ID0gc29ja2V0O1xuICAgIHRoaXMuaW5TdHJlYW0gPSBuZXcgUmVhZGFibGUoe1xuICAgICAgb2JqZWN0TW9kZTogdHJ1ZSxcbiAgICAgIHJlYWQ6ICgpID0+IHtcbiAgICAgICAgdGhpcy5zb2NrZXQucmVzdW1lKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdmaWVsZHMnLCBmdW5jdGlvbiAobWV0YSkge1xuICAgICAgdGhpcy5pblN0cmVhbS5lbWl0KCdmaWVsZHMnLCBtZXRhKTtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgdGhpcy5pblN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdjbG9zZScsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHRoaXMuaW5TdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbignZW5kJywgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikgdGhpcy5pblN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICB0aGlzLnNvY2tldC5yZXN1bWUoKTtcbiAgICAgIHRoaXMuaW5TdHJlYW0ucHVzaChudWxsKTtcbiAgICB9KTtcblxuICAgIHRoaXMuaW5TdHJlYW0uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmhhbmRsZU5ld1Jvd3MgPSAoKSA9PiB7fTtcbiAgICAgIHRoaXMuc29ja2V0LnJlc3VtZSgpO1xuICAgIH0uYmluZCh0aGlzKTtcbiAgfVxuXG4gIGhhbmRsZU5ld1Jvd3Mocm93KSB7XG4gICAgaWYgKCF0aGlzLmluU3RyZWFtLnB1c2gocm93KSkge1xuICAgICAgdGhpcy5zb2NrZXQucGF1c2UoKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG4iXSwibmFtZXMiOlsiUXVlcnkiLCJyZXF1aXJlIiwiUmVhZGFibGUiLCJTdHJlYW0iLCJjb25zdHJ1Y3RvciIsImNtZFBhcmFtIiwiY29ubk9wdHMiLCJzb2NrZXQiLCJpblN0cmVhbSIsIm9iamVjdE1vZGUiLCJyZWFkIiwicmVzdW1lIiwib24iLCJtZXRhIiwiZW1pdCIsImVyciIsInB1c2giLCJjbG9zZSIsImhhbmRsZU5ld1Jvd3MiLCJiaW5kIiwicm93IiwicGF1c2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/cmd/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/command-parameter.js":
/*!*******************************************************!*\
  !*** ./node_modules/mariadb/lib/command-parameter.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\nclass CommandParameter {\n    constructor(sql, values, opts, callback){\n        this.sql = sql;\n        this.values = values;\n        this.opts = opts;\n        this.callback = callback;\n    }\n}\nmodule.exports = CommandParameter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29tbWFuZC1wYXJhbWV0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQTtJQUNKQyxZQUFZQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxRQUFRLENBQUU7UUFDdkMsSUFBSSxDQUFDSCxHQUFHLEdBQUdBO1FBQ1gsSUFBSSxDQUFDQyxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxRQUFRLEdBQUdBO0lBQ2xCO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHUCIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvbGliL2NvbW1hbmQtcGFyYW1ldGVyLmpzPzk3MDUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBDb21tYW5kUGFyYW1ldGVyIHtcbiAgY29uc3RydWN0b3Ioc3FsLCB2YWx1ZXMsIG9wdHMsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5zcWwgPSBzcWw7XG4gICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21tYW5kUGFyYW1ldGVyO1xuIl0sIm5hbWVzIjpbIkNvbW1hbmRQYXJhbWV0ZXIiLCJjb25zdHJ1Y3RvciIsInNxbCIsInZhbHVlcyIsIm9wdHMiLCJjYWxsYmFjayIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/command-parameter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/config/cluster-options.js":
/*!************************************************************!*\
  !*** ./node_modules/mariadb/lib/config/cluster-options.js ***!
  \************************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nclass ClusterOptions {\n    constructor(opts){\n        if (opts) {\n            this.canRetry = opts.canRetry === undefined ? true : opts.canRetry;\n            this.removeNodeErrorCount = opts.removeNodeErrorCount || Infinity;\n            this.restoreNodeTimeout = opts.restoreNodeTimeout || 1000;\n            this.defaultSelector = opts.defaultSelector || \"RR\";\n        } else {\n            this.canRetry = true;\n            this.removeNodeErrorCount = Infinity;\n            this.restoreNodeTimeout = 1000;\n            this.defaultSelector = \"RR\";\n        }\n    }\n}\nmodule.exports = ClusterOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29uZmlnL2NsdXN0ZXItb3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEO0FBRUEsTUFBTUE7SUFDSkMsWUFBWUMsSUFBSSxDQUFFO1FBQ2hCLElBQUlBLE1BQU07WUFDUixJQUFJLENBQUNDLFFBQVEsR0FBR0QsS0FBS0MsUUFBUSxLQUFLQyxZQUFZLE9BQU9GLEtBQUtDLFFBQVE7WUFDbEUsSUFBSSxDQUFDRSxvQkFBb0IsR0FBR0gsS0FBS0csb0JBQW9CLElBQUlDO1lBQ3pELElBQUksQ0FBQ0Msa0JBQWtCLEdBQUdMLEtBQUtLLGtCQUFrQixJQUFJO1lBQ3JELElBQUksQ0FBQ0MsZUFBZSxHQUFHTixLQUFLTSxlQUFlLElBQUk7UUFDakQsT0FBTztZQUNMLElBQUksQ0FBQ0wsUUFBUSxHQUFHO1lBQ2hCLElBQUksQ0FBQ0Usb0JBQW9CLEdBQUdDO1lBQzVCLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUc7WUFDMUIsSUFBSSxDQUFDQyxlQUFlLEdBQUc7UUFDekI7SUFDRjtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZm5leHRqcy8uL25vZGVfbW9kdWxlcy9tYXJpYWRiL2xpYi9jb25maWcvY2x1c3Rlci1vcHRpb25zLmpzPzQ4NDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBDbHVzdGVyT3B0aW9ucyB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBpZiAob3B0cykge1xuICAgICAgdGhpcy5jYW5SZXRyeSA9IG9wdHMuY2FuUmV0cnkgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRzLmNhblJldHJ5O1xuICAgICAgdGhpcy5yZW1vdmVOb2RlRXJyb3JDb3VudCA9IG9wdHMucmVtb3ZlTm9kZUVycm9yQ291bnQgfHwgSW5maW5pdHk7XG4gICAgICB0aGlzLnJlc3RvcmVOb2RlVGltZW91dCA9IG9wdHMucmVzdG9yZU5vZGVUaW1lb3V0IHx8IDEwMDA7XG4gICAgICB0aGlzLmRlZmF1bHRTZWxlY3RvciA9IG9wdHMuZGVmYXVsdFNlbGVjdG9yIHx8ICdSUic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2FuUmV0cnkgPSB0cnVlO1xuICAgICAgdGhpcy5yZW1vdmVOb2RlRXJyb3JDb3VudCA9IEluZmluaXR5O1xuICAgICAgdGhpcy5yZXN0b3JlTm9kZVRpbWVvdXQgPSAxMDAwO1xuICAgICAgdGhpcy5kZWZhdWx0U2VsZWN0b3IgPSAnUlInO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENsdXN0ZXJPcHRpb25zO1xuIl0sIm5hbWVzIjpbIkNsdXN0ZXJPcHRpb25zIiwiY29uc3RydWN0b3IiLCJvcHRzIiwiY2FuUmV0cnkiLCJ1bmRlZmluZWQiLCJyZW1vdmVOb2RlRXJyb3JDb3VudCIsIkluZmluaXR5IiwicmVzdG9yZU5vZGVUaW1lb3V0IiwiZGVmYXVsdFNlbGVjdG9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/config/cluster-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/config/connection-options.js":
/*!***************************************************************!*\
  !*** ./node_modules/mariadb/lib/config/connection-options.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Collations = __webpack_require__(/*! ../const/collations.js */ \"(rsc)/./node_modules/mariadb/lib/const/collations.js\");\nconst urlFormat = /mariadb:\\/\\/(([^/@:]+)?(:([^/]+))?@)?(([^/:]+)(:([0-9]+))?)\\/([^?]+)(\\?(.*))?$/;\n/**\n * Default option similar to mysql driver.\n * known differences\n * - no queryFormat option. Permitting client to parse is a security risk. Best is to give SQL + parameters\n *   Only possible Objects are :\n *   - Buffer\n *   - Date\n *   - Object that implement toSqlString function\n *   - JSON object\n * + rowsAsArray (in mysql2) permit to have rows by index, not by name. Avoiding to parsing metadata string => faster\n */ class ConnectionOptions {\n    constructor(opts){\n        if (typeof opts === \"string\") {\n            opts = ConnectionOptions.parse(opts);\n        }\n        if (!opts) opts = {};\n        this.host = opts.host || \"localhost\";\n        this.port = opts.port || 3306;\n        this.keepEof = opts.keepEof || false;\n        this.user = opts.user || process.env.USERNAME;\n        this.password = opts.password;\n        this.database = opts.database;\n        this.stream = opts.stream;\n        // log\n        this.debug = opts.debug || false;\n        this.debugCompress = opts.debugCompress || false;\n        this.debugLen = opts.debugLen || 256;\n        if (opts.logger) {\n            if (typeof opts.logger === \"function\") {\n                this.logger = {\n                    network: opts.logger,\n                    query: opts.logger,\n                    error: opts.logger,\n                    warning: opts.logger,\n                    logParam: true\n                };\n            } else {\n                this.logger = {\n                    network: opts.logger.network,\n                    query: opts.logger.query,\n                    error: opts.logger.error,\n                    warning: opts.logger.warning || console.log,\n                    logParam: opts.logger.logParam == null ? true : opts.logger.logParam\n                };\n            }\n        } else {\n            this.logger = {\n                network: null,\n                query: null,\n                error: null,\n                warning: console.log,\n                logParam: false\n            };\n            if ((this.debug || this.debugCompress) && !this.logger.network) {\n                this.logger.network = console.log;\n            }\n        }\n        this.debug = !!this.logger.network;\n        if (opts.charset && typeof opts.charset === \"string\") {\n            this.collation = Collations.fromCharset(opts.charset.toLowerCase());\n            if (this.collation === undefined) {\n                this.collation = Collations.fromName(opts.charset.toUpperCase());\n                if (this.collation !== undefined) {\n                    this.logger.warning(\"warning: please use option 'collation' \" + \"in replacement of 'charset' when using a collation name ('\" + opts.charset + \"')\\n\" + \"(collation looks like 'UTF8MB4_UNICODE_CI', charset like 'utf8').\");\n                } else {\n                    this.charset = opts.charset;\n                }\n            }\n        } else if (opts.collation && typeof opts.collation === \"string\") {\n            this.collation = Collations.fromName(opts.collation.toUpperCase());\n            if (this.collation === undefined) throw new RangeError(\"Unknown collation '\" + opts.collation + \"'\");\n        } else {\n            this.collation = opts.charsetNumber ? Collations.fromIndex(opts.charsetNumber) : undefined;\n        }\n        // connection options\n        this.initSql = opts.initSql;\n        this.connectTimeout = opts.connectTimeout === undefined ? 1000 : opts.connectTimeout;\n        this.connectAttributes = opts.connectAttributes || false;\n        this.compress = opts.compress || false;\n        this.rsaPublicKey = opts.rsaPublicKey;\n        this.cachingRsaPublicKey = opts.cachingRsaPublicKey;\n        this.allowPublicKeyRetrieval = opts.allowPublicKeyRetrieval || false;\n        this.forceVersionCheck = opts.forceVersionCheck || false;\n        this.maxAllowedPacket = opts.maxAllowedPacket;\n        this.permitConnectionWhenExpired = opts.permitConnectionWhenExpired || false;\n        this.pipelining = opts.pipelining;\n        this.timezone = opts.timezone || \"local\";\n        this.socketPath = opts.socketPath;\n        this.sessionVariables = opts.sessionVariables;\n        this.infileStreamFactory = opts.infileStreamFactory;\n        this.ssl = opts.ssl;\n        if (opts.ssl) {\n            if (typeof opts.ssl !== \"boolean\" && typeof opts.ssl !== \"string\") {\n                this.ssl.rejectUnauthorized = opts.ssl.rejectUnauthorized !== false;\n            }\n        }\n        // socket\n        this.queryTimeout = opts.queryTimeout === undefined ? 0 : opts.queryTimeout;\n        this.socketTimeout = opts.socketTimeout === undefined ? 0 : opts.socketTimeout;\n        this.keepAliveDelay = opts.keepAliveDelay === undefined ? 0 : opts.keepAliveDelay;\n        this.trace = opts.trace || false;\n        // result-set\n        this.checkDuplicate = opts.checkDuplicate === undefined ? true : opts.checkDuplicate;\n        this.dateStrings = opts.dateStrings || false;\n        this.foundRows = opts.foundRows === undefined || opts.foundRows;\n        this.metaAsArray = opts.metaAsArray || false;\n        this.metaEnumerable = opts.metaEnumerable || false;\n        this.multipleStatements = opts.multipleStatements || false;\n        this.namedPlaceholders = opts.namedPlaceholders || false;\n        this.nestTables = opts.nestTables;\n        this.autoJsonMap = opts.autoJsonMap === undefined ? true : opts.autoJsonMap;\n        this.bitOneIsBoolean = opts.bitOneIsBoolean === undefined ? true : opts.bitOneIsBoolean;\n        this.arrayParenthesis = opts.arrayParenthesis || false;\n        this.permitSetMultiParamEntries = opts.permitSetMultiParamEntries || false;\n        this.rowsAsArray = opts.rowsAsArray || false;\n        this.typeCast = opts.typeCast;\n        if (this.typeCast !== undefined && typeof this.typeCast !== \"function\") {\n            this.typeCast = undefined;\n        }\n        this.bulk = opts.bulk === undefined || opts.bulk;\n        this.checkNumberRange = opts.checkNumberRange || false;\n        // coherence check\n        if (opts.pipelining === undefined) {\n            this.permitLocalInfile = opts.permitLocalInfile || false;\n            this.pipelining = !this.permitLocalInfile;\n        } else {\n            this.pipelining = opts.pipelining;\n            if (opts.permitLocalInfile === true && this.pipelining) {\n                throw new Error(\"enabling options `permitLocalInfile` and `pipelining` is not possible, options are incompatible.\");\n            }\n            this.permitLocalInfile = this.pipelining ? false : opts.permitLocalInfile || false;\n        }\n        this.prepareCacheLength = opts.prepareCacheLength === undefined ? 256 : opts.prepareCacheLength;\n        this.restrictedAuth = opts.restrictedAuth;\n        if (this.restrictedAuth != null) {\n            if (!Array.isArray(this.restrictedAuth)) {\n                this.restrictedAuth = this.restrictedAuth.split(\",\");\n            }\n        }\n        // for compatibility with 2.x version and mysql/mysql2\n        this.bigIntAsNumber = opts.bigIntAsNumber || false;\n        this.insertIdAsNumber = opts.insertIdAsNumber || false;\n        this.decimalAsNumber = opts.decimalAsNumber || false;\n        this.supportBigNumbers = opts.supportBigNumbers || false;\n        this.bigNumberStrings = opts.bigNumberStrings || false;\n        if (this.maxAllowedPacket && !Number.isInteger(this.maxAllowedPacket)) {\n            throw new RangeError(\"maxAllowedPacket must be an integer. was '\" + this.maxAllowedPacket + \"'\");\n        }\n    }\n    /**\n   * When parsing from String, correcting type.\n   *\n   * @param opts options\n   * @return {opts}\n   */ static parseOptionDataType(opts) {\n        if (opts.bulk) opts.bulk = opts.bulk === \"true\";\n        if (opts.allowPublicKeyRetrieval) opts.allowPublicKeyRetrieval = opts.allowPublicKeyRetrieval === \"true\";\n        if (opts.insertIdAsNumber) opts.insertIdAsNumber = opts.insertIdAsNumber === \"true\";\n        if (opts.decimalAsNumber) opts.decimalAsNumber = opts.decimalAsNumber === \"true\";\n        if (opts.bigIntAsNumber) opts.bigIntAsNumber = opts.bigIntAsNumber === \"true\";\n        if (opts.charsetNumber && !isNaN(Number.parseInt(opts.charsetNumber))) {\n            opts.charsetNumber = Number.parseInt(opts.charsetNumber);\n        }\n        if (opts.compress) opts.compress = opts.compress === \"true\";\n        if (opts.connectAttributes) opts.connectAttributes = JSON.parse(opts.connectAttributes);\n        if (opts.connectTimeout) opts.connectTimeout = parseInt(opts.connectTimeout);\n        if (opts.keepAliveDelay) opts.keepAliveDelay = parseInt(opts.keepAliveDelay);\n        if (opts.socketTimeout) opts.socketTimeout = parseInt(opts.socketTimeout);\n        if (opts.dateStrings) opts.dateStrings = opts.dateStrings === \"true\";\n        if (opts.debug) opts.debug = opts.debug === \"true\";\n        if (opts.autoJsonMap) opts.autoJsonMap = opts.autoJsonMap === \"true\";\n        if (opts.arrayParenthesis) opts.arrayParenthesis = opts.arrayParenthesis === \"true\";\n        if (opts.checkDuplicate) opts.checkDuplicate = opts.checkDuplicate === \"true\";\n        if (opts.debugCompress) opts.debugCompress = opts.debugCompress === \"true\";\n        if (opts.debugLen) opts.debugLen = parseInt(opts.debugLen);\n        if (opts.prepareCacheLength) opts.prepareCacheLength = parseInt(opts.prepareCacheLength);\n        if (opts.queryTimeout) opts.queryTimeout = parseInt(opts.queryTimeout);\n        if (opts.foundRows) opts.foundRows = opts.foundRows === \"true\";\n        if (opts.maxAllowedPacket && !isNaN(Number.parseInt(opts.maxAllowedPacket))) opts.maxAllowedPacket = parseInt(opts.maxAllowedPacket);\n        if (opts.metaAsArray) opts.metaAsArray = opts.metaAsArray === \"true\";\n        if (opts.metaEnumerable) opts.metaEnumerable = opts.metaEnumerable === \"true\";\n        if (opts.multipleStatements) opts.multipleStatements = opts.multipleStatements === \"true\";\n        if (opts.namedPlaceholders) opts.namedPlaceholders = opts.namedPlaceholders === \"true\";\n        if (opts.nestTables) opts.nestTables = opts.nestTables === \"true\";\n        if (opts.permitSetMultiParamEntries) opts.permitSetMultiParamEntries = opts.permitSetMultiParamEntries === \"true\";\n        if (opts.pipelining) opts.pipelining = opts.pipelining === \"true\";\n        if (opts.forceVersionCheck) opts.forceVersionCheck = opts.forceVersionCheck === \"true\";\n        if (opts.rowsAsArray) opts.rowsAsArray = opts.rowsAsArray === \"true\";\n        if (opts.trace) opts.trace = opts.trace === \"true\";\n        if (opts.ssl && (opts.ssl === \"true\" || opts.ssl === \"false\")) opts.ssl = opts.ssl === \"true\";\n        if (opts.bitOneIsBoolean) opts.bitOneIsBoolean = opts.bitOneIsBoolean === \"true\";\n        return opts;\n    }\n    static parse(opts) {\n        const matchResults = opts.match(urlFormat);\n        if (!matchResults) {\n            throw new Error(`error parsing connection string '${opts}'. format must be 'mariadb://[<user>[:<password>]@]<host>[:<port>]/[<db>[?<opt1>=<value1>[&<opt2>=<value2>]]]'`);\n        }\n        const options = {\n            user: matchResults[2] ? decodeURIComponent(matchResults[2]) : undefined,\n            password: matchResults[4] ? decodeURIComponent(matchResults[4]) : undefined,\n            host: matchResults[6] ? decodeURIComponent(matchResults[6]) : matchResults[6],\n            port: matchResults[8] ? parseInt(matchResults[8]) : undefined,\n            database: matchResults[9] ? decodeURIComponent(matchResults[9]) : matchResults[9]\n        };\n        const variousOptsString = matchResults[11];\n        if (variousOptsString) {\n            const keyValues = variousOptsString.split(\"&\");\n            keyValues.forEach(function(keyVal) {\n                const equalIdx = keyVal.indexOf(\"=\");\n                if (equalIdx !== 1) {\n                    let val = keyVal.substring(equalIdx + 1);\n                    val = val ? decodeURIComponent(val) : undefined;\n                    options[keyVal.substring(0, equalIdx)] = val;\n                }\n            });\n        }\n        return this.parseOptionDataType(options);\n    }\n}\nmodule.exports = ConnectionOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29uZmlnL2Nvbm5lY3Rpb24tb3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEO0FBRUEsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFDM0IsTUFBTUMsWUFBWTtBQUVsQjs7Ozs7Ozs7OztDQVVDLEdBQ0QsTUFBTUM7SUFDSkMsWUFBWUMsSUFBSSxDQUFFO1FBQ2hCLElBQUksT0FBT0EsU0FBUyxVQUFVO1lBQzVCQSxPQUFPRixrQkFBa0JHLEtBQUssQ0FBQ0Q7UUFDakM7UUFFQSxJQUFJLENBQUNBLE1BQU1BLE9BQU8sQ0FBQztRQUNuQixJQUFJLENBQUNFLElBQUksR0FBR0YsS0FBS0UsSUFBSSxJQUFJO1FBQ3pCLElBQUksQ0FBQ0MsSUFBSSxHQUFHSCxLQUFLRyxJQUFJLElBQUk7UUFDekIsSUFBSSxDQUFDQyxPQUFPLEdBQUdKLEtBQUtJLE9BQU8sSUFBSTtRQUMvQixJQUFJLENBQUNDLElBQUksR0FBR0wsS0FBS0ssSUFBSSxJQUFJQyxRQUFRQyxHQUFHLENBQUNDLFFBQVE7UUFDN0MsSUFBSSxDQUFDQyxRQUFRLEdBQUdULEtBQUtTLFFBQVE7UUFDN0IsSUFBSSxDQUFDQyxRQUFRLEdBQUdWLEtBQUtVLFFBQVE7UUFDN0IsSUFBSSxDQUFDQyxNQUFNLEdBQUdYLEtBQUtXLE1BQU07UUFFekIsTUFBTTtRQUNOLElBQUksQ0FBQ0MsS0FBSyxHQUFHWixLQUFLWSxLQUFLLElBQUk7UUFDM0IsSUFBSSxDQUFDQyxhQUFhLEdBQUdiLEtBQUthLGFBQWEsSUFBSTtRQUMzQyxJQUFJLENBQUNDLFFBQVEsR0FBR2QsS0FBS2MsUUFBUSxJQUFJO1FBRWpDLElBQUlkLEtBQUtlLE1BQU0sRUFBRTtZQUNmLElBQUksT0FBT2YsS0FBS2UsTUFBTSxLQUFLLFlBQVk7Z0JBQ3JDLElBQUksQ0FBQ0EsTUFBTSxHQUFHO29CQUNaQyxTQUFTaEIsS0FBS2UsTUFBTTtv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UCxtQkFBbUJPLE9BQU92RTtvQkFDdEMrRCxPQUFPLENBQUNLLE9BQU9JLFNBQVMsQ0FBQyxHQUFHSCxVQUFVLEdBQUdFO2dCQUMzQztZQUNGO1FBQ0Y7UUFFQSxPQUFPLElBQUksQ0FBQ2QsbUJBQW1CLENBQUNNO0lBQ2xDO0FBQ0Y7QUFFQVUsT0FBT0MsT0FBTyxHQUFHdkciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZm5leHRqcy8uL25vZGVfbW9kdWxlcy9tYXJpYWRiL2xpYi9jb25maWcvY29ubmVjdGlvbi1vcHRpb25zLmpzPzRjOGUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDb2xsYXRpb25zID0gcmVxdWlyZSgnLi4vY29uc3QvY29sbGF0aW9ucy5qcycpO1xuY29uc3QgdXJsRm9ybWF0ID0gL21hcmlhZGI6XFwvXFwvKChbXi9AOl0rKT8oOihbXi9dKykpP0ApPygoW14vOl0rKSg6KFswLTldKykpPylcXC8oW14/XSspKFxcPyguKikpPyQvO1xuXG4vKipcbiAqIERlZmF1bHQgb3B0aW9uIHNpbWlsYXIgdG8gbXlzcWwgZHJpdmVyLlxuICoga25vd24gZGlmZmVyZW5jZXNcbiAqIC0gbm8gcXVlcnlGb3JtYXQgb3B0aW9uLiBQZXJtaXR0aW5nIGNsaWVudCB0byBwYXJzZSBpcyBhIHNlY3VyaXR5IHJpc2suIEJlc3QgaXMgdG8gZ2l2ZSBTUUwgKyBwYXJhbWV0ZXJzXG4gKiAgIE9ubHkgcG9zc2libGUgT2JqZWN0cyBhcmUgOlxuICogICAtIEJ1ZmZlclxuICogICAtIERhdGVcbiAqICAgLSBPYmplY3QgdGhhdCBpbXBsZW1lbnQgdG9TcWxTdHJpbmcgZnVuY3Rpb25cbiAqICAgLSBKU09OIG9iamVjdFxuICogKyByb3dzQXNBcnJheSAoaW4gbXlzcWwyKSBwZXJtaXQgdG8gaGF2ZSByb3dzIGJ5IGluZGV4LCBub3QgYnkgbmFtZS4gQXZvaWRpbmcgdG8gcGFyc2luZyBtZXRhZGF0YSBzdHJpbmcgPT4gZmFzdGVyXG4gKi9cbmNsYXNzIENvbm5lY3Rpb25PcHRpb25zIHtcbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdHMgPSBDb25uZWN0aW9uT3B0aW9ucy5wYXJzZShvcHRzKTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdHMpIG9wdHMgPSB7fTtcbiAgICB0aGlzLmhvc3QgPSBvcHRzLmhvc3QgfHwgJ2xvY2FsaG9zdCc7XG4gICAgdGhpcy5wb3J0ID0gb3B0cy5wb3J0IHx8IDMzMDY7XG4gICAgdGhpcy5rZWVwRW9mID0gb3B0cy5rZWVwRW9mIHx8IGZhbHNlO1xuICAgIHRoaXMudXNlciA9IG9wdHMudXNlciB8fCBwcm9jZXNzLmVudi5VU0VSTkFNRTtcbiAgICB0aGlzLnBhc3N3b3JkID0gb3B0cy5wYXNzd29yZDtcbiAgICB0aGlzLmRhdGFiYXNlID0gb3B0cy5kYXRhYmFzZTtcbiAgICB0aGlzLnN0cmVhbSA9IG9wdHMuc3RyZWFtO1xuXG4gICAgLy8gbG9nXG4gICAgdGhpcy5kZWJ1ZyA9IG9wdHMuZGVidWcgfHwgZmFsc2U7XG4gICAgdGhpcy5kZWJ1Z0NvbXByZXNzID0gb3B0cy5kZWJ1Z0NvbXByZXNzIHx8IGZhbHNlO1xuICAgIHRoaXMuZGVidWdMZW4gPSBvcHRzLmRlYnVnTGVuIHx8IDI1NjtcblxuICAgIGlmIChvcHRzLmxvZ2dlcikge1xuICAgICAgaWYgKHR5cGVvZiBvcHRzLmxvZ2dlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLmxvZ2dlciA9IHtcbiAgICAgICAgICBuZXR3b3JrOiBvcHRzLmxvZ2dlcixcbiAgICAgICAgICBxdWVyeTogb3B0cy5sb2dnZXIsXG4gICAgICAgICAgZXJyb3I6IG9wdHMubG9nZ2VyLFxuICAgICAgICAgIHdhcm5pbmc6IG9wdHMubG9nZ2VyLFxuICAgICAgICAgIGxvZ1BhcmFtOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxvZ2dlciA9IHtcbiAgICAgICAgICBuZXR3b3JrOiBvcHRzLmxvZ2dlci5uZXR3b3JrLFxuICAgICAgICAgIHF1ZXJ5OiBvcHRzLmxvZ2dlci5xdWVyeSxcbiAgICAgICAgICBlcnJvcjogb3B0cy5sb2dnZXIuZXJyb3IsXG4gICAgICAgICAgd2FybmluZzogb3B0cy5sb2dnZXIud2FybmluZyB8fCBjb25zb2xlLmxvZyxcbiAgICAgICAgICBsb2dQYXJhbTogb3B0cy5sb2dnZXIubG9nUGFyYW0gPT0gbnVsbCA/IHRydWUgOiBvcHRzLmxvZ2dlci5sb2dQYXJhbVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvZ2dlciA9IHsgbmV0d29yazogbnVsbCwgcXVlcnk6IG51bGwsIGVycm9yOiBudWxsLCB3YXJuaW5nOiBjb25zb2xlLmxvZywgbG9nUGFyYW06IGZhbHNlIH07XG4gICAgICBpZiAoKHRoaXMuZGVidWcgfHwgdGhpcy5kZWJ1Z0NvbXByZXNzKSAmJiAhdGhpcy5sb2dnZXIubmV0d29yaykge1xuICAgICAgICB0aGlzLmxvZ2dlci5uZXR3b3JrID0gY29uc29sZS5sb2c7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZGVidWcgPSAhIXRoaXMubG9nZ2VyLm5ldHdvcms7XG5cbiAgICBpZiAob3B0cy5jaGFyc2V0ICYmIHR5cGVvZiBvcHRzLmNoYXJzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmNvbGxhdGlvbiA9IENvbGxhdGlvbnMuZnJvbUNoYXJzZXQob3B0cy5jaGFyc2V0LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgaWYgKHRoaXMuY29sbGF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5jb2xsYXRpb24gPSBDb2xsYXRpb25zLmZyb21OYW1lKG9wdHMuY2hhcnNldC50b1VwcGVyQ2FzZSgpKTtcbiAgICAgICAgaWYgKHRoaXMuY29sbGF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuaW5nKFxuICAgICAgICAgICAgXCJ3YXJuaW5nOiBwbGVhc2UgdXNlIG9wdGlvbiAnY29sbGF0aW9uJyBcIiArXG4gICAgICAgICAgICAgIFwiaW4gcmVwbGFjZW1lbnQgb2YgJ2NoYXJzZXQnIHdoZW4gdXNpbmcgYSBjb2xsYXRpb24gbmFtZSAoJ1wiICtcbiAgICAgICAgICAgICAgb3B0cy5jaGFyc2V0ICtcbiAgICAgICAgICAgICAgXCInKVxcblwiICtcbiAgICAgICAgICAgICAgXCIoY29sbGF0aW9uIGxvb2tzIGxpa2UgJ1VURjhNQjRfVU5JQ09ERV9DSScsIGNoYXJzZXQgbGlrZSAndXRmOCcpLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNoYXJzZXQgPSBvcHRzLmNoYXJzZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wdHMuY29sbGF0aW9uICYmIHR5cGVvZiBvcHRzLmNvbGxhdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuY29sbGF0aW9uID0gQ29sbGF0aW9ucy5mcm9tTmFtZShvcHRzLmNvbGxhdGlvbi50b1VwcGVyQ2FzZSgpKTtcbiAgICAgIGlmICh0aGlzLmNvbGxhdGlvbiA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVua25vd24gY29sbGF0aW9uICdcIiArIG9wdHMuY29sbGF0aW9uICsgXCInXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbGxhdGlvbiA9IG9wdHMuY2hhcnNldE51bWJlciA/IENvbGxhdGlvbnMuZnJvbUluZGV4KG9wdHMuY2hhcnNldE51bWJlcikgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gY29ubmVjdGlvbiBvcHRpb25zXG4gICAgdGhpcy5pbml0U3FsID0gb3B0cy5pbml0U3FsO1xuICAgIHRoaXMuY29ubmVjdFRpbWVvdXQgPSBvcHRzLmNvbm5lY3RUaW1lb3V0ID09PSB1bmRlZmluZWQgPyAxMDAwIDogb3B0cy5jb25uZWN0VGltZW91dDtcbiAgICB0aGlzLmNvbm5lY3RBdHRyaWJ1dGVzID0gb3B0cy5jb25uZWN0QXR0cmlidXRlcyB8fCBmYWxzZTtcbiAgICB0aGlzLmNvbXByZXNzID0gb3B0cy5jb21wcmVzcyB8fCBmYWxzZTtcbiAgICB0aGlzLnJzYVB1YmxpY0tleSA9IG9wdHMucnNhUHVibGljS2V5O1xuICAgIHRoaXMuY2FjaGluZ1JzYVB1YmxpY0tleSA9IG9wdHMuY2FjaGluZ1JzYVB1YmxpY0tleTtcbiAgICB0aGlzLmFsbG93UHVibGljS2V5UmV0cmlldmFsID0gb3B0cy5hbGxvd1B1YmxpY0tleVJldHJpZXZhbCB8fCBmYWxzZTtcbiAgICB0aGlzLmZvcmNlVmVyc2lvbkNoZWNrID0gb3B0cy5mb3JjZVZlcnNpb25DaGVjayB8fCBmYWxzZTtcbiAgICB0aGlzLm1heEFsbG93ZWRQYWNrZXQgPSBvcHRzLm1heEFsbG93ZWRQYWNrZXQ7XG4gICAgdGhpcy5wZXJtaXRDb25uZWN0aW9uV2hlbkV4cGlyZWQgPSBvcHRzLnBlcm1pdENvbm5lY3Rpb25XaGVuRXhwaXJlZCB8fCBmYWxzZTtcbiAgICB0aGlzLnBpcGVsaW5pbmcgPSBvcHRzLnBpcGVsaW5pbmc7XG4gICAgdGhpcy50aW1lem9uZSA9IG9wdHMudGltZXpvbmUgfHwgJ2xvY2FsJztcbiAgICB0aGlzLnNvY2tldFBhdGggPSBvcHRzLnNvY2tldFBhdGg7XG4gICAgdGhpcy5zZXNzaW9uVmFyaWFibGVzID0gb3B0cy5zZXNzaW9uVmFyaWFibGVzO1xuICAgIHRoaXMuaW5maWxlU3RyZWFtRmFjdG9yeSA9IG9wdHMuaW5maWxlU3RyZWFtRmFjdG9yeTtcbiAgICB0aGlzLnNzbCA9IG9wdHMuc3NsO1xuICAgIGlmIChvcHRzLnNzbCkge1xuICAgICAgaWYgKHR5cGVvZiBvcHRzLnNzbCAhPT0gJ2Jvb2xlYW4nICYmIHR5cGVvZiBvcHRzLnNzbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5zc2wucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5zc2wucmVqZWN0VW5hdXRob3JpemVkICE9PSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBzb2NrZXRcbiAgICB0aGlzLnF1ZXJ5VGltZW91dCA9IG9wdHMucXVlcnlUaW1lb3V0ID09PSB1bmRlZmluZWQgPyAwIDogb3B0cy5xdWVyeVRpbWVvdXQ7XG4gICAgdGhpcy5zb2NrZXRUaW1lb3V0ID0gb3B0cy5zb2NrZXRUaW1lb3V0ID09PSB1bmRlZmluZWQgPyAwIDogb3B0cy5zb2NrZXRUaW1lb3V0O1xuICAgIHRoaXMua2VlcEFsaXZlRGVsYXkgPSBvcHRzLmtlZXBBbGl2ZURlbGF5ID09PSB1bmRlZmluZWQgPyAwIDogb3B0cy5rZWVwQWxpdmVEZWxheTtcblxuICAgIHRoaXMudHJhY2UgPSBvcHRzLnRyYWNlIHx8IGZhbHNlO1xuXG4gICAgLy8gcmVzdWx0LXNldFxuICAgIHRoaXMuY2hlY2tEdXBsaWNhdGUgPSBvcHRzLmNoZWNrRHVwbGljYXRlID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0cy5jaGVja0R1cGxpY2F0ZTtcbiAgICB0aGlzLmRhdGVTdHJpbmdzID0gb3B0cy5kYXRlU3RyaW5ncyB8fCBmYWxzZTtcbiAgICB0aGlzLmZvdW5kUm93cyA9IG9wdHMuZm91bmRSb3dzID09PSB1bmRlZmluZWQgfHwgb3B0cy5mb3VuZFJvd3M7XG4gICAgdGhpcy5tZXRhQXNBcnJheSA9IG9wdHMubWV0YUFzQXJyYXkgfHwgZmFsc2U7XG4gICAgdGhpcy5tZXRhRW51bWVyYWJsZSA9IG9wdHMubWV0YUVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgdGhpcy5tdWx0aXBsZVN0YXRlbWVudHMgPSBvcHRzLm11bHRpcGxlU3RhdGVtZW50cyB8fCBmYWxzZTtcbiAgICB0aGlzLm5hbWVkUGxhY2Vob2xkZXJzID0gb3B0cy5uYW1lZFBsYWNlaG9sZGVycyB8fCBmYWxzZTtcbiAgICB0aGlzLm5lc3RUYWJsZXMgPSBvcHRzLm5lc3RUYWJsZXM7XG4gICAgdGhpcy5hdXRvSnNvbk1hcCA9IG9wdHMuYXV0b0pzb25NYXAgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRzLmF1dG9Kc29uTWFwO1xuICAgIHRoaXMuYml0T25lSXNCb29sZWFuID0gb3B0cy5iaXRPbmVJc0Jvb2xlYW4gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRzLmJpdE9uZUlzQm9vbGVhbjtcbiAgICB0aGlzLmFycmF5UGFyZW50aGVzaXMgPSBvcHRzLmFycmF5UGFyZW50aGVzaXMgfHwgZmFsc2U7XG4gICAgdGhpcy5wZXJtaXRTZXRNdWx0aVBhcmFtRW50cmllcyA9IG9wdHMucGVybWl0U2V0TXVsdGlQYXJhbUVudHJpZXMgfHwgZmFsc2U7XG4gICAgdGhpcy5yb3dzQXNBcnJheSA9IG9wdHMucm93c0FzQXJyYXkgfHwgZmFsc2U7XG4gICAgdGhpcy50eXBlQ2FzdCA9IG9wdHMudHlwZUNhc3Q7XG4gICAgaWYgKHRoaXMudHlwZUNhc3QgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdGhpcy50eXBlQ2FzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy50eXBlQ2FzdCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhpcy5idWxrID0gb3B0cy5idWxrID09PSB1bmRlZmluZWQgfHwgb3B0cy5idWxrO1xuICAgIHRoaXMuY2hlY2tOdW1iZXJSYW5nZSA9IG9wdHMuY2hlY2tOdW1iZXJSYW5nZSB8fCBmYWxzZTtcblxuICAgIC8vIGNvaGVyZW5jZSBjaGVja1xuICAgIGlmIChvcHRzLnBpcGVsaW5pbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5wZXJtaXRMb2NhbEluZmlsZSA9IG9wdHMucGVybWl0TG9jYWxJbmZpbGUgfHwgZmFsc2U7XG4gICAgICB0aGlzLnBpcGVsaW5pbmcgPSAhdGhpcy5wZXJtaXRMb2NhbEluZmlsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5waXBlbGluaW5nID0gb3B0cy5waXBlbGluaW5nO1xuICAgICAgaWYgKG9wdHMucGVybWl0TG9jYWxJbmZpbGUgPT09IHRydWUgJiYgdGhpcy5waXBlbGluaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnZW5hYmxpbmcgb3B0aW9ucyBgcGVybWl0TG9jYWxJbmZpbGVgIGFuZCBgcGlwZWxpbmluZ2AgaXMgbm90IHBvc3NpYmxlLCBvcHRpb25zIGFyZSBpbmNvbXBhdGlibGUuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhpcy5wZXJtaXRMb2NhbEluZmlsZSA9IHRoaXMucGlwZWxpbmluZyA/IGZhbHNlIDogb3B0cy5wZXJtaXRMb2NhbEluZmlsZSB8fCBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5wcmVwYXJlQ2FjaGVMZW5ndGggPSBvcHRzLnByZXBhcmVDYWNoZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gMjU2IDogb3B0cy5wcmVwYXJlQ2FjaGVMZW5ndGg7XG4gICAgdGhpcy5yZXN0cmljdGVkQXV0aCA9IG9wdHMucmVzdHJpY3RlZEF1dGg7XG4gICAgaWYgKHRoaXMucmVzdHJpY3RlZEF1dGggIT0gbnVsbCkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMucmVzdHJpY3RlZEF1dGgpKSB7XG4gICAgICAgIHRoaXMucmVzdHJpY3RlZEF1dGggPSB0aGlzLnJlc3RyaWN0ZWRBdXRoLnNwbGl0KCcsJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCAyLnggdmVyc2lvbiBhbmQgbXlzcWwvbXlzcWwyXG4gICAgdGhpcy5iaWdJbnRBc051bWJlciA9IG9wdHMuYmlnSW50QXNOdW1iZXIgfHwgZmFsc2U7XG4gICAgdGhpcy5pbnNlcnRJZEFzTnVtYmVyID0gb3B0cy5pbnNlcnRJZEFzTnVtYmVyIHx8IGZhbHNlO1xuICAgIHRoaXMuZGVjaW1hbEFzTnVtYmVyID0gb3B0cy5kZWNpbWFsQXNOdW1iZXIgfHwgZmFsc2U7XG4gICAgdGhpcy5zdXBwb3J0QmlnTnVtYmVycyA9IG9wdHMuc3VwcG9ydEJpZ051bWJlcnMgfHwgZmFsc2U7XG4gICAgdGhpcy5iaWdOdW1iZXJTdHJpbmdzID0gb3B0cy5iaWdOdW1iZXJTdHJpbmdzIHx8IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMubWF4QWxsb3dlZFBhY2tldCAmJiAhTnVtYmVyLmlzSW50ZWdlcih0aGlzLm1heEFsbG93ZWRQYWNrZXQpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm1heEFsbG93ZWRQYWNrZXQgbXVzdCBiZSBhbiBpbnRlZ2VyLiB3YXMgJ1wiICsgdGhpcy5tYXhBbGxvd2VkUGFja2V0ICsgXCInXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHBhcnNpbmcgZnJvbSBTdHJpbmcsIGNvcnJlY3RpbmcgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIG9wdHMgb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtvcHRzfVxuICAgKi9cbiAgc3RhdGljIHBhcnNlT3B0aW9uRGF0YVR5cGUob3B0cykge1xuICAgIGlmIChvcHRzLmJ1bGspIG9wdHMuYnVsayA9IG9wdHMuYnVsayA9PT0gJ3RydWUnO1xuICAgIGlmIChvcHRzLmFsbG93UHVibGljS2V5UmV0cmlldmFsKSBvcHRzLmFsbG93UHVibGljS2V5UmV0cmlldmFsID0gb3B0cy5hbGxvd1B1YmxpY0tleVJldHJpZXZhbCA9PT0gJ3RydWUnO1xuXG4gICAgaWYgKG9wdHMuaW5zZXJ0SWRBc051bWJlcikgb3B0cy5pbnNlcnRJZEFzTnVtYmVyID0gb3B0cy5pbnNlcnRJZEFzTnVtYmVyID09PSAndHJ1ZSc7XG4gICAgaWYgKG9wdHMuZGVjaW1hbEFzTnVtYmVyKSBvcHRzLmRlY2ltYWxBc051bWJlciA9IG9wdHMuZGVjaW1hbEFzTnVtYmVyID09PSAndHJ1ZSc7XG4gICAgaWYgKG9wdHMuYmlnSW50QXNOdW1iZXIpIG9wdHMuYmlnSW50QXNOdW1iZXIgPSBvcHRzLmJpZ0ludEFzTnVtYmVyID09PSAndHJ1ZSc7XG4gICAgaWYgKG9wdHMuY2hhcnNldE51bWJlciAmJiAhaXNOYU4oTnVtYmVyLnBhcnNlSW50KG9wdHMuY2hhcnNldE51bWJlcikpKSB7XG4gICAgICBvcHRzLmNoYXJzZXROdW1iZXIgPSBOdW1iZXIucGFyc2VJbnQob3B0cy5jaGFyc2V0TnVtYmVyKTtcbiAgICB9XG4gICAgaWYgKG9wdHMuY29tcHJlc3MpIG9wdHMuY29tcHJlc3MgPSBvcHRzLmNvbXByZXNzID09PSAndHJ1ZSc7XG4gICAgaWYgKG9wdHMuY29ubmVjdEF0dHJpYnV0ZXMpIG9wdHMuY29ubmVjdEF0dHJpYnV0ZXMgPSBKU09OLnBhcnNlKG9wdHMuY29ubmVjdEF0dHJpYnV0ZXMpO1xuICAgIGlmIChvcHRzLmNvbm5lY3RUaW1lb3V0KSBvcHRzLmNvbm5lY3RUaW1lb3V0ID0gcGFyc2VJbnQob3B0cy5jb25uZWN0VGltZW91dCk7XG4gICAgaWYgKG9wdHMua2VlcEFsaXZlRGVsYXkpIG9wdHMua2VlcEFsaXZlRGVsYXkgPSBwYXJzZUludChvcHRzLmtlZXBBbGl2ZURlbGF5KTtcbiAgICBpZiAob3B0cy5zb2NrZXRUaW1lb3V0KSBvcHRzLnNvY2tldFRpbWVvdXQgPSBwYXJzZUludChvcHRzLnNvY2tldFRpbWVvdXQpO1xuICAgIGlmIChvcHRzLmRhdGVTdHJpbmdzKSBvcHRzLmRhdGVTdHJpbmdzID0gb3B0cy5kYXRlU3RyaW5ncyA9PT0gJ3RydWUnO1xuICAgIGlmIChvcHRzLmRlYnVnKSBvcHRzLmRlYnVnID0gb3B0cy5kZWJ1ZyA9PT0gJ3RydWUnO1xuICAgIGlmIChvcHRzLmF1dG9Kc29uTWFwKSBvcHRzLmF1dG9Kc29uTWFwID0gb3B0cy5hdXRvSnNvbk1hcCA9PT0gJ3RydWUnO1xuICAgIGlmIChvcHRzLmFycmF5UGFyZW50aGVzaXMpIG9wdHMuYXJyYXlQYXJlbnRoZXNpcyA9IG9wdHMuYXJyYXlQYXJlbnRoZXNpcyA9PT0gJ3RydWUnO1xuXG4gICAgaWYgKG9wdHMuY2hlY2tEdXBsaWNhdGUpIG9wdHMuY2hlY2tEdXBsaWNhdGUgPSBvcHRzLmNoZWNrRHVwbGljYXRlID09PSAndHJ1ZSc7XG4gICAgaWYgKG9wdHMuZGVidWdDb21wcmVzcykgb3B0cy5kZWJ1Z0NvbXByZXNzID0gb3B0cy5kZWJ1Z0NvbXByZXNzID09PSAndHJ1ZSc7XG4gICAgaWYgKG9wdHMuZGVidWdMZW4pIG9wdHMuZGVidWdMZW4gPSBwYXJzZUludChvcHRzLmRlYnVnTGVuKTtcbiAgICBpZiAob3B0cy5wcmVwYXJlQ2FjaGVMZW5ndGgpIG9wdHMucHJlcGFyZUNhY2hlTGVuZ3RoID0gcGFyc2VJbnQob3B0cy5wcmVwYXJlQ2FjaGVMZW5ndGgpO1xuICAgIGlmIChvcHRzLnF1ZXJ5VGltZW91dCkgb3B0cy5xdWVyeVRpbWVvdXQgPSBwYXJzZUludChvcHRzLnF1ZXJ5VGltZW91dCk7XG4gICAgaWYgKG9wdHMuZm91bmRSb3dzKSBvcHRzLmZvdW5kUm93cyA9IG9wdHMuZm91bmRSb3dzID09PSAndHJ1ZSc7XG4gICAgaWYgKG9wdHMubWF4QWxsb3dlZFBhY2tldCAmJiAhaXNOYU4oTnVtYmVyLnBhcnNlSW50KG9wdHMubWF4QWxsb3dlZFBhY2tldCkpKVxuICAgICAgb3B0cy5tYXhBbGxvd2VkUGFja2V0ID0gcGFyc2VJbnQob3B0cy5tYXhBbGxvd2VkUGFja2V0KTtcbiAgICBpZiAob3B0cy5tZXRhQXNBcnJheSkgb3B0cy5tZXRhQXNBcnJheSA9IG9wdHMubWV0YUFzQXJyYXkgPT09ICd0cnVlJztcbiAgICBpZiAob3B0cy5tZXRhRW51bWVyYWJsZSkgb3B0cy5tZXRhRW51bWVyYWJsZSA9IG9wdHMubWV0YUVudW1lcmFibGUgPT09ICd0cnVlJztcbiAgICBpZiAob3B0cy5tdWx0aXBsZVN0YXRlbWVudHMpIG9wdHMubXVsdGlwbGVTdGF0ZW1lbnRzID0gb3B0cy5tdWx0aXBsZVN0YXRlbWVudHMgPT09ICd0cnVlJztcbiAgICBpZiAob3B0cy5uYW1lZFBsYWNlaG9sZGVycykgb3B0cy5uYW1lZFBsYWNlaG9sZGVycyA9IG9wdHMubmFtZWRQbGFjZWhvbGRlcnMgPT09ICd0cnVlJztcbiAgICBpZiAob3B0cy5uZXN0VGFibGVzKSBvcHRzLm5lc3RUYWJsZXMgPSBvcHRzLm5lc3RUYWJsZXMgPT09ICd0cnVlJztcbiAgICBpZiAob3B0cy5wZXJtaXRTZXRNdWx0aVBhcmFtRW50cmllcykgb3B0cy5wZXJtaXRTZXRNdWx0aVBhcmFtRW50cmllcyA9IG9wdHMucGVybWl0U2V0TXVsdGlQYXJhbUVudHJpZXMgPT09ICd0cnVlJztcbiAgICBpZiAob3B0cy5waXBlbGluaW5nKSBvcHRzLnBpcGVsaW5pbmcgPSBvcHRzLnBpcGVsaW5pbmcgPT09ICd0cnVlJztcbiAgICBpZiAob3B0cy5mb3JjZVZlcnNpb25DaGVjaykgb3B0cy5mb3JjZVZlcnNpb25DaGVjayA9IG9wdHMuZm9yY2VWZXJzaW9uQ2hlY2sgPT09ICd0cnVlJztcbiAgICBpZiAob3B0cy5yb3dzQXNBcnJheSkgb3B0cy5yb3dzQXNBcnJheSA9IG9wdHMucm93c0FzQXJyYXkgPT09ICd0cnVlJztcbiAgICBpZiAob3B0cy50cmFjZSkgb3B0cy50cmFjZSA9IG9wdHMudHJhY2UgPT09ICd0cnVlJztcbiAgICBpZiAob3B0cy5zc2wgJiYgKG9wdHMuc3NsID09PSAndHJ1ZScgfHwgb3B0cy5zc2wgPT09ICdmYWxzZScpKSBvcHRzLnNzbCA9IG9wdHMuc3NsID09PSAndHJ1ZSc7XG4gICAgaWYgKG9wdHMuYml0T25lSXNCb29sZWFuKSBvcHRzLmJpdE9uZUlzQm9vbGVhbiA9IG9wdHMuYml0T25lSXNCb29sZWFuID09PSAndHJ1ZSc7XG4gICAgcmV0dXJuIG9wdHM7XG4gIH1cblxuICBzdGF0aWMgcGFyc2Uob3B0cykge1xuICAgIGNvbnN0IG1hdGNoUmVzdWx0cyA9IG9wdHMubWF0Y2godXJsRm9ybWF0KTtcblxuICAgIGlmICghbWF0Y2hSZXN1bHRzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBlcnJvciBwYXJzaW5nIGNvbm5lY3Rpb24gc3RyaW5nICcke29wdHN9Jy4gZm9ybWF0IG11c3QgYmUgJ21hcmlhZGI6Ly9bPHVzZXI+Wzo8cGFzc3dvcmQ+XUBdPGhvc3Q+Wzo8cG9ydD5dL1s8ZGI+Wz88b3B0MT49PHZhbHVlMT5bJjxvcHQyPj08dmFsdWUyPl1dXSdgXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgdXNlcjogbWF0Y2hSZXN1bHRzWzJdID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoUmVzdWx0c1syXSkgOiB1bmRlZmluZWQsXG4gICAgICBwYXNzd29yZDogbWF0Y2hSZXN1bHRzWzRdID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoUmVzdWx0c1s0XSkgOiB1bmRlZmluZWQsXG4gICAgICBob3N0OiBtYXRjaFJlc3VsdHNbNl0gPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hSZXN1bHRzWzZdKSA6IG1hdGNoUmVzdWx0c1s2XSxcbiAgICAgIHBvcnQ6IG1hdGNoUmVzdWx0c1s4XSA/IHBhcnNlSW50KG1hdGNoUmVzdWx0c1s4XSkgOiB1bmRlZmluZWQsXG4gICAgICBkYXRhYmFzZTogbWF0Y2hSZXN1bHRzWzldID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoUmVzdWx0c1s5XSkgOiBtYXRjaFJlc3VsdHNbOV1cbiAgICB9O1xuXG4gICAgY29uc3QgdmFyaW91c09wdHNTdHJpbmcgPSBtYXRjaFJlc3VsdHNbMTFdO1xuICAgIGlmICh2YXJpb3VzT3B0c1N0cmluZykge1xuICAgICAgY29uc3Qga2V5VmFsdWVzID0gdmFyaW91c09wdHNTdHJpbmcuc3BsaXQoJyYnKTtcbiAgICAgIGtleVZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXlWYWwpIHtcbiAgICAgICAgY29uc3QgZXF1YWxJZHggPSBrZXlWYWwuaW5kZXhPZignPScpO1xuICAgICAgICBpZiAoZXF1YWxJZHggIT09IDEpIHtcbiAgICAgICAgICBsZXQgdmFsID0ga2V5VmFsLnN1YnN0cmluZyhlcXVhbElkeCArIDEpO1xuICAgICAgICAgIHZhbCA9IHZhbCA/IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIG9wdGlvbnNba2V5VmFsLnN1YnN0cmluZygwLCBlcXVhbElkeCldID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wYXJzZU9wdGlvbkRhdGFUeXBlKG9wdGlvbnMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29ubmVjdGlvbk9wdGlvbnM7XG4iXSwibmFtZXMiOlsiQ29sbGF0aW9ucyIsInJlcXVpcmUiLCJ1cmxGb3JtYXQiLCJDb25uZWN0aW9uT3B0aW9ucyIsImNvbnN0cnVjdG9yIiwib3B0cyIsInBhcnNlIiwiaG9zdCIsInBvcnQiLCJrZWVwRW9mIiwidXNlciIsInByb2Nlc3MiLCJlbnYiLCJVU0VSTkFNRSIsInBhc3N3b3JkIiwiZGF0YWJhc2UiLCJzdHJlYW0iLCJkZWJ1ZyIsImRlYnVnQ29tcHJlc3MiLCJkZWJ1Z0xlbiIsImxvZ2dlciIsIm5ldHdvcmsiLCJxdWVyeSIsImVycm9yIiwid2FybmluZyIsImxvZ1BhcmFtIiwiY29uc29sZSIsImxvZyIsImNoYXJzZXQiLCJjb2xsYXRpb24iLCJmcm9tQ2hhcnNldCIsInRvTG93ZXJDYXNlIiwidW5kZWZpbmVkIiwiZnJvbU5hbWUiLCJ0b1VwcGVyQ2FzZSIsIlJhbmdlRXJyb3IiLCJjaGFyc2V0TnVtYmVyIiwiZnJvbUluZGV4IiwiaW5pdFNxbCIsImNvbm5lY3RUaW1lb3V0IiwiY29ubmVjdEF0dHJpYnV0ZXMiLCJjb21wcmVzcyIsInJzYVB1YmxpY0tleSIsImNhY2hpbmdSc2FQdWJsaWNLZXkiLCJhbGxvd1B1YmxpY0tleVJldHJpZXZhbCIsImZvcmNlVmVyc2lvbkNoZWNrIiwibWF4QWxsb3dlZFBhY2tldCIsInBlcm1pdENvbm5lY3Rpb25XaGVuRXhwaXJlZCIsInBpcGVsaW5pbmciLCJ0aW1lem9uZSIsInNvY2tldFBhdGgiLCJzZXNzaW9uVmFyaWFibGVzIiwiaW5maWxlU3RyZWFtRmFjdG9yeSIsInNzbCIsInJlamVjdFVuYXV0aG9yaXplZCIsInF1ZXJ5VGltZW91dCIsInNvY2tldFRpbWVvdXQiLCJrZWVwQWxpdmVEZWxheSIsInRyYWNlIiwiY2hlY2tEdXBsaWNhdGUiLCJkYXRlU3RyaW5ncyIsImZvdW5kUm93cyIsIm1ldGFBc0FycmF5IiwibWV0YUVudW1lcmFibGUiLCJtdWx0aXBsZVN0YXRlbWVudHMiLCJuYW1lZFBsYWNlaG9sZGVycyIsIm5lc3RUYWJsZXMiLCJhdXRvSnNvbk1hcCIsImJpdE9uZUlzQm9vbGVhbiIsImFycmF5UGFyZW50aGVzaXMiLCJwZXJtaXRTZXRNdWx0aVBhcmFtRW50cmllcyIsInJvd3NBc0FycmF5IiwidHlwZUNhc3QiLCJidWxrIiwiY2hlY2tOdW1iZXJSYW5nZSIsInBlcm1pdExvY2FsSW5maWxlIiwiRXJyb3IiLCJwcmVwYXJlQ2FjaGVMZW5ndGgiLCJyZXN0cmljdGVkQXV0aCIsIkFycmF5IiwiaXNBcnJheSIsInNwbGl0IiwiYmlnSW50QXNOdW1iZXIiLCJpbnNlcnRJZEFzTnVtYmVyIiwiZGVjaW1hbEFzTnVtYmVyIiwic3VwcG9ydEJpZ051bWJlcnMiLCJiaWdOdW1iZXJTdHJpbmdzIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwicGFyc2VPcHRpb25EYXRhVHlwZSIsImlzTmFOIiwicGFyc2VJbnQiLCJKU09OIiwibWF0Y2hSZXN1bHRzIiwibWF0Y2giLCJvcHRpb25zIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidmFyaW91c09wdHNTdHJpbmciLCJrZXlWYWx1ZXMiLCJmb3JFYWNoIiwia2V5VmFsIiwiZXF1YWxJZHgiLCJpbmRleE9mIiwidmFsIiwic3Vic3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/config/connection-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/config/pool-options.js":
/*!*********************************************************!*\
  !*** ./node_modules/mariadb/lib/config/pool-options.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nlet ConnOptions = __webpack_require__(/*! ./connection-options */ \"(rsc)/./node_modules/mariadb/lib/config/connection-options.js\");\nclass PoolOptions {\n    constructor(opts){\n        if (typeof opts === \"string\") {\n            opts = ConnOptions.parse(opts);\n            //set data type\n            if (opts.acquireTimeout) opts.acquireTimeout = parseInt(opts.acquireTimeout);\n            if (opts.connectionLimit) opts.connectionLimit = parseInt(opts.connectionLimit);\n            if (opts.idleTimeout) opts.idleTimeout = parseInt(opts.idleTimeout);\n            if (opts.leakDetectionTimeout) opts.leakDetectionTimeout = parseInt(opts.leakDetectionTimeout);\n            if (opts.initializationTimeout) opts.initializationTimeout = parseInt(opts.initializationTimeout);\n            if (opts.minDelayValidation) opts.minDelayValidation = parseInt(opts.minDelayValidation);\n            if (opts.minimumIdle) opts.minimumIdle = parseInt(opts.minimumIdle);\n            if (opts.noControlAfterUse) opts.noControlAfterUse = opts.noControlAfterUse === \"true\";\n            if (opts.resetAfterUse) opts.resetAfterUse = opts.resetAfterUse === \"true\";\n            if (opts.pingTimeout) opts.pingTimeout = parseInt(opts.pingTimeout);\n        }\n        this.acquireTimeout = opts.acquireTimeout === undefined ? 10000 : opts.acquireTimeout;\n        this.connectionLimit = opts.connectionLimit === undefined ? 10 : opts.connectionLimit;\n        this.idleTimeout = opts.idleTimeout === undefined ? 1800 : opts.idleTimeout;\n        this.leakDetectionTimeout = opts.leakDetectionTimeout || 0;\n        this.initializationTimeout = opts.initializationTimeout === undefined ? 30000 : opts.initializationTimeout;\n        this.minDelayValidation = opts.minDelayValidation === undefined ? 500 : opts.minDelayValidation;\n        this.minimumIdle = opts.minimumIdle === undefined ? this.connectionLimit : Math.min(opts.minimumIdle, this.connectionLimit);\n        this.noControlAfterUse = opts.noControlAfterUse || false;\n        this.resetAfterUse = opts.resetAfterUse || false;\n        this.pingTimeout = opts.pingTimeout || 250;\n        this.connOptions = new ConnOptions(opts);\n        if (this.acquireTimeout > 0 && this.connOptions.connectTimeout > this.acquireTimeout) {\n            this.connOptions.connectTimeout = this.acquireTimeout;\n        }\n    }\n}\nmodule.exports = PoolOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29uZmlnL3Bvb2wtb3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEO0FBRUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUM7QUFFMUIsTUFBTUM7SUFDSkMsWUFBWUMsSUFBSSxDQUFFO1FBQ2hCLElBQUksT0FBT0EsU0FBUyxVQUFVO1lBQzVCQSxPQUFPSixZQUFZSyxLQUFLLENBQUNEO1lBRXpCLGVBQWU7WUFDZixJQUFJQSxLQUFLRSxjQUFjLEVBQUVGLEtBQUtFLGNBQWMsR0FBR0MsU0FBU0gsS0FBS0UsY0FBYztZQUMzRSxJQUFJRixLQUFLSSxlQUFlLEVBQUVKLEtBQUtJLGVBQWUsR0FBR0QsU0FBU0gsS0FBS0ksZUFBZTtZQUM5RSxJQUFJSixLQUFLSyxXQUFXLEVBQUVMLEtBQUtLLFdBQVcsR0FBR0YsU0FBU0gsS0FBS0ssV0FBVztZQUNsRSxJQUFJTCxLQUFLTSxvQkFBb0IsRUFBRU4sS0FBS00sb0JBQW9CLEdBQUdILFNBQVNILEtBQUtNLG9CQUFvQjtZQUM3RixJQUFJTixLQUFLTyxxQkFBcUIsRUFBRVAsS0FBS08scUJBQXFCLEdBQUdKLFNBQVNILEtBQUtPLHFCQUFxQjtZQUNoRyxJQUFJUCxLQUFLUSxrQkFBa0IsRUFBRVIsS0FBS1Esa0JBQWtCLEdBQUdMLFNBQVNILEtBQUtRLGtCQUFrQjtZQUN2RixJQUFJUixLQUFLUyxXQUFXLEVBQUVULEtBQUtTLFdBQVcsR0FBR04sU0FBU0gsS0FBS1MsV0FBVztZQUNsRSxJQUFJVCxLQUFLVSxpQkFBaUIsRUFBRVYsS0FBS1UsaUJBQWlCLEdBQUdWLEtBQUtVLGlCQUFpQixLQUFLO1lBQ2hGLElBQUlWLEtBQUtXLGFBQWEsRUFBRVgsS0FBS1csYUFBYSxHQUFHWCxLQUFLVyxhQUFhLEtBQUs7WUFDcEUsSUFBSVgsS0FBS1ksV0FBVyxFQUFFWixLQUFLWSxXQUFXLEdBQUdULFNBQVNILEtBQUtZLFdBQVc7UUFDcEU7UUFFQSxJQUFJLENBQUNWLGNBQWMsR0FBR0YsS0FBS0UsY0FBYyxLQUFLVyxZQUFZLFFBQVFiLEtBQUtFLGNBQWM7UUFDckYsSUFBSSxDQUFDRSxlQUFlLEdBQUdKLEtBQUtJLGVBQWUsS0FBS1MsWUFBWSxLQUFLYixLQUFLSSxlQUFlO1FBQ3JGLElBQUksQ0FBQ0MsV0FBVyxHQUFHTCxLQUFLSyxXQUFXLEtBQUtRLFlBQVksT0FBT2IsS0FBS0ssV0FBVztRQUMzRSxJQUFJLENBQUNDLG9CQUFvQixHQUFHTixLQUFLTSxvQkFBb0IsSUFBSTtRQUN6RCxJQUFJLENBQUNDLHFCQUFxQixHQUFHUCxLQUFLTyxxQkFBcUIsS0FBS00sWUFBWSxRQUFRYixLQUFLTyxxQkFBcUI7UUFDMUcsSUFBSSxDQUFDQyxrQkFBa0IsR0FBR1IsS0FBS1Esa0JBQWtCLEtBQUtLLFlBQVksTUFBTWIsS0FBS1Esa0JBQWtCO1FBQy9GLElBQUksQ0FBQ0MsV0FBVyxHQUNkVCxLQUFLUyxXQUFXLEtBQUtJLFlBQVksSUFBSSxDQUFDVCxlQUFlLEdBQUdVLEtBQUtDLEdBQUcsQ0FBQ2YsS0FBS1MsV0FBVyxFQUFFLElBQUksQ0FBQ0wsZUFBZTtRQUN6RyxJQUFJLENBQUNNLGlCQUFpQixHQUFHVixLQUFLVSxpQkFBaUIsSUFBSTtRQUNuRCxJQUFJLENBQUNDLGFBQWEsR0FBR1gsS0FBS1csYUFBYSxJQUFJO1FBQzNDLElBQUksQ0FBQ0MsV0FBVyxHQUFHWixLQUFLWSxXQUFXLElBQUk7UUFDdkMsSUFBSSxDQUFDSSxXQUFXLEdBQUcsSUFBSXBCLFlBQVlJO1FBRW5DLElBQUksSUFBSSxDQUFDRSxjQUFjLEdBQUcsS0FBSyxJQUFJLENBQUNjLFdBQVcsQ0FBQ0MsY0FBYyxHQUFHLElBQUksQ0FBQ2YsY0FBYyxFQUFFO1lBQ3BGLElBQUksQ0FBQ2MsV0FBVyxDQUFDQyxjQUFjLEdBQUcsSUFBSSxDQUFDZixjQUFjO1FBQ3ZEO0lBQ0Y7QUFDRjtBQUVBZ0IsT0FBT0MsT0FBTyxHQUFHckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZm5leHRqcy8uL25vZGVfbW9kdWxlcy9tYXJpYWRiL2xpYi9jb25maWcvcG9vbC1vcHRpb25zLmpzPzA5YmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuJ3VzZSBzdHJpY3QnO1xuXG5sZXQgQ29ubk9wdGlvbnMgPSByZXF1aXJlKCcuL2Nvbm5lY3Rpb24tb3B0aW9ucycpO1xuXG5jbGFzcyBQb29sT3B0aW9ucyB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvcHRzID0gQ29ubk9wdGlvbnMucGFyc2Uob3B0cyk7XG5cbiAgICAgIC8vc2V0IGRhdGEgdHlwZVxuICAgICAgaWYgKG9wdHMuYWNxdWlyZVRpbWVvdXQpIG9wdHMuYWNxdWlyZVRpbWVvdXQgPSBwYXJzZUludChvcHRzLmFjcXVpcmVUaW1lb3V0KTtcbiAgICAgIGlmIChvcHRzLmNvbm5lY3Rpb25MaW1pdCkgb3B0cy5jb25uZWN0aW9uTGltaXQgPSBwYXJzZUludChvcHRzLmNvbm5lY3Rpb25MaW1pdCk7XG4gICAgICBpZiAob3B0cy5pZGxlVGltZW91dCkgb3B0cy5pZGxlVGltZW91dCA9IHBhcnNlSW50KG9wdHMuaWRsZVRpbWVvdXQpO1xuICAgICAgaWYgKG9wdHMubGVha0RldGVjdGlvblRpbWVvdXQpIG9wdHMubGVha0RldGVjdGlvblRpbWVvdXQgPSBwYXJzZUludChvcHRzLmxlYWtEZXRlY3Rpb25UaW1lb3V0KTtcbiAgICAgIGlmIChvcHRzLmluaXRpYWxpemF0aW9uVGltZW91dCkgb3B0cy5pbml0aWFsaXphdGlvblRpbWVvdXQgPSBwYXJzZUludChvcHRzLmluaXRpYWxpemF0aW9uVGltZW91dCk7XG4gICAgICBpZiAob3B0cy5taW5EZWxheVZhbGlkYXRpb24pIG9wdHMubWluRGVsYXlWYWxpZGF0aW9uID0gcGFyc2VJbnQob3B0cy5taW5EZWxheVZhbGlkYXRpb24pO1xuICAgICAgaWYgKG9wdHMubWluaW11bUlkbGUpIG9wdHMubWluaW11bUlkbGUgPSBwYXJzZUludChvcHRzLm1pbmltdW1JZGxlKTtcbiAgICAgIGlmIChvcHRzLm5vQ29udHJvbEFmdGVyVXNlKSBvcHRzLm5vQ29udHJvbEFmdGVyVXNlID0gb3B0cy5ub0NvbnRyb2xBZnRlclVzZSA9PT0gJ3RydWUnO1xuICAgICAgaWYgKG9wdHMucmVzZXRBZnRlclVzZSkgb3B0cy5yZXNldEFmdGVyVXNlID0gb3B0cy5yZXNldEFmdGVyVXNlID09PSAndHJ1ZSc7XG4gICAgICBpZiAob3B0cy5waW5nVGltZW91dCkgb3B0cy5waW5nVGltZW91dCA9IHBhcnNlSW50KG9wdHMucGluZ1RpbWVvdXQpO1xuICAgIH1cblxuICAgIHRoaXMuYWNxdWlyZVRpbWVvdXQgPSBvcHRzLmFjcXVpcmVUaW1lb3V0ID09PSB1bmRlZmluZWQgPyAxMDAwMCA6IG9wdHMuYWNxdWlyZVRpbWVvdXQ7XG4gICAgdGhpcy5jb25uZWN0aW9uTGltaXQgPSBvcHRzLmNvbm5lY3Rpb25MaW1pdCA9PT0gdW5kZWZpbmVkID8gMTAgOiBvcHRzLmNvbm5lY3Rpb25MaW1pdDtcbiAgICB0aGlzLmlkbGVUaW1lb3V0ID0gb3B0cy5pZGxlVGltZW91dCA9PT0gdW5kZWZpbmVkID8gMTgwMCA6IG9wdHMuaWRsZVRpbWVvdXQ7XG4gICAgdGhpcy5sZWFrRGV0ZWN0aW9uVGltZW91dCA9IG9wdHMubGVha0RldGVjdGlvblRpbWVvdXQgfHwgMDtcbiAgICB0aGlzLmluaXRpYWxpemF0aW9uVGltZW91dCA9IG9wdHMuaW5pdGlhbGl6YXRpb25UaW1lb3V0ID09PSB1bmRlZmluZWQgPyAzMDAwMCA6IG9wdHMuaW5pdGlhbGl6YXRpb25UaW1lb3V0O1xuICAgIHRoaXMubWluRGVsYXlWYWxpZGF0aW9uID0gb3B0cy5taW5EZWxheVZhbGlkYXRpb24gPT09IHVuZGVmaW5lZCA/IDUwMCA6IG9wdHMubWluRGVsYXlWYWxpZGF0aW9uO1xuICAgIHRoaXMubWluaW11bUlkbGUgPVxuICAgICAgb3B0cy5taW5pbXVtSWRsZSA9PT0gdW5kZWZpbmVkID8gdGhpcy5jb25uZWN0aW9uTGltaXQgOiBNYXRoLm1pbihvcHRzLm1pbmltdW1JZGxlLCB0aGlzLmNvbm5lY3Rpb25MaW1pdCk7XG4gICAgdGhpcy5ub0NvbnRyb2xBZnRlclVzZSA9IG9wdHMubm9Db250cm9sQWZ0ZXJVc2UgfHwgZmFsc2U7XG4gICAgdGhpcy5yZXNldEFmdGVyVXNlID0gb3B0cy5yZXNldEFmdGVyVXNlIHx8IGZhbHNlO1xuICAgIHRoaXMucGluZ1RpbWVvdXQgPSBvcHRzLnBpbmdUaW1lb3V0IHx8IDI1MDtcbiAgICB0aGlzLmNvbm5PcHRpb25zID0gbmV3IENvbm5PcHRpb25zKG9wdHMpO1xuXG4gICAgaWYgKHRoaXMuYWNxdWlyZVRpbWVvdXQgPiAwICYmIHRoaXMuY29ubk9wdGlvbnMuY29ubmVjdFRpbWVvdXQgPiB0aGlzLmFjcXVpcmVUaW1lb3V0KSB7XG4gICAgICB0aGlzLmNvbm5PcHRpb25zLmNvbm5lY3RUaW1lb3V0ID0gdGhpcy5hY3F1aXJlVGltZW91dDtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQb29sT3B0aW9ucztcbiJdLCJuYW1lcyI6WyJDb25uT3B0aW9ucyIsInJlcXVpcmUiLCJQb29sT3B0aW9ucyIsImNvbnN0cnVjdG9yIiwib3B0cyIsInBhcnNlIiwiYWNxdWlyZVRpbWVvdXQiLCJwYXJzZUludCIsImNvbm5lY3Rpb25MaW1pdCIsImlkbGVUaW1lb3V0IiwibGVha0RldGVjdGlvblRpbWVvdXQiLCJpbml0aWFsaXphdGlvblRpbWVvdXQiLCJtaW5EZWxheVZhbGlkYXRpb24iLCJtaW5pbXVtSWRsZSIsIm5vQ29udHJvbEFmdGVyVXNlIiwicmVzZXRBZnRlclVzZSIsInBpbmdUaW1lb3V0IiwidW5kZWZpbmVkIiwiTWF0aCIsIm1pbiIsImNvbm5PcHRpb25zIiwiY29ubmVjdFRpbWVvdXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/config/pool-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/connection-callback.js":
/*!*********************************************************!*\
  !*** ./node_modules/mariadb/lib/connection-callback.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Errors = __webpack_require__(/*! ./misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst { Status } = __webpack_require__(/*! ./const/connection_status */ \"(rsc)/./node_modules/mariadb/lib/const/connection_status.js\");\nconst Query = __webpack_require__(/*! ./cmd/query */ \"(rsc)/./node_modules/mariadb/lib/cmd/query.js\");\nconst CommandParameter = __webpack_require__(/*! ./command-parameter */ \"(rsc)/./node_modules/mariadb/lib/command-parameter.js\");\nclass ConnectionCallback {\n    #conn;\n    constructor(conn){\n        this.#noop = ()=>{};\n        this.release = (cb)=>{\n            this.#conn.release(()=>{\n                if (cb) cb();\n            });\n        };\n        this.#conn = conn;\n    }\n    get threadId() {\n        return this.#conn.info ? this.#conn.info.threadId : null;\n    }\n    get info() {\n        return this.#conn.info;\n    }\n    #noop;\n    /**\n   * Permit to change user during connection.\n   * All user variables will be reset, Prepare commands will be released.\n   * !!! mysql has a bug when CONNECT_ATTRS capability is set, that is default !!!!\n   *\n   * @param options   connection options\n   * @param callback  callback function\n   */ changeUser(options, callback) {\n        let _options, _cb;\n        if (typeof options === \"function\") {\n            _cb = options;\n            _options = undefined;\n        } else {\n            _options = options;\n            _cb = callback;\n        }\n        const cmdParam = new CommandParameter(null, null, _options, _cb);\n        if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n        new Promise(this.#conn.changeUser.bind(this.#conn, cmdParam)).then(()=>{\n            if (cmdParam.callback) cmdParam.callback(null, null, null);\n        }).catch(cmdParam.callback || this.#noop);\n    }\n    /**\n   * Start transaction\n   *\n   * @param callback  callback function\n   */ beginTransaction(callback) {\n        this.query(new CommandParameter(\"START TRANSACTION\"), null, callback);\n    }\n    /**\n   * Commit a transaction.\n   *\n   * @param callback  callback function\n   */ commit(callback) {\n        this.#conn.changeTransaction(new CommandParameter(\"COMMIT\"), ()=>{\n            if (callback) callback(null, null, null);\n        }, callback || this.#noop);\n    }\n    /**\n   * Roll back a transaction.\n   *\n   * @param callback  callback function\n   */ rollback(callback) {\n        this.#conn.changeTransaction(new CommandParameter(\"ROLLBACK\"), ()=>{\n            if (callback) callback(null, null, null);\n        }, callback || this.#noop);\n    }\n    /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param callback  callback function\n   */ query(sql, values, callback) {\n        const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n        return ConnectionCallback._QUERY_CMD(this.#conn, cmdParam);\n    }\n    static _QUERY_CMD(conn, cmdParam) {\n        let cmd;\n        if (cmdParam.callback) {\n            cmdParam.opts = cmdParam.opts ? Object.assign(cmdParam.opts, {\n                metaAsArray: true\n            }) : {\n                metaAsArray: true\n            };\n            cmd = new Query(([rows, meta])=>{\n                cmdParam.callback(null, rows, meta);\n            }, cmdParam.callback, conn.opts, cmdParam);\n        } else {\n            cmd = new Query(()=>{}, ()=>{}, conn.opts, cmdParam);\n        }\n        cmd.handleNewRows = (row)=>{\n            cmd._rows[cmd._responseIndex].push(row);\n            cmd.emit(\"data\", row);\n        };\n        conn.addCommand(cmd);\n        cmd.stream = (opt)=>cmd._stream(conn.socket, opt);\n        return cmd;\n    }\n    execute(sql, values, callback) {\n        const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n        return ConnectionCallback._EXECUTE_CMD(this.#conn, cmdParam);\n    }\n    static _PARAM(options, sql, values, callback) {\n        let _cmdOpt, _sql, _values = values, _cb = callback;\n        if (typeof values === \"function\") {\n            _cb = values;\n            _values = undefined;\n        }\n        if (typeof sql === \"object\") {\n            _cmdOpt = sql;\n            _sql = _cmdOpt.sql;\n            if (_cmdOpt.values) _values = _cmdOpt.values;\n        } else {\n            _sql = sql;\n        }\n        const cmdParam = new CommandParameter(_sql, _values, _cmdOpt, _cb);\n        if (options.trace) Error.captureStackTrace(cmdParam);\n        return cmdParam;\n    }\n    static _EXECUTE_CMD(conn, cmdParam) {\n        new Promise(conn.prepare.bind(conn, cmdParam)).then((prepare)=>{\n            const opts = cmdParam.opts ? Object.assign(cmdParam.opts, {\n                metaAsArray: true\n            }) : {\n                metaAsArray: true\n            };\n            return prepare.execute(cmdParam.values, opts, null, cmdParam.stack).then(([rows, meta])=>{\n                if (cmdParam.callback) {\n                    cmdParam.callback(null, rows, meta);\n                }\n            }).finally(()=>prepare.close());\n        }).catch((err)=>{\n            if (conn.opts.logger.error) conn.opts.logger.error(err);\n            if (cmdParam.callback) cmdParam.callback(err);\n        });\n    }\n    prepare(sql, callback) {\n        let _cmdOpt, _sql;\n        if (typeof sql === \"object\") {\n            _cmdOpt = sql;\n            _sql = _cmdOpt.sql;\n        } else {\n            _sql = sql;\n        }\n        const cmdParam = new CommandParameter(_sql, null, _cmdOpt, callback);\n        if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n        return new Promise(this.#conn.prepare.bind(this.#conn, cmdParam)).then((prepare)=>{\n            if (callback) callback(null, prepare, null);\n        }).catch(callback || this.#noop);\n    }\n    /**\n   * Execute a batch\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param callback callback\n   */ batch(sql, values, callback) {\n        const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n        return ConnectionCallback._BATCH_CMD(this.#conn, cmdParam);\n    }\n    static _BATCH_CMD(conn, cmdParam) {\n        conn.batch(cmdParam).then((res)=>{\n            if (cmdParam.callback) cmdParam.callback(null, res);\n        }).catch((err)=>{\n            if (cmdParam.callback) cmdParam.callback(err);\n        });\n    }\n    /**\n   * Import sql file.\n   *\n   * @param opts JSON array with 2 possible fields: file and database\n   * @param cb callback\n   */ importFile(opts, cb) {\n        if (!opts || !opts.file) {\n            if (cb) cb(Errors.createError(\"SQL file parameter is mandatory\", Errors.ER_MISSING_SQL_PARAMETER, this.#conn.info, \"HY000\", null, false, null));\n            return;\n        }\n        new Promise(this.#conn.importFile.bind(this.#conn, {\n            file: opts.file,\n            database: opts.database\n        })).then(()=>{\n            if (cb) cb();\n        }).catch((err)=>{\n            if (cb) cb(err);\n        });\n    }\n    /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param timeout (optional) timeout value in ms. If reached, throw error and close connection\n   * @param callback callback\n   */ ping(timeout, callback) {\n        let _cmdOpt = {}, _cb;\n        if (typeof timeout === \"function\") {\n            _cb = timeout;\n        } else {\n            _cmdOpt.timeout = timeout;\n            _cb = callback;\n        }\n        const cmdParam = new CommandParameter(null, null, _cmdOpt, _cb);\n        if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n        new Promise(this.#conn.ping.bind(this.#conn, cmdParam)).then(_cb || this.#noop).catch(_cb || this.#noop);\n    }\n    /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   *\n   * @param callback callback\n   */ reset(callback) {\n        const cmdParam = new CommandParameter();\n        if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n        return new Promise(this.#conn.reset.bind(this.#conn, cmdParam)).then(callback || this.#noop).catch(callback || this.#noop);\n    }\n    /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */ isValid() {\n        return this.#conn.isValid();\n    }\n    /**\n   * Terminate connection gracefully.\n   *\n   * @param callback callback\n   */ end(callback) {\n        const cmdParam = new CommandParameter();\n        if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n        new Promise(this.#conn.end.bind(this.#conn, cmdParam)).then(()=>{\n            if (callback) callback();\n        }).catch(callback || this.#noop);\n    }\n    /**\n   * Alias for destroy.\n   */ close() {\n        this.destroy();\n    }\n    /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */ destroy() {\n        this.#conn.destroy();\n    }\n    pause() {\n        this.#conn.pause();\n    }\n    resume() {\n        this.#conn.resume();\n    }\n    format(sql, values) {\n        this.#conn.format(sql, values);\n    }\n    /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */ serverVersion() {\n        return this.#conn.serverVersion();\n    }\n    /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */ debug(val) {\n        return this.#conn.debug(val);\n    }\n    debugCompress(val) {\n        return this.#conn.debugCompress(val);\n    }\n    escape(val) {\n        return this.#conn.escape(val);\n    }\n    escapeId(val) {\n        return this.#conn.escapeId(val);\n    }\n    //*****************************************************************\n    // internal public testing methods\n    //*****************************************************************\n    get __tests() {\n        return this.#conn.__tests;\n    }\n    connect(callback) {\n        if (!callback) {\n            throw new Errors.createError(\"missing mandatory callback parameter\", Errors.ER_MISSING_PARAMETER, this.#conn.info);\n        }\n        switch(this.#conn.status){\n            case Status.NOT_CONNECTED:\n            case Status.CONNECTING:\n            case Status.AUTHENTICATING:\n            case Status.INIT_CMD:\n                this.once(\"connect\", callback);\n                break;\n            case Status.CONNECTED:\n                callback.call(this);\n                break;\n            case Status.CLOSING:\n            case Status.CLOSED:\n                callback.call(this, Errors.createError(\"Connection closed\", Errors.ER_CONNECTION_ALREADY_CLOSED, this.#conn.info, \"08S01\", null, true));\n                break;\n        }\n    }\n    //*****************************************************************\n    // EventEmitter proxy methods\n    //*****************************************************************\n    on(eventName, listener) {\n        this.#conn.on.call(this.#conn, eventName, listener);\n        return this;\n    }\n    off(eventName, listener) {\n        this.#conn.off.call(this.#conn, eventName, listener);\n        return this;\n    }\n    once(eventName, listener) {\n        this.#conn.once.call(this.#conn, eventName, listener);\n        return this;\n    }\n    listeners(eventName) {\n        return this.#conn.listeners.call(this.#conn, eventName);\n    }\n    addListener(eventName, listener) {\n        this.#conn.addListener.call(this.#conn, eventName, listener);\n        return this;\n    }\n    eventNames() {\n        return this.#conn.eventNames.call(this.#conn);\n    }\n    getMaxListeners() {\n        return this.#conn.getMaxListeners.call(this.#conn);\n    }\n    listenerCount(eventName, listener) {\n        return this.#conn.listenerCount.call(this.#conn, eventName, listener);\n    }\n    prependListener(eventName, listener) {\n        this.#conn.prependListener.call(this.#conn, eventName, listener);\n        return this;\n    }\n    prependOnceListener(eventName, listener) {\n        this.#conn.prependOnceListener.call(this.#conn, eventName, listener);\n        return this;\n    }\n    removeAllListeners(eventName, listener) {\n        this.#conn.removeAllListeners.call(this.#conn, eventName, listener);\n        return this;\n    }\n    removeListener(eventName, listener) {\n        this.#conn.removeListener.call(this.#conn, eventName, listener);\n        return this;\n    }\n    setMaxListeners(n) {\n        this.#conn.setMaxListeners.call(this.#conn, n);\n        return this;\n    }\n    rawListeners(eventName) {\n        return this.#conn.rawListeners.call(this.#conn, eventName);\n    }\n}\nmodule.exports = ConnectionCallback;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29ubmVjdGlvbi1jYWxsYmFjay5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEO0FBRUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDdkIsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0QsbUJBQU9BLENBQUM7QUFDM0IsTUFBTUUsUUFBUUYsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUcsbUJBQW1CSCxtQkFBT0EsQ0FBQztBQUVqQyxNQUFNSTtJQUNKLENBQUNDLElBQUksQ0FBQztJQUVOQyxZQUFZRCxJQUFJLENBQUU7YUFZbEIsQ0FBQ0UsSUFBSSxHQUFHLEtBQU87YUFFZkMsVUFBVSxDQUFDQztZQUNULElBQUksQ0FBQyxDQUFDSixJQUFJLENBQUNHLE9BQU8sQ0FBQztnQkFDakIsSUFBSUMsSUFBSUE7WUFDVjtRQUNGO1FBakJFLElBQUksQ0FBQyxDQUFDSixJQUFJLEdBQUdBO0lBQ2Y7SUFFQSxJQUFJSyxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsQ0FBQ0wsSUFBSSxDQUFDTSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUNOLElBQUksQ0FBQ00sSUFBSSxDQUFDRCxRQUFRLEdBQUc7SUFDdEQ7SUFFQSxJQUFJQyxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsQ0FBQ04sSUFBSSxDQUFDTSxJQUFJO0lBQ3hCO0lBRUEsQ0FBQ0osSUFBSSxDQUFZO0lBUWpCOzs7Ozs7O0dBT0MsR0FDREssV0FBV0MsT0FBTyxFQUFFQyxRQUFRLEVBQUU7UUFDNUIsSUFBSUMsVUFBVUM7UUFDZCxJQUFJLE9BQU9ILFlBQVksWUFBWTtZQUNqQ0csTUFBTUg7WUFDTkUsV0FBV0U7UUFDYixPQUFPO1lBQ0xGLFdBQVdGO1lBQ1hHLE1BQU1GO1FBQ1I7UUFDQSxNQUFNSSxXQUFXLElBQUlmLGlCQUFpQixNQUFNLE1BQU1ZLFVBQVVDO1FBQzVELElBQUksSUFBSSxDQUFDLENBQUNYLElB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Q0FBQzdGLElBQUksRUFBRWtHLFdBQVdDO1FBQ3ZELE9BQU8sSUFBSTtJQUNiO0lBRUFRLG9CQUFvQlQsU0FBUyxFQUFFQyxRQUFRLEVBQUU7UUFDdkMsSUFBSSxDQUFDLENBQUNuRyxJQUFJLENBQUMyRyxtQkFBbUIsQ0FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDN0YsSUFBSSxFQUFFa0csV0FBV0M7UUFDM0QsT0FBTyxJQUFJO0lBQ2I7SUFFQVMsbUJBQW1CVixTQUFTLEVBQUVDLFFBQVEsRUFBRTtRQUN0QyxJQUFJLENBQUMsQ0FBQ25HLElBQUksQ0FBQzRHLGtCQUFrQixDQUFDZixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM3RixJQUFJLEVBQUVrRyxXQUFXQztRQUMxRCxPQUFPLElBQUk7SUFDYjtJQUVBVSxlQUFlWCxTQUFTLEVBQUVDLFFBQVEsRUFBRTtRQUNsQyxJQUFJLENBQUMsQ0FBQ25HLElBQUksQ0FBQzZHLGNBQWMsQ0FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzdGLElBQUksRUFBRWtHLFdBQVdDO1FBQ3RELE9BQU8sSUFBSTtJQUNiO0lBRUFXLGdCQUFnQkMsQ0FBQyxFQUFFO1FBQ2pCLElBQUksQ0FBQyxDQUFDL0csSUFBSSxDQUFDOEcsZUFBZSxDQUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDN0YsSUFBSSxFQUFFK0c7UUFDNUMsT0FBTyxJQUFJO0lBQ2I7SUFFQUMsYUFBYWQsU0FBUyxFQUFFO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLENBQUNsRyxJQUFJLENBQUNnSCxZQUFZLENBQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM3RixJQUFJLEVBQUVrRztJQUNsRDtBQUNGO0FBRUFlLE9BQU9DLE9BQU8sR0FBR25IIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGZuZXh0anMvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29ubmVjdGlvbi1jYWxsYmFjay5qcz82Y2FjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXJyb3JzID0gcmVxdWlyZSgnLi9taXNjL2Vycm9ycycpO1xuY29uc3QgeyBTdGF0dXMgfSA9IHJlcXVpcmUoJy4vY29uc3QvY29ubmVjdGlvbl9zdGF0dXMnKTtcbmNvbnN0IFF1ZXJ5ID0gcmVxdWlyZSgnLi9jbWQvcXVlcnknKTtcbmNvbnN0IENvbW1hbmRQYXJhbWV0ZXIgPSByZXF1aXJlKCcuL2NvbW1hbmQtcGFyYW1ldGVyJyk7XG5cbmNsYXNzIENvbm5lY3Rpb25DYWxsYmFjayB7XG4gICNjb25uO1xuXG4gIGNvbnN0cnVjdG9yKGNvbm4pIHtcbiAgICB0aGlzLiNjb25uID0gY29ubjtcbiAgfVxuXG4gIGdldCB0aHJlYWRJZCgpIHtcbiAgICByZXR1cm4gdGhpcy4jY29ubi5pbmZvID8gdGhpcy4jY29ubi5pbmZvLnRocmVhZElkIDogbnVsbDtcbiAgfVxuXG4gIGdldCBpbmZvKCkge1xuICAgIHJldHVybiB0aGlzLiNjb25uLmluZm87XG4gIH1cblxuICAjbm9vcCA9ICgpID0+IHt9O1xuXG4gIHJlbGVhc2UgPSAoY2IpID0+IHtcbiAgICB0aGlzLiNjb25uLnJlbGVhc2UoKCkgPT4ge1xuICAgICAgaWYgKGNiKSBjYigpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQZXJtaXQgdG8gY2hhbmdlIHVzZXIgZHVyaW5nIGNvbm5lY3Rpb24uXG4gICAqIEFsbCB1c2VyIHZhcmlhYmxlcyB3aWxsIGJlIHJlc2V0LCBQcmVwYXJlIGNvbW1hbmRzIHdpbGwgYmUgcmVsZWFzZWQuXG4gICAqICEhISBteXNxbCBoYXMgYSBidWcgd2hlbiBDT05ORUNUX0FUVFJTIGNhcGFiaWxpdHkgaXMgc2V0LCB0aGF0IGlzIGRlZmF1bHQgISEhIVxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyAgIGNvbm5lY3Rpb24gb3B0aW9uc1xuICAgKiBAcGFyYW0gY2FsbGJhY2sgIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAqL1xuICBjaGFuZ2VVc2VyKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgbGV0IF9vcHRpb25zLCBfY2I7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBfY2IgPSBvcHRpb25zO1xuICAgICAgX29wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9vcHRpb25zID0gb3B0aW9ucztcbiAgICAgIF9jYiA9IGNhbGxiYWNrO1xuICAgIH1cbiAgICBjb25zdCBjbWRQYXJhbSA9IG5ldyBDb21tYW5kUGFyYW1ldGVyKG51bGwsIG51bGwsIF9vcHRpb25zLCBfY2IpO1xuICAgIGlmICh0aGlzLiNjb25uLm9wdHMudHJhY2UpIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGNtZFBhcmFtKTtcblxuICAgIG5ldyBQcm9taXNlKHRoaXMuI2Nvbm4uY2hhbmdlVXNlci5iaW5kKHRoaXMuI2Nvbm4sIGNtZFBhcmFtKSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgaWYgKGNtZFBhcmFtLmNhbGxiYWNrKSBjbWRQYXJhbS5jYWxsYmFjayhudWxsLCBudWxsLCBudWxsKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goY21kUGFyYW0uY2FsbGJhY2sgfHwgdGhpcy4jbm9vcCk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgdHJhbnNhY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrICBjYWxsYmFjayBmdW5jdGlvblxuICAgKi9cbiAgYmVnaW5UcmFuc2FjdGlvbihjYWxsYmFjaykge1xuICAgIHRoaXMucXVlcnkobmV3IENvbW1hbmRQYXJhbWV0ZXIoJ1NUQVJUIFRSQU5TQUNUSU9OJyksIG51bGwsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21taXQgYSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrICBjYWxsYmFjayBmdW5jdGlvblxuICAgKi9cbiAgY29tbWl0KGNhbGxiYWNrKSB7XG4gICAgdGhpcy4jY29ubi5jaGFuZ2VUcmFuc2FjdGlvbihcbiAgICAgIG5ldyBDb21tYW5kUGFyYW1ldGVyKCdDT01NSVQnKSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhudWxsLCBudWxsLCBudWxsKTtcbiAgICAgIH0sXG4gICAgICBjYWxsYmFjayB8fCB0aGlzLiNub29wXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSb2xsIGJhY2sgYSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrICBjYWxsYmFjayBmdW5jdGlvblxuICAgKi9cbiAgcm9sbGJhY2soY2FsbGJhY2spIHtcbiAgICB0aGlzLiNjb25uLmNoYW5nZVRyYW5zYWN0aW9uKFxuICAgICAgbmV3IENvbW1hbmRQYXJhbWV0ZXIoJ1JPTExCQUNLJyksXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2sobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICB9LFxuICAgICAgY2FsbGJhY2sgfHwgdGhpcy4jbm9vcFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSBxdWVyeSB1c2luZyB0ZXh0IHByb3RvY29sIHdpdGggY2FsbGJhY2sgZW1pdCBjb2x1bW5zL2RhdGEvZW5kL2Vycm9yXG4gICAqIGV2ZW50cyB0byBwZXJtaXQgc3RyZWFtaW5nIGJpZyByZXN1bHQtc2V0XG4gICAqXG4gICAqIEBwYXJhbSBzcWwgICAgIHNxbCBwYXJhbWV0ZXIgT2JqZWN0IGNhbiBiZSB1c2VkIHRvIHN1cGVyc2VkZSBkZWZhdWx0IG9wdGlvbi5cbiAgICogICAgICAgICAgICAgICAgT2JqZWN0IG11c3QgdGhlbiBoYXZlIHNxbCBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIHZhbHVlcyAgb2JqZWN0IC8gYXJyYXkgb2YgcGxhY2Vob2xkZXIgdmFsdWVzIChub3QgbWFuZGF0b3J5KVxuICAgKiBAcGFyYW0gY2FsbGJhY2sgIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAqL1xuICBxdWVyeShzcWwsIHZhbHVlcywgY2FsbGJhY2spIHtcbiAgICBjb25zdCBjbWRQYXJhbSA9IENvbm5lY3Rpb25DYWxsYmFjay5fUEFSQU0odGhpcy4jY29ubi5vcHRzLCBzcWwsIHZhbHVlcywgY2FsbGJhY2spO1xuICAgIHJldHVybiBDb25uZWN0aW9uQ2FsbGJhY2suX1FVRVJZX0NNRCh0aGlzLiNjb25uLCBjbWRQYXJhbSk7XG4gIH1cblxuICBzdGF0aWMgX1FVRVJZX0NNRChjb25uLCBjbWRQYXJhbSkge1xuICAgIGxldCBjbWQ7XG4gICAgaWYgKGNtZFBhcmFtLmNhbGxiYWNrKSB7XG4gICAgICBjbWRQYXJhbS5vcHRzID0gY21kUGFyYW0ub3B0cyA/IE9iamVjdC5hc3NpZ24oY21kUGFyYW0ub3B0cywgeyBtZXRhQXNBcnJheTogdHJ1ZSB9KSA6IHsgbWV0YUFzQXJyYXk6IHRydWUgfTtcbiAgICAgIGNtZCA9IG5ldyBRdWVyeShcbiAgICAgICAgKFtyb3dzLCBtZXRhXSkgPT4ge1xuICAgICAgICAgIGNtZFBhcmFtLmNhbGxiYWNrKG51bGwsIHJvd3MsIG1ldGEpO1xuICAgICAgICB9LFxuICAgICAgICBjbWRQYXJhbS5jYWxsYmFjayxcbiAgICAgICAgY29ubi5vcHRzLFxuICAgICAgICBjbWRQYXJhbVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY21kID0gbmV3IFF1ZXJ5KFxuICAgICAgICAoKSA9PiB7fSxcbiAgICAgICAgKCkgPT4ge30sXG4gICAgICAgIGNvbm4ub3B0cyxcbiAgICAgICAgY21kUGFyYW1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY21kLmhhbmRsZU5ld1Jvd3MgPSAocm93KSA9PiB7XG4gICAgICBjbWQuX3Jvd3NbY21kLl9yZXNwb25zZUluZGV4XS5wdXNoKHJvdyk7XG4gICAgICBjbWQuZW1pdCgnZGF0YScsIHJvdyk7XG4gICAgfTtcblxuICAgIGNvbm4uYWRkQ29tbWFuZChjbWQpO1xuICAgIGNtZC5zdHJlYW0gPSAob3B0KSA9PiBjbWQuX3N0cmVhbShjb25uLnNvY2tldCwgb3B0KTtcbiAgICByZXR1cm4gY21kO1xuICB9XG5cbiAgZXhlY3V0ZShzcWwsIHZhbHVlcywgY2FsbGJhY2spIHtcbiAgICBjb25zdCBjbWRQYXJhbSA9IENvbm5lY3Rpb25DYWxsYmFjay5fUEFSQU0odGhpcy4jY29ubi5vcHRzLCBzcWwsIHZhbHVlcywgY2FsbGJhY2spO1xuICAgIHJldHVybiBDb25uZWN0aW9uQ2FsbGJhY2suX0VYRUNVVEVfQ01EKHRoaXMuI2Nvbm4sIGNtZFBhcmFtKTtcbiAgfVxuXG4gIHN0YXRpYyBfUEFSQU0ob3B0aW9ucywgc3FsLCB2YWx1ZXMsIGNhbGxiYWNrKSB7XG4gICAgbGV0IF9jbWRPcHQsXG4gICAgICBfc3FsLFxuICAgICAgX3ZhbHVlcyA9IHZhbHVlcyxcbiAgICAgIF9jYiA9IGNhbGxiYWNrO1xuICAgIGlmICh0eXBlb2YgdmFsdWVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBfY2IgPSB2YWx1ZXM7XG4gICAgICBfdmFsdWVzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNxbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIF9jbWRPcHQgPSBzcWw7XG4gICAgICBfc3FsID0gX2NtZE9wdC5zcWw7XG4gICAgICBpZiAoX2NtZE9wdC52YWx1ZXMpIF92YWx1ZXMgPSBfY21kT3B0LnZhbHVlcztcbiAgICB9IGVsc2Uge1xuICAgICAgX3NxbCA9IHNxbDtcbiAgICB9XG4gICAgY29uc3QgY21kUGFyYW0gPSBuZXcgQ29tbWFuZFBhcmFtZXRlcihfc3FsLCBfdmFsdWVzLCBfY21kT3B0LCBfY2IpO1xuICAgIGlmIChvcHRpb25zLnRyYWNlKSBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShjbWRQYXJhbSk7XG4gICAgcmV0dXJuIGNtZFBhcmFtO1xuICB9XG5cbiAgc3RhdGljIF9FWEVDVVRFX0NNRChjb25uLCBjbWRQYXJhbSkge1xuICAgIG5ldyBQcm9taXNlKGNvbm4ucHJlcGFyZS5iaW5kKGNvbm4sIGNtZFBhcmFtKSlcbiAgICAgIC50aGVuKChwcmVwYXJlKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBjbWRQYXJhbS5vcHRzID8gT2JqZWN0LmFzc2lnbihjbWRQYXJhbS5vcHRzLCB7IG1ldGFBc0FycmF5OiB0cnVlIH0pIDogeyBtZXRhQXNBcnJheTogdHJ1ZSB9O1xuICAgICAgICByZXR1cm4gcHJlcGFyZVxuICAgICAgICAgIC5leGVjdXRlKGNtZFBhcmFtLnZhbHVlcywgb3B0cywgbnVsbCwgY21kUGFyYW0uc3RhY2spXG4gICAgICAgICAgLnRoZW4oKFtyb3dzLCBtZXRhXSkgPT4ge1xuICAgICAgICAgICAgaWYgKGNtZFBhcmFtLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIGNtZFBhcmFtLmNhbGxiYWNrKG51bGwsIHJvd3MsIG1ldGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZpbmFsbHkoKCkgPT4gcHJlcGFyZS5jbG9zZSgpKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBpZiAoY29ubi5vcHRzLmxvZ2dlci5lcnJvcikgY29ubi5vcHRzLmxvZ2dlci5lcnJvcihlcnIpO1xuICAgICAgICBpZiAoY21kUGFyYW0uY2FsbGJhY2spIGNtZFBhcmFtLmNhbGxiYWNrKGVycik7XG4gICAgICB9KTtcbiAgfVxuXG4gIHByZXBhcmUoc3FsLCBjYWxsYmFjaykge1xuICAgIGxldCBfY21kT3B0LCBfc3FsO1xuICAgIGlmICh0eXBlb2Ygc3FsID09PSAnb2JqZWN0Jykge1xuICAgICAgX2NtZE9wdCA9IHNxbDtcbiAgICAgIF9zcWwgPSBfY21kT3B0LnNxbDtcbiAgICB9IGVsc2Uge1xuICAgICAgX3NxbCA9IHNxbDtcbiAgICB9XG4gICAgY29uc3QgY21kUGFyYW0gPSBuZXcgQ29tbWFuZFBhcmFtZXRlcihfc3FsLCBudWxsLCBfY21kT3B0LCBjYWxsYmFjayk7XG4gICAgaWYgKHRoaXMuI2Nvbm4ub3B0cy50cmFjZSkgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoY21kUGFyYW0pO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSh0aGlzLiNjb25uLnByZXBhcmUuYmluZCh0aGlzLiNjb25uLCBjbWRQYXJhbSkpXG4gICAgICAudGhlbigocHJlcGFyZSkgPT4ge1xuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKG51bGwsIHByZXBhcmUsIG51bGwpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChjYWxsYmFjayB8fCB0aGlzLiNub29wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlIGEgYmF0Y2hcbiAgICogZXZlbnRzIHRvIHBlcm1pdCBzdHJlYW1pbmcgYmlnIHJlc3VsdC1zZXRcbiAgICpcbiAgICogQHBhcmFtIHNxbCAgICAgc3FsIHBhcmFtZXRlciBPYmplY3QgY2FuIGJlIHVzZWQgdG8gc3VwZXJzZWRlIGRlZmF1bHQgb3B0aW9uLlxuICAgKiAgICAgICAgICAgICAgICBPYmplY3QgbXVzdCB0aGVuIGhhdmUgc3FsIHByb3BlcnR5LlxuICAgKiBAcGFyYW0gdmFsdWVzICBvYmplY3QgLyBhcnJheSBvZiBwbGFjZWhvbGRlciB2YWx1ZXMgKG5vdCBtYW5kYXRvcnkpXG4gICAqIEBwYXJhbSBjYWxsYmFjayBjYWxsYmFja1xuICAgKi9cbiAgYmF0Y2goc3FsLCB2YWx1ZXMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY21kUGFyYW0gPSBDb25uZWN0aW9uQ2FsbGJhY2suX1BBUkFNKHRoaXMuI2Nvbm4ub3B0cywgc3FsLCB2YWx1ZXMsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gQ29ubmVjdGlvbkNhbGxiYWNrLl9CQVRDSF9DTUQodGhpcy4jY29ubiwgY21kUGFyYW0pO1xuICB9XG5cbiAgc3RhdGljIF9CQVRDSF9DTUQoY29ubiwgY21kUGFyYW0pIHtcbiAgICBjb25uXG4gICAgICAuYmF0Y2goY21kUGFyYW0pXG4gICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmIChjbWRQYXJhbS5jYWxsYmFjaykgY21kUGFyYW0uY2FsbGJhY2sobnVsbCwgcmVzKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBpZiAoY21kUGFyYW0uY2FsbGJhY2spIGNtZFBhcmFtLmNhbGxiYWNrKGVycik7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBvcnQgc3FsIGZpbGUuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRzIEpTT04gYXJyYXkgd2l0aCAyIHBvc3NpYmxlIGZpZWxkczogZmlsZSBhbmQgZGF0YWJhc2VcbiAgICogQHBhcmFtIGNiIGNhbGxiYWNrXG4gICAqL1xuICBpbXBvcnRGaWxlKG9wdHMsIGNiKSB7XG4gICAgaWYgKCFvcHRzIHx8ICFvcHRzLmZpbGUpIHtcbiAgICAgIGlmIChjYilcbiAgICAgICAgY2IoXG4gICAgICAgICAgRXJyb3JzLmNyZWF0ZUVycm9yKFxuICAgICAgICAgICAgJ1NRTCBmaWxlIHBhcmFtZXRlciBpcyBtYW5kYXRvcnknLFxuICAgICAgICAgICAgRXJyb3JzLkVSX01JU1NJTkdfU1FMX1BBUkFNRVRFUixcbiAgICAgICAgICAgIHRoaXMuI2Nvbm4uaW5mbyxcbiAgICAgICAgICAgICdIWTAwMCcsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBudWxsXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuZXcgUHJvbWlzZSh0aGlzLiNjb25uLmltcG9ydEZpbGUuYmluZCh0aGlzLiNjb25uLCB7IGZpbGU6IG9wdHMuZmlsZSwgZGF0YWJhc2U6IG9wdHMuZGF0YWJhc2UgfSkpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGlmIChjYikgY2IoKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBpZiAoY2IpIGNiKGVycik7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIGFuIGVtcHR5IE15U1FMIHBhY2tldCB0byBlbnN1cmUgY29ubmVjdGlvbiBpcyBhY3RpdmUsIGFuZCByZXNldCBAQHdhaXRfdGltZW91dFxuICAgKiBAcGFyYW0gdGltZW91dCAob3B0aW9uYWwpIHRpbWVvdXQgdmFsdWUgaW4gbXMuIElmIHJlYWNoZWQsIHRocm93IGVycm9yIGFuZCBjbG9zZSBjb25uZWN0aW9uXG4gICAqIEBwYXJhbSBjYWxsYmFjayBjYWxsYmFja1xuICAgKi9cbiAgcGluZyh0aW1lb3V0LCBjYWxsYmFjaykge1xuICAgIGxldCBfY21kT3B0ID0ge30sXG4gICAgICBfY2I7XG4gICAgaWYgKHR5cGVvZiB0aW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBfY2IgPSB0aW1lb3V0O1xuICAgIH0gZWxzZSB7XG4gICAgICBfY21kT3B0LnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgX2NiID0gY2FsbGJhY2s7XG4gICAgfVxuICAgIGNvbnN0IGNtZFBhcmFtID0gbmV3IENvbW1hbmRQYXJhbWV0ZXIobnVsbCwgbnVsbCwgX2NtZE9wdCwgX2NiKTtcbiAgICBpZiAodGhpcy4jY29ubi5vcHRzLnRyYWNlKSBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShjbWRQYXJhbSk7XG4gICAgbmV3IFByb21pc2UodGhpcy4jY29ubi5waW5nLmJpbmQodGhpcy4jY29ubiwgY21kUGFyYW0pKS50aGVuKF9jYiB8fCB0aGlzLiNub29wKS5jYXRjaChfY2IgfHwgdGhpcy4jbm9vcCk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBhIHJlc2V0IGNvbW1hbmQgdGhhdCB3aWxsXG4gICAqIC0gcm9sbGJhY2sgYW55IG9wZW4gdHJhbnNhY3Rpb25cbiAgICogLSByZXNldCB0cmFuc2FjdGlvbiBpc29sYXRpb24gbGV2ZWxcbiAgICogLSByZXNldCBzZXNzaW9uIHZhcmlhYmxlc1xuICAgKiAtIGRlbGV0ZSB1c2VyIHZhcmlhYmxlc1xuICAgKiAtIHJlbW92ZSB0ZW1wb3JhcnkgdGFibGVzXG4gICAqIC0gcmVtb3ZlIGFsbCBQUkVQQVJFIHN0YXRlbWVudFxuICAgKlxuICAgKiBAcGFyYW0gY2FsbGJhY2sgY2FsbGJhY2tcbiAgICovXG4gIHJlc2V0KGNhbGxiYWNrKSB7XG4gICAgY29uc3QgY21kUGFyYW0gPSBuZXcgQ29tbWFuZFBhcmFtZXRlcigpO1xuICAgIGlmICh0aGlzLiNjb25uLm9wdHMudHJhY2UpIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGNtZFBhcmFtKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UodGhpcy4jY29ubi5yZXNldC5iaW5kKHRoaXMuI2Nvbm4sIGNtZFBhcmFtKSlcbiAgICAgIC50aGVuKGNhbGxiYWNrIHx8IHRoaXMuI25vb3ApXG4gICAgICAuY2F0Y2goY2FsbGJhY2sgfHwgdGhpcy4jbm9vcCk7XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgY29ubmVjdGlvbiBhcyB0aGUgZHJpdmVyIGtub3dzIGl0XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy4jY29ubi5pc1ZhbGlkKCk7XG4gIH1cblxuICAvKipcbiAgICogVGVybWluYXRlIGNvbm5lY3Rpb24gZ3JhY2VmdWxseS5cbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrIGNhbGxiYWNrXG4gICAqL1xuICBlbmQoY2FsbGJhY2spIHtcbiAgICBjb25zdCBjbWRQYXJhbSA9IG5ldyBDb21tYW5kUGFyYW1ldGVyKCk7XG4gICAgaWYgKHRoaXMuI2Nvbm4ub3B0cy50cmFjZSkgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoY21kUGFyYW0pO1xuICAgIG5ldyBQcm9taXNlKHRoaXMuI2Nvbm4uZW5kLmJpbmQodGhpcy4jY29ubiwgY21kUGFyYW0pKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGNhbGxiYWNrIHx8IHRoaXMuI25vb3ApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsaWFzIGZvciBkZXN0cm95LlxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gIH1cblxuICAvKipcbiAgICogRm9yY2UgY29ubmVjdGlvbiB0ZXJtaW5hdGlvbiBieSBjbG9zaW5nIHRoZSB1bmRlcmx5aW5nIHNvY2tldCBhbmQga2lsbGluZyBzZXJ2ZXIgcHJvY2VzcyBpZiBhbnkuXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuI2Nvbm4uZGVzdHJveSgpO1xuICB9XG5cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy4jY29ubi5wYXVzZSgpO1xuICB9XG5cbiAgcmVzdW1lKCkge1xuICAgIHRoaXMuI2Nvbm4ucmVzdW1lKCk7XG4gIH1cblxuICBmb3JtYXQoc3FsLCB2YWx1ZXMpIHtcbiAgICB0aGlzLiNjb25uLmZvcm1hdChzcWwsIHZhbHVlcyk7XG4gIH1cblxuICAvKipcbiAgICogcmV0dXJuIGN1cnJlbnQgY29ubmVjdGVkIHNlcnZlciB2ZXJzaW9uIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIHNlcnZlclZlcnNpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuI2Nvbm4uc2VydmVyVmVyc2lvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZSBvcHRpb24gXCJkZWJ1Z1wiIGR1cmluZyBjb25uZWN0aW9uLlxuICAgKiBAcGFyYW0gdmFsICAgZGVidWcgdmFsdWVcbiAgICovXG4gIGRlYnVnKHZhbCkge1xuICAgIHJldHVybiB0aGlzLiNjb25uLmRlYnVnKHZhbCk7XG4gIH1cblxuICBkZWJ1Z0NvbXByZXNzKHZhbCkge1xuICAgIHJldHVybiB0aGlzLiNjb25uLmRlYnVnQ29tcHJlc3ModmFsKTtcbiAgfVxuXG4gIGVzY2FwZSh2YWwpIHtcbiAgICByZXR1cm4gdGhpcy4jY29ubi5lc2NhcGUodmFsKTtcbiAgfVxuXG4gIGVzY2FwZUlkKHZhbCkge1xuICAgIHJldHVybiB0aGlzLiNjb25uLmVzY2FwZUlkKHZhbCk7XG4gIH1cblxuICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gIC8vIGludGVybmFsIHB1YmxpYyB0ZXN0aW5nIG1ldGhvZHNcbiAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gIGdldCBfX3Rlc3RzKCkge1xuICAgIHJldHVybiB0aGlzLiNjb25uLl9fdGVzdHM7XG4gIH1cblxuICBjb25uZWN0KGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9ycy5jcmVhdGVFcnJvcihcbiAgICAgICAgJ21pc3NpbmcgbWFuZGF0b3J5IGNhbGxiYWNrIHBhcmFtZXRlcicsXG4gICAgICAgIEVycm9ycy5FUl9NSVNTSU5HX1BBUkFNRVRFUixcbiAgICAgICAgdGhpcy4jY29ubi5pbmZvXG4gICAgICApO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMuI2Nvbm4uc3RhdHVzKSB7XG4gICAgICBjYXNlIFN0YXR1cy5OT1RfQ09OTkVDVEVEOlxuICAgICAgY2FzZSBTdGF0dXMuQ09OTkVDVElORzpcbiAgICAgIGNhc2UgU3RhdHVzLkFVVEhFTlRJQ0FUSU5HOlxuICAgICAgY2FzZSBTdGF0dXMuSU5JVF9DTUQ6XG4gICAgICAgIHRoaXMub25jZSgnY29ubmVjdCcsIGNhbGxiYWNrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFN0YXR1cy5DT05ORUNURUQ6XG4gICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTdGF0dXMuQ0xPU0lORzpcbiAgICAgIGNhc2UgU3RhdHVzLkNMT1NFRDpcbiAgICAgICAgY2FsbGJhY2suY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIEVycm9ycy5jcmVhdGVFcnJvcihcbiAgICAgICAgICAgICdDb25uZWN0aW9uIGNsb3NlZCcsXG4gICAgICAgICAgICBFcnJvcnMuRVJfQ09OTkVDVElPTl9BTFJFQURZX0NMT1NFRCxcbiAgICAgICAgICAgIHRoaXMuI2Nvbm4uaW5mbyxcbiAgICAgICAgICAgICcwOFMwMScsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAvLyBFdmVudEVtaXR0ZXIgcHJveHkgbWV0aG9kc1xuICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgb24oZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgIHRoaXMuI2Nvbm4ub24uY2FsbCh0aGlzLiNjb25uLCBldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG9mZihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgdGhpcy4jY29ubi5vZmYuY2FsbCh0aGlzLiNjb25uLCBldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG9uY2UoZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgIHRoaXMuI2Nvbm4ub25jZS5jYWxsKHRoaXMuI2Nvbm4sIGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGlzdGVuZXJzKGV2ZW50TmFtZSkge1xuICAgIHJldHVybiB0aGlzLiNjb25uLmxpc3RlbmVycy5jYWxsKHRoaXMuI2Nvbm4sIGV2ZW50TmFtZSk7XG4gIH1cblxuICBhZGRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgdGhpcy4jY29ubi5hZGRMaXN0ZW5lci5jYWxsKHRoaXMuI2Nvbm4sIGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZXZlbnROYW1lcygpIHtcbiAgICByZXR1cm4gdGhpcy4jY29ubi5ldmVudE5hbWVzLmNhbGwodGhpcy4jY29ubik7XG4gIH1cblxuICBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2Nvbm4uZ2V0TWF4TGlzdGVuZXJzLmNhbGwodGhpcy4jY29ubik7XG4gIH1cblxuICBsaXN0ZW5lckNvdW50KGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdGhpcy4jY29ubi5saXN0ZW5lckNvdW50LmNhbGwodGhpcy4jY29ubiwgZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gIH1cblxuICBwcmVwZW5kTGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgIHRoaXMuI2Nvbm4ucHJlcGVuZExpc3RlbmVyLmNhbGwodGhpcy4jY29ubiwgZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwcmVwZW5kT25jZUxpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICB0aGlzLiNjb25uLnByZXBlbmRPbmNlTGlzdGVuZXIuY2FsbCh0aGlzLiNjb25uLCBldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlbW92ZUFsbExpc3RlbmVycyhldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgdGhpcy4jY29ubi5yZW1vdmVBbGxMaXN0ZW5lcnMuY2FsbCh0aGlzLiNjb25uLCBldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlbW92ZUxpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICB0aGlzLiNjb25uLnJlbW92ZUxpc3RlbmVyLmNhbGwodGhpcy4jY29ubiwgZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRNYXhMaXN0ZW5lcnMobikge1xuICAgIHRoaXMuI2Nvbm4uc2V0TWF4TGlzdGVuZXJzLmNhbGwodGhpcy4jY29ubiwgbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByYXdMaXN0ZW5lcnMoZXZlbnROYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuI2Nvbm4ucmF3TGlzdGVuZXJzLmNhbGwodGhpcy4jY29ubiwgZXZlbnROYW1lKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbm5lY3Rpb25DYWxsYmFjaztcbiJdLCJuYW1lcyI6WyJFcnJvcnMiLCJyZXF1aXJlIiwiU3RhdHVzIiwiUXVlcnkiLCJDb21tYW5kUGFyYW1ldGVyIiwiQ29ubmVjdGlvbkNhbGxiYWNrIiwiY29ubiIsImNvbnN0cnVjdG9yIiwibm9vcCIsInJlbGVhc2UiLCJjYiIsInRocmVhZElkIiwiaW5mbyIsImNoYW5nZVVzZXIiLCJvcHRpb25zIiwiY2FsbGJhY2siLCJfb3B0aW9ucyIsIl9jYiIsInVuZGVmaW5lZCIsImNtZFBhcmFtIiwib3B0cyIsInRyYWNlIiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIlByb21pc2UiLCJiaW5kIiwidGhlbiIsImNhdGNoIiwiYmVnaW5UcmFuc2FjdGlvbiIsInF1ZXJ5IiwiY29tbWl0IiwiY2hhbmdlVHJhbnNhY3Rpb24iLCJyb2xsYmFjayIsInNxbCIsInZhbHVlcyIsIl9QQVJBTSIsIl9RVUVSWV9DTUQiLCJjbWQiLCJPYmplY3QiLCJhc3NpZ24iLCJtZXRhQXNBcnJheSIsInJvd3MiLCJtZXRhIiwiaGFuZGxlTmV3Um93cyIsInJvdyIsIl9yb3dzIiwiX3Jlc3BvbnNlSW5kZXgiLCJwdXNoIiwiZW1pdCIsImFkZENvbW1hbmQiLCJzdHJlYW0iLCJvcHQiLCJfc3RyZWFtIiwic29ja2V0IiwiZXhlY3V0ZSIsIl9FWEVDVVRFX0NNRCIsIl9jbWRPcHQiLCJfc3FsIiwiX3ZhbHVlcyIsInByZXBhcmUiLCJzdGFjayIsImZpbmFsbHkiLCJjbG9zZSIsImVyciIsImxvZ2dlciIsImVycm9yIiwiYmF0Y2giLCJfQkFUQ0hfQ01EIiwicmVzIiwiaW1wb3J0RmlsZSIsImZpbGUiLCJjcmVhdGVFcnJvciIsIkVSX01JU1NJTkdfU1FMX1BBUkFNRVRFUiIsImRhdGFiYXNlIiwicGluZyIsInRpbWVvdXQiLCJyZXNldCIsImlzVmFsaWQiLCJlbmQiLCJkZXN0cm95IiwicGF1c2UiLCJyZXN1bWUiLCJmb3JtYXQiLCJzZXJ2ZXJWZXJzaW9uIiwiZGVidWciLCJ2YWwiLCJkZWJ1Z0NvbXByZXNzIiwiZXNjYXBlIiwiZXNjYXBlSWQiLCJfX3Rlc3RzIiwiY29ubmVjdCIsIkVSX01JU1NJTkdfUEFSQU1FVEVSIiwic3RhdHVzIiwiTk9UX0NPTk5FQ1RFRCIsIkNPTk5FQ1RJTkciLCJBVVRIRU5USUNBVElORyIsIklOSVRfQ01EIiwib25jZSIsIkNPTk5FQ1RFRCIsImNhbGwiLCJDTE9TSU5HIiwiQ0xPU0VEIiwiRVJfQ09OTkVDVElPTl9BTFJFQURZX0NMT1NFRCIsIm9uIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJvZmYiLCJsaXN0ZW5lcnMiLCJhZGRMaXN0ZW5lciIsImV2ZW50TmFtZXMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJsaXN0ZW5lckNvdW50IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInJlbW92ZUxpc3RlbmVyIiwic2V0TWF4TGlzdGVuZXJzIiwibiIsInJhd0xpc3RlbmVycyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/connection-callback.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/connection-promise.js":
/*!********************************************************!*\
  !*** ./node_modules/mariadb/lib/connection-promise.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Stream = __webpack_require__(/*! ./cmd/stream */ \"(rsc)/./node_modules/mariadb/lib/cmd/stream.js\");\nconst CommandParameter = __webpack_require__(/*! ./command-parameter */ \"(rsc)/./node_modules/mariadb/lib/command-parameter.js\");\nconst Errors = __webpack_require__(/*! ./misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\n/**\n * New Connection instance.\n *\n * @param options    connection options\n * @returns Connection instance\n * @constructor\n * @fires Connection#connect\n * @fires Connection#end\n * @fires Connection#error\n *\n */ class ConnectionPromise {\n    #conn;\n    constructor(conn){\n        this.#conn = conn;\n    }\n    get threadId() {\n        return this.#conn.threadId;\n    }\n    get info() {\n        return this.#conn.info;\n    }\n    get prepareCache() {\n        return this.#conn.prepareCache;\n    }\n    /**\n   * Permit to change user during connection.\n   * All user variables will be reset, Prepare commands will be released.\n   * !!! mysql has a bug when CONNECT_ATTRS capability is set, that is default !!!!\n   *\n   * @param options   connection options\n   * @returns {Promise} promise\n   */ changeUser(options) {\n        const cmdParam = new CommandParameter(null, null, options);\n        if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n        return new Promise(this.#conn.changeUser.bind(this.#conn, cmdParam));\n    }\n    /**\n   * Start transaction\n   *\n   * @returns {Promise} promise\n   */ beginTransaction() {\n        return this.query(\"START TRANSACTION\");\n    }\n    /**\n   * Commit a transaction.\n   *\n   * @returns {Promise} command if commit was needed only\n   */ commit() {\n        const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, \"COMMIT\");\n        return new Promise(this.#conn.changeTransaction.bind(this.#conn, cmdParam));\n    }\n    /**\n   * Roll back a transaction.\n   *\n   * @returns {Promise} promise\n   */ rollback() {\n        const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, \"ROLLBACK\");\n        return new Promise(this.#conn.changeTransaction.bind(this.#conn, cmdParam));\n    }\n    /**\n   * Execute query using text protocol.\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @returns {Promise} promise\n   */ query(sql, values) {\n        const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n        return new Promise(this.#conn.query.bind(this.#conn, cmdParam));\n    }\n    static _PARAM(options, sql, values) {\n        let _cmdOpt, _sql = sql, _values = values;\n        if (typeof sql === \"object\") {\n            _cmdOpt = sql;\n            _sql = _cmdOpt.sql;\n            if (_cmdOpt.values) _values = _cmdOpt.values;\n        }\n        const cmdParam = new CommandParameter(_sql, _values, _cmdOpt);\n        if (options.trace) Error.captureStackTrace(cmdParam);\n        return cmdParam;\n    }\n    execute(sql, values) {\n        const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n        return ConnectionPromise._EXECUTE_CMD(this.#conn, cmdParam);\n    }\n    static _EXECUTE_CMD(conn, cmdParam) {\n        return new Promise(conn.prepare.bind(conn, cmdParam)).then((prepare)=>{\n            return new Promise(function(resolve, reject) {\n                conn.executePromise.call(conn, cmdParam, prepare, resolve, reject);\n            }).finally(()=>prepare.close());\n        }).catch((err)=>{\n            if (conn.opts.logger.error) conn.opts.logger.error(err);\n            throw err;\n        });\n    }\n    prepare(sql) {\n        let _cmdOpt, _sql;\n        if (typeof sql === \"object\") {\n            _cmdOpt = sql;\n            _sql = _cmdOpt.sql;\n        } else {\n            _sql = sql;\n        }\n        const cmdParam = new CommandParameter(_sql, null, _cmdOpt);\n        if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n        return new Promise(this.#conn.prepare.bind(this.#conn, cmdParam));\n    }\n    /**\n   * Execute batch using text protocol.\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values\n   * @returns {Promise} promise\n   */ batch(sql, values) {\n        const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n        return this.#conn.batch(cmdParam);\n    }\n    static _BATCH_CMD(conn, cmdParam) {\n        return conn.batch(cmdParam);\n    }\n    /**\n   * Import sql file.\n   *\n   * @param opts JSON array with 2 possible fields: file and database\n   */ importFile(opts) {\n        if (!opts || !opts.file) {\n            return Promise.reject(Errors.createError(\"SQL file parameter is mandatory\", Errors.ER_MISSING_SQL_PARAMETER, this.#conn.info, \"HY000\", null, false, null));\n        }\n        return new Promise(this.#conn.importFile.bind(this.#conn, {\n            file: opts.file,\n            database: opts.database\n        }));\n    }\n    /**\n   * Execute query returning a Readable Object that will emit columns/data/end/error events\n   * to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @returns {Readable}\n   */ queryStream(sql, values) {\n        const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n        const cmd = new Stream(cmdParam, this.#conn.opts, this.#conn.socket);\n        if (this.#conn.opts.logger.error) cmd.on(\"error\", this.#conn.opts.logger.error);\n        this.#conn.addCommand(cmd);\n        return cmd.inStream;\n    }\n    /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param timeout (optional) timeout value in ms. If reached, throw error and close connection\n   * @returns {Promise} promise\n   */ ping(timeout) {\n        const cmdParam = new CommandParameter(null, null, {\n            timeout: timeout\n        });\n        if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n        return new Promise(this.#conn.ping.bind(this.#conn, cmdParam));\n    }\n    /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   *\n   * @returns {Promise} promise\n   */ reset() {\n        const cmdParam = new CommandParameter();\n        if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n        return new Promise(this.#conn.reset.bind(this.#conn, cmdParam));\n    }\n    /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */ isValid() {\n        return this.#conn.isValid();\n    }\n    /**\n   * Terminate connection gracefully.\n   *\n   * @returns {Promise} promise\n   */ end() {\n        const cmdParam = new CommandParameter();\n        if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n        return new Promise(this.#conn.end.bind(this.#conn, cmdParam));\n    }\n    /**\n   * Alias for destroy.\n   */ close() {\n        this.destroy();\n    }\n    /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */ destroy() {\n        this.#conn.destroy();\n    }\n    pause() {\n        this.#conn.pause();\n    }\n    resume() {\n        this.#conn.resume();\n    }\n    format(sql, values) {\n        this.#conn.format(sql, values);\n    }\n    /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */ serverVersion() {\n        return this.#conn.serverVersion();\n    }\n    /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */ debug(val) {\n        return this.#conn.debug(val);\n    }\n    debugCompress(val) {\n        return this.#conn.debugCompress(val);\n    }\n    escape(val) {\n        return this.#conn.escape(val);\n    }\n    escapeId(val) {\n        return this.#conn.escapeId(val);\n    }\n    //*****************************************************************\n    // EventEmitter proxy methods\n    //*****************************************************************\n    on(eventName, listener) {\n        this.#conn.on.call(this.#conn, eventName, listener);\n        return this;\n    }\n    off(eventName, listener) {\n        this.#conn.off.call(this.#conn, eventName, listener);\n        return this;\n    }\n    once(eventName, listener) {\n        this.#conn.once.call(this.#conn, eventName, listener);\n        return this;\n    }\n    listeners(eventName) {\n        return this.#conn.listeners.call(this.#conn, eventName);\n    }\n    addListener(eventName, listener) {\n        this.#conn.addListener.call(this.#conn, eventName, listener);\n        return this;\n    }\n    eventNames() {\n        return this.#conn.eventNames.call(this.#conn);\n    }\n    getMaxListeners() {\n        return this.#conn.getMaxListeners.call(this.#conn);\n    }\n    listenerCount(eventName, listener) {\n        return this.#conn.listenerCount.call(this.#conn, eventName, listener);\n    }\n    prependListener(eventName, listener) {\n        this.#conn.prependListener.call(this.#conn, eventName, listener);\n        return this;\n    }\n    prependOnceListener(eventName, listener) {\n        this.#conn.prependOnceListener.call(this.#conn, eventName, listener);\n        return this;\n    }\n    removeAllListeners(eventName, listener) {\n        this.#conn.removeAllListeners.call(this.#conn, eventName, listener);\n        return this;\n    }\n    removeListener(eventName, listener) {\n        this.#conn.removeListener.call(this.#conn, eventName, listener);\n        return this;\n    }\n    setMaxListeners(n) {\n        this.#conn.setMaxListeners.call(this.#conn, n);\n        return this;\n    }\n    rawListeners(eventName) {\n        return this.#conn.rawListeners.call(this.#conn, eventName);\n    }\n    //*****************************************************************\n    // internal public testing methods\n    //*****************************************************************\n    get __tests() {\n        return this.#conn.__tests;\n    }\n}\nmodule.exports = ConnectionPromise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/connection-promise.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/connection.js":
/*!************************************************!*\
  !*** ./node_modules/mariadb/lib/connection.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst Queue = __webpack_require__(/*! denque */ \"(rsc)/./node_modules/denque/index.js\");\nconst Net = __webpack_require__(/*! net */ \"net\");\nconst PacketInputStream = __webpack_require__(/*! ./io/packet-input-stream */ \"(rsc)/./node_modules/mariadb/lib/io/packet-input-stream.js\");\nconst PacketOutputStream = __webpack_require__(/*! ./io/packet-output-stream */ \"(rsc)/./node_modules/mariadb/lib/io/packet-output-stream.js\");\nconst CompressionInputStream = __webpack_require__(/*! ./io/compression-input-stream */ \"(rsc)/./node_modules/mariadb/lib/io/compression-input-stream.js\");\nconst CompressionOutputStream = __webpack_require__(/*! ./io/compression-output-stream */ \"(rsc)/./node_modules/mariadb/lib/io/compression-output-stream.js\");\nconst ServerStatus = __webpack_require__(/*! ./const/server-status */ \"(rsc)/./node_modules/mariadb/lib/const/server-status.js\");\nconst ConnectionInformation = __webpack_require__(/*! ./misc/connection-information */ \"(rsc)/./node_modules/mariadb/lib/misc/connection-information.js\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst Errors = __webpack_require__(/*! ./misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst Utils = __webpack_require__(/*! ./misc/utils */ \"(rsc)/./node_modules/mariadb/lib/misc/utils.js\");\nconst Capabilities = __webpack_require__(/*! ./const/capabilities */ \"(rsc)/./node_modules/mariadb/lib/const/capabilities.js\");\n/*commands*/ const Authentication = __webpack_require__(/*! ./cmd/handshake/authentication */ \"(rsc)/./node_modules/mariadb/lib/cmd/handshake/authentication.js\");\nconst Quit = __webpack_require__(/*! ./cmd/quit */ \"(rsc)/./node_modules/mariadb/lib/cmd/quit.js\");\nconst Ping = __webpack_require__(/*! ./cmd/ping */ \"(rsc)/./node_modules/mariadb/lib/cmd/ping.js\");\nconst Reset = __webpack_require__(/*! ./cmd/reset */ \"(rsc)/./node_modules/mariadb/lib/cmd/reset.js\");\nconst Query = __webpack_require__(/*! ./cmd/query */ \"(rsc)/./node_modules/mariadb/lib/cmd/query.js\");\nconst Prepare = __webpack_require__(/*! ./cmd/prepare */ \"(rsc)/./node_modules/mariadb/lib/cmd/prepare.js\");\nconst OkPacket = __webpack_require__(/*! ./cmd/class/ok-packet */ \"(rsc)/./node_modules/mariadb/lib/cmd/class/ok-packet.js\");\nconst Execute = __webpack_require__(/*! ./cmd/execute */ \"(rsc)/./node_modules/mariadb/lib/cmd/execute.js\");\nconst ClosePrepare = __webpack_require__(/*! ./cmd/close-prepare */ \"(rsc)/./node_modules/mariadb/lib/cmd/close-prepare.js\");\nconst BatchBulk = __webpack_require__(/*! ./cmd/batch-bulk */ \"(rsc)/./node_modules/mariadb/lib/cmd/batch-bulk.js\");\nconst ChangeUser = __webpack_require__(/*! ./cmd/change-user */ \"(rsc)/./node_modules/mariadb/lib/cmd/change-user.js\");\nconst { Status } = __webpack_require__(/*! ./const/connection_status */ \"(rsc)/./node_modules/mariadb/lib/const/connection_status.js\");\nconst CommandParameter = __webpack_require__(/*! ./command-parameter */ \"(rsc)/./node_modules/mariadb/lib/command-parameter.js\");\nconst LruPrepareCache = __webpack_require__(/*! ./lru-prepare-cache */ \"(rsc)/./node_modules/mariadb/lib/lru-prepare-cache.js\");\nconst fsPromises = (__webpack_require__(/*! fs */ \"fs\").promises);\nconst Parse = __webpack_require__(/*! ./misc/parse */ \"(rsc)/./node_modules/mariadb/lib/misc/parse.js\");\nconst Collations = __webpack_require__(/*! ./const/collations */ \"(rsc)/./node_modules/mariadb/lib/const/collations.js\");\nconst convertFixedTime = function(tz, conn) {\n    if (tz === \"UTC\" || tz === \"Etc/UTC\" || tz === \"Z\" || tz === \"Etc/GMT\") {\n        return \"+00:00\";\n    } else if (tz.startsWith(\"Etc/GMT\") || tz.startsWith(\"GMT\")) {\n        let tzdiff;\n        let negate;\n        // strangely Etc/GMT+8 = GMT-08:00 = offset -8\n        if (tz.startsWith(\"Etc/GMT\")) {\n            tzdiff = tz.substring(7);\n            negate = !tzdiff.startsWith(\"-\");\n        } else {\n            tzdiff = tz.substring(3);\n            negate = tzdiff.startsWith(\"-\");\n        }\n        let diff = parseInt(tzdiff.substring(1));\n        if (isNaN(diff)) {\n            throw Errors.createFatalError(`Automatic timezone setting fails. wrong Server timezone '${tz}' conversion to +/-HH:00 conversion.`, Errors.ER_WRONG_AUTO_TIMEZONE, conn.info);\n        }\n        return (negate ? \"-\" : \"+\") + (diff >= 10 ? diff : \"0\" + diff) + \":00\";\n    }\n    return tz;\n};\n/**\n * New Connection instance.\n *\n * @param options    connection options\n * @returns Connection instance\n * @constructor\n * @fires Connection#connect\n * @fires Connection#end\n * @fires Connection#error\n *\n */ class Connection extends EventEmitter {\n    constructor(options){\n        super();\n        this.sendQueue = new Queue();\n        this.receiveQueue = new Queue();\n        this.waitingAuthenticationQueue = new Queue();\n        this.status = Status.NOT_CONNECTED;\n        this.socket = null;\n        this.timeout = null;\n        this.opts = Object.assign(new EventEmitter(), options);\n        this.info = new ConnectionInformation(this.opts);\n        this.prepareCache = this.opts.prepareCacheLength > 0 ? new LruPrepareCache(this.info, this.opts.prepareCacheLength) : null;\n        this.addCommand = this.addCommandQueue;\n        this.streamOut = new PacketOutputStream(this.opts, this.info);\n        this.streamIn = new PacketInputStream(this.unexpectedPacket.bind(this), this.receiveQueue, this.streamOut, this.opts, this.info);\n        this.on(\"close_prepare\", this._closePrepare.bind(this));\n        this.escape = Utils.escape.bind(this, this.opts, this.info);\n        this.escapeId = Utils.escapeId.bind(this, this.opts, this.info);\n    }\n    //*****************************************************************\n    // public methods\n    //*****************************************************************\n    /**\n   * Connect event\n   *\n   * @returns {Promise} promise\n   */ connect() {\n        const conn = this;\n        this.status = Status.CONNECTING;\n        const authenticationParam = new CommandParameter(null, null, this.opts, null);\n        return new Promise(function(resolve, reject) {\n            conn.connectRejectFct = reject;\n            conn.connectResolveFct = resolve;\n            // add a handshake to msg queue\n            const authentication = new Authentication(authenticationParam, conn.authSucceedHandler.bind(conn), conn.authFailHandler.bind(conn), conn.createSecureContext.bind(conn), conn.getSocket.bind(conn));\n            Error.captureStackTrace(authentication);\n            authentication.once(\"end\", ()=>{\n                conn.receiveQueue.shift();\n                // conn.info.collation might not be initialized\n                // in case of handshake throwing error\n                if (!conn.opts.collation && conn.info.collation) {\n                    conn.opts.emit(\"collation\", conn.info.collation);\n                }\n                process.nextTick(conn.nextSendCmd.bind(conn));\n            });\n            conn.receiveQueue.push(authentication);\n            conn.streamInitSocket.call(conn);\n        });\n    }\n    executePromise(cmdParam, prepare, resolve, reject) {\n        const cmd = new Execute(resolve, this._logAndReject.bind(this, reject), this.opts, cmdParam, prepare);\n        this.addCommand(cmd);\n    }\n    batch(cmdParam) {\n        if (!cmdParam.sql) {\n            const err = Errors.createError(\"sql parameter is mandatory\", Errors.ER_UNDEFINED_SQL, this.info, \"HY000\", null, false, cmdParam.stack);\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            return Promise.reject(err);\n        }\n        if (!cmdParam.values) {\n            const err = Errors.createError(\"Batch must have values set\", Errors.ER_BATCH_WITH_NO_VALUES, this.info, \"HY000\", cmdParam.sql, false, cmdParam.stack);\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            return Promise.reject(err);\n        }\n        return new Promise(this.prepare.bind(this, cmdParam)).then((prepare)=>{\n            const usePlaceHolder = cmdParam.opts && cmdParam.opts.namedPlaceholders || this.opts.namedPlaceholders;\n            let vals;\n            if (Array.isArray(cmdParam.values)) {\n                if (usePlaceHolder) {\n                    vals = cmdParam.values;\n                } else if (Array.isArray(cmdParam.values[0])) {\n                    vals = cmdParam.values;\n                } else if (prepare.parameterCount === 1) {\n                    vals = [];\n                    for(let i = 0; i < cmdParam.values.length; i++){\n                        vals.push([\n                            cmdParam.values[i]\n                        ]);\n                    }\n                } else {\n                    vals = [\n                        cmdParam.values\n                    ];\n                }\n            } else {\n                vals = [\n                    [\n                        cmdParam.values\n                    ]\n                ];\n            }\n            cmdParam.values = vals;\n            let useBulk = this._canUseBulk(vals, cmdParam.opts);\n            if (useBulk) {\n                return new Promise(this.executeBulkPromise.bind(this, cmdParam, prepare, this.opts));\n            } else {\n                const executes = [];\n                const cmdOpt = Object.assign({}, this.opts, cmdParam.opts);\n                for(let i = 0; i < vals.length; i++){\n                    executes.push(prepare.execute(vals[i], cmdParam.opts, null, cmdParam.stack));\n                }\n                return Promise.all(executes).then((function(res) {\n                    if (cmdParam.opts && cmdParam.opts.fullResult) {\n                        return Promise.resolve(res);\n                    } else {\n                        // aggregate results\n                        let firstResult = res[0];\n                        if (cmdOpt.metaAsArray) firstResult = firstResult[0];\n                        if (firstResult instanceof OkPacket) {\n                            let affectedRows = 0;\n                            const insertId = firstResult.insertId;\n                            const warningStatus = firstResult.warningStatus;\n                            if (cmdOpt.metaAsArray) {\n                                for(let i = 0; i < res.length; i++){\n                                    affectedRows += res[i][0].affectedRows;\n                                }\n                                return Promise.resolve([\n                                    new OkPacket(affectedRows, insertId, warningStatus),\n                                    []\n                                ]);\n                            } else {\n                                for(let i = 0; i < res.length; i++){\n                                    affectedRows += res[i].affectedRows;\n                                }\n                                return Promise.resolve(new OkPacket(affectedRows, insertId, warningStatus));\n                            }\n                        } else {\n                            // results have result-set. example :'INSERT ... RETURNING'\n                            // aggregate results\n                            if (cmdOpt.metaAsArray) {\n                                const rs = [];\n                                res.forEach((row)=>{\n                                    rs.push(...row[0]);\n                                });\n                                return Promise.resolve([\n                                    rs,\n                                    res[0][1]\n                                ]);\n                            } else {\n                                const rs = [];\n                                res.forEach((row)=>{\n                                    rs.push(...row);\n                                });\n                                Object.defineProperty(rs, \"meta\", {\n                                    value: res[0].meta,\n                                    writable: true,\n                                    enumerable: this.opts.metaEnumerable\n                                });\n                                return Promise.resolve(rs);\n                            }\n                        }\n                    }\n                }).bind(this)).finally(()=>prepare.close());\n            }\n        });\n    }\n    executeBulkPromise(cmdParam, prepare, opts, resolve, reject) {\n        const cmd = new BatchBulk((res)=>{\n            prepare.close();\n            return resolve(res);\n        }, function(err) {\n            prepare.close();\n            if (opts.logger.error) opts.logger.error(err);\n            reject(err);\n        }, opts, prepare, cmdParam);\n        this.addCommand(cmd);\n    }\n    /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param cmdParam command context\n   * @param resolve success function\n   * @param reject rejection function\n   */ ping(cmdParam, resolve, reject) {\n        if (cmdParam.opts && cmdParam.opts.timeout) {\n            if (cmdParam.opts.timeout < 0) {\n                const err = Errors.createError(\"Ping cannot have negative timeout value\", Errors.ER_BAD_PARAMETER_VALUE, this.info, \"0A000\");\n                if (this.opts.logger.error) this.opts.logger.error(err);\n                reject(err);\n                return;\n            }\n            let tOut = setTimeout((function() {\n                tOut = undefined;\n                const err = Errors.createFatalError(\"Ping timeout\", Errors.ER_PING_TIMEOUT, this.info, \"0A000\");\n                if (this.opts.logger.error) this.opts.logger.error(err);\n                // close connection\n                this.addCommand = this.addCommandDisabled;\n                clearTimeout(this.timeout);\n                if (this.status !== Status.CLOSING && this.status !== Status.CLOSED) {\n                    this.sendQueue.clear();\n                    this.status = Status.CLOSED;\n                    this.socket.destroy();\n                }\n                this.clear();\n                reject(err);\n            }).bind(this), cmdParam.opts.timeout);\n            this.addCommand(new Ping(cmdParam, ()=>{\n                if (tOut) {\n                    clearTimeout(tOut);\n                    resolve();\n                }\n            }, (err)=>{\n                if (this.opts.logger.error) this.opts.logger.error(err);\n                clearTimeout(tOut);\n                reject(err);\n            }));\n            return;\n        }\n        this.addCommand(new Ping(cmdParam, resolve, reject));\n    }\n    /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   */ reset(cmdParam, resolve, reject) {\n        if (this.info.isMariaDB() && this.info.hasMinVersion(10, 2, 4) || !this.info.isMariaDB() && this.info.hasMinVersion(5, 7, 3)) {\n            const conn = this;\n            const resetCmd = new Reset(cmdParam, ()=>{\n                conn.prepareCache.reset();\n                let prom = Promise.resolve();\n                // re-execute init query / session query timeout\n                prom.then(conn.handleCharset.bind(conn)).then(conn.handleTimezone.bind(conn)).then(conn.executeInitQuery.bind(conn)).then(conn.executeSessionTimeout.bind(conn)).then(resolve).catch(reject);\n            }, reject);\n            this.addCommand(resetCmd);\n            return;\n        }\n        const err = new Error(`Reset command not permitted for server ${this.info.serverVersion.raw} (requires server MariaDB version 10.2.4+ or MySQL 5.7.3+)`);\n        err.stack = cmdParam.stack;\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        reject(err);\n    }\n    /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */ isValid() {\n        return this.status === Status.CONNECTED;\n    }\n    /**\n   * Terminate connection gracefully.\n   */ end(cmdParam, resolve, reject) {\n        this.addCommand = this.addCommandDisabled;\n        clearTimeout(this.timeout);\n        if (this.status < Status.CLOSING && this.status !== Status.NOT_CONNECTED) {\n            this.status = Status.CLOSING;\n            const ended = ()=>{\n                this.status = Status.CLOSED;\n                this.socket.destroy();\n                this.socket.unref();\n                this.clear();\n                this.receiveQueue.clear();\n                resolve();\n            };\n            const quitCmd = new Quit(cmdParam, ended, ended);\n            this.sendQueue.push(quitCmd);\n            this.receiveQueue.push(quitCmd);\n            if (this.sendQueue.length === 1) {\n                process.nextTick(this.nextSendCmd.bind(this));\n            }\n        } else resolve();\n    }\n    /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */ destroy() {\n        this.addCommand = this.addCommandDisabled;\n        clearTimeout(this.timeout);\n        if (this.status < Status.CLOSING) {\n            this.status = Status.CLOSING;\n            this.sendQueue.clear();\n            if (this.receiveQueue.length > 0) {\n                //socket is closed, but server may still be processing a huge select\n                //only possibility is to kill process by another thread\n                //TODO reuse a pool connection to avoid connection creation\n                const self = this;\n                // relying on IP in place of DNS to ensure using same server\n                const remoteAddress = this.socket.remoteAddress;\n                const connOption = remoteAddress ? Object.assign({}, this.opts, {\n                    host: remoteAddress\n                }) : this.opts;\n                const killCon = new Connection(connOption);\n                killCon.connect().then(()=>{\n                    //*************************************************\n                    //kill connection\n                    //*************************************************\n                    new Promise(killCon.query.bind(killCon, {\n                        sql: `KILL ${self.info.threadId}`\n                    })).finally((err)=>{\n                        const destroyError = Errors.createFatalError(\"Connection destroyed, command was killed\", Errors.ER_CMD_NOT_EXECUTED_DESTROYED, self.info);\n                        if (self.opts.logger.error) self.opts.logger.error(destroyError);\n                        self.socketErrorDispatchToQueries(destroyError);\n                        if (self.socket) {\n                            const sok = self.socket;\n                            process.nextTick(()=>{\n                                sok.destroy();\n                            });\n                        }\n                        self.status = Status.CLOSED;\n                        self.clear();\n                        new Promise(killCon.end.bind(killCon)).catch(()=>{});\n                    });\n                }).catch(()=>{\n                    //*************************************************\n                    //failing to create a kill connection, end normally\n                    //*************************************************\n                    const ended = ()=>{\n                        let sock = self.socket;\n                        self.clear();\n                        self.status = Status.CLOSED;\n                        sock.destroy();\n                        self.receiveQueue.clear();\n                    };\n                    const quitCmd = new Quit(ended, ended);\n                    self.sendQueue.push(quitCmd);\n                    self.receiveQueue.push(quitCmd);\n                    if (self.sendQueue.length === 1) {\n                        process.nextTick(self.nextSendCmd.bind(self));\n                    }\n                });\n            } else {\n                this.status = Status.CLOSED;\n                this.socket.destroy();\n                this.clear();\n            }\n        }\n    }\n    pause() {\n        this.socket.pause();\n    }\n    resume() {\n        this.socket.resume();\n    }\n    format(sql, values) {\n        const err = Errors.createError('\"Connection.format intentionally not implemented. please use Connection.query(sql, values), it will be more secure and faster', Errors.ER_NOT_IMPLEMENTED_FORMAT, this.info, \"0A000\");\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        throw err;\n    }\n    //*****************************************************************\n    // additional public methods\n    //*****************************************************************\n    /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */ serverVersion() {\n        if (!this.info.serverVersion) {\n            const err = new Error(\"cannot know if server information until connection is established\");\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            throw err;\n        }\n        return this.info.serverVersion.raw;\n    }\n    /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */ debug(val) {\n        if (typeof val === \"boolean\") {\n            if (val && !this.opts.logger.network) this.opts.logger.network = console.log;\n        } else if (typeof val === \"function\") {\n            this.opts.logger.network = val;\n        }\n        this.opts.emit(\"debug\", val);\n    }\n    debugCompress(val) {\n        if (val) {\n            if (typeof val === \"boolean\") {\n                this.opts.debugCompress = val;\n                if (val && !this.opts.logger.network) this.opts.logger.network = console.log;\n            } else if (typeof val === \"function\") {\n                this.opts.debugCompress = true;\n                this.opts.logger.network = val;\n            }\n        } else this.opts.debugCompress = false;\n    }\n    //*****************************************************************\n    // internal public testing methods\n    //*****************************************************************\n    get __tests() {\n        return new TestMethods(this.info.collation, this.socket);\n    }\n    //*****************************************************************\n    // internal methods\n    //*****************************************************************\n    /**\n   * Use multiple COM_STMT_EXECUTE or COM_STMT_BULK_EXECUTE\n   *\n   * @param values current batch values\n   * @param _options batch option\n   * @return {boolean} indicating if can use bulk command\n   */ _canUseBulk(values, _options) {\n        if (_options && _options.fullResult) return false;\n        // not using info.isMariaDB() directly in case of callback use,\n        // without connection being completely finished.\n        if (this.info.serverVersion && this.info.serverVersion.mariaDb && this.info.hasMinVersion(10, 2, 7) && this.opts.bulk && (this.info.serverCapabilities & Capabilities.MARIADB_CLIENT_STMT_BULK_OPERATIONS) > 0n) {\n            //ensure that there is no stream object\n            if (values !== undefined) {\n                if (!this.opts.namedPlaceholders) {\n                    //ensure that all parameters have same length\n                    //single array is considered as an array of single element.\n                    const paramLen = Array.isArray(values[0]) ? values[0].length : values[0] ? 1 : 0;\n                    if (paramLen === 0) return false;\n                    for(let r = 0; r < values.length; r++){\n                        let row = values[r];\n                        if (!Array.isArray(row)) row = [\n                            row\n                        ];\n                        if (paramLen !== row.length) {\n                            return false;\n                        }\n                        // streaming data not permitted\n                        for(let j = 0; j < paramLen; j++){\n                            const val = row[j];\n                            if (val != null && typeof val === \"object\" && typeof val.pipe === \"function\" && typeof val.read === \"function\") {\n                                return false;\n                            }\n                        }\n                    }\n                } else {\n                    for(let r = 0; r < values.length; r++){\n                        let row = values[r];\n                        const keys = Object.keys(row);\n                        for(let j = 0; j < keys.length; j++){\n                            const val = row[keys[j]];\n                            if (val != null && typeof val === \"object\" && typeof val.pipe === \"function\" && typeof val.read === \"function\") {\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    executeSessionVariableQuery() {\n        if (this.opts.sessionVariables) {\n            const values = [];\n            let sessionQuery = \"set \";\n            let keys = Object.keys(this.opts.sessionVariables);\n            if (keys.length > 0) {\n                for(let k = 0; k < keys.length; ++k){\n                    sessionQuery += (k !== 0 ? \",\" : \"\") + \"@@\" + keys[k].replace(/[^a-z0-9_]/gi, \"\") + \"=?\";\n                    values.push(this.opts.sessionVariables[keys[k]]);\n                }\n                return new Promise(this.query.bind(this, new CommandParameter(sessionQuery, values))).catch((initialErr)=>{\n                    const err = Errors.createFatalError(`Error setting session variable (value ${JSON.stringify(this.opts.sessionVariables)}). Error: ${initialErr.message}`, Errors.ER_SETTING_SESSION_ERROR, this.info, \"08S01\", sessionQuery);\n                    if (this.opts.logger.error) this.opts.logger.error(err);\n                    return Promise.reject(err);\n                });\n            }\n        }\n        return Promise.resolve();\n    }\n    /**\n   * set charset to utf8\n   * @returns {Promise<void>}\n   * @private\n   */ handleCharset() {\n        if (this.opts.collation) {\n            if (this.opts.collation.index < 255) return Promise.resolve();\n            const charset = this.opts.collation.charset === \"utf8\" && this.opts.collation.maxLength === 4 ? \"utf8mb4\" : this.opts.collation.charset;\n            return new Promise(this.query.bind(this, new CommandParameter(`SET NAMES ${charset} COLLATE ${this.opts.collation.name}`)));\n        }\n        // MXS-4635: server can some information directly on first Ok_Packet, like not truncated collation\n        // in this case, avoid useless SET NAMES utf8mb4 command\n        if (!this.opts.charset && this.info.collation.charset === \"utf8\" && this.info.collation.maxLength === 4) {\n            return Promise.resolve();\n        }\n        return new Promise(this.query.bind(this, new CommandParameter(`SET NAMES ${this.opts.charset ? this.opts.charset : \"utf8mb4\"}`)));\n    }\n    /**\n   * Asking server timezone if not set in case of 'auto'\n   * @returns {Promise<void>}\n   * @private\n   */ handleTimezone() {\n        const conn = this;\n        if (this.opts.timezone === \"local\") this.opts.timezone = undefined;\n        if (this.opts.timezone === \"auto\") {\n            return new Promise(this.query.bind(this, new CommandParameter(\"SELECT @@system_time_zone stz, @@time_zone tz\"))).then((res)=>{\n                const serverTimezone = res[0].tz === \"SYSTEM\" ? res[0].stz : res[0].tz;\n                const localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n                if (serverTimezone === localTz || convertFixedTime(serverTimezone, conn) === convertFixedTime(localTz, conn)) {\n                    //server timezone is identical to client tz, skipping setting\n                    this.opts.timezone = localTz;\n                    return Promise.resolve();\n                }\n                return this._setSessionTimezone(convertFixedTime(localTz, conn));\n            });\n        }\n        if (this.opts.timezone) {\n            return this._setSessionTimezone(convertFixedTime(this.opts.timezone, conn));\n        }\n        return Promise.resolve();\n    }\n    _setSessionTimezone(tz) {\n        return new Promise(this.query.bind(this, new CommandParameter(\"SET time_zone=?\", [\n            tz\n        ]))).catch((err)=>{\n            const er = Errors.createFatalError(`setting timezone '${tz}' fails on server.\\n look at https://mariadb.com/kb/en/mysql_tzinfo_to_sql/ to load IANA timezone. `, Errors.ER_WRONG_IANA_TIMEZONE, this.info);\n            if (this.opts.logger.error) this.opts.logger.error(er);\n            return Promise.reject(er);\n        });\n    }\n    checkServerVersion() {\n        if (!this.opts.forceVersionCheck) {\n            return Promise.resolve();\n        }\n        return new Promise(this.query.bind(this, new CommandParameter(\"SELECT @@VERSION AS v\"))).then((function(res) {\n            this.info.serverVersion.raw = res[0].v;\n            this.info.serverVersion.mariaDb = this.info.serverVersion.raw.includes(\"MariaDB\");\n            ConnectionInformation.parseVersionString(this.info);\n            return Promise.resolve();\n        }).bind(this));\n    }\n    executeInitQuery() {\n        if (this.opts.initSql) {\n            const initialArr = Array.isArray(this.opts.initSql) ? this.opts.initSql : [\n                this.opts.initSql\n            ];\n            const initialPromises = [];\n            initialArr.forEach((sql)=>{\n                initialPromises.push(new Promise(this.query.bind(this, new CommandParameter(sql))));\n            });\n            return Promise.all(initialPromises).catch((initialErr)=>{\n                const err = Errors.createFatalError(`Error executing initial sql command: ${initialErr.message}`, Errors.ER_INITIAL_SQL_ERROR, this.info);\n                if (this.opts.logger.error) this.opts.logger.error(err);\n                return Promise.reject(err);\n            });\n        }\n        return Promise.resolve();\n    }\n    executeSessionTimeout() {\n        if (this.opts.queryTimeout) {\n            if (this.info.isMariaDB() && this.info.hasMinVersion(10, 1, 2)) {\n                const query = `SET max_statement_time=${this.opts.queryTimeout / 1000}`;\n                new Promise(this.query.bind(this, new CommandParameter(query))).catch((function(initialErr) {\n                    const err = Errors.createFatalError(`Error setting session queryTimeout: ${initialErr.message}`, Errors.ER_INITIAL_TIMEOUT_ERROR, this.info, \"08S01\", query);\n                    if (this.opts.logger.error) this.opts.logger.error(err);\n                    return Promise.reject(err);\n                }).bind(this));\n            } else {\n                const err = Errors.createError(`Can only use queryTimeout for MariaDB server after 10.1.1. queryTimeout value: ${this.opts.queryTimeout}`, Errors.ER_TIMEOUT_NOT_SUPPORTED, this.info, \"HY000\", this.opts.queryTimeout);\n                if (this.opts.logger.error) this.opts.logger.error(err);\n                return Promise.reject(err);\n            }\n        }\n        return Promise.resolve();\n    }\n    getSocket() {\n        return this.socket;\n    }\n    /**\n   * Initialize socket and associate events.\n   * @private\n   */ streamInitSocket() {\n        if (this.opts.connectTimeout) {\n            this.timeout = setTimeout(this.connectTimeoutReached.bind(this), this.opts.connectTimeout, Date.now());\n        }\n        if (this.opts.socketPath) {\n            this.socket = Net.connect(this.opts.socketPath);\n        } else if (this.opts.stream) {\n            if (typeof this.opts.stream === \"function\") {\n                const tmpSocket = this.opts.stream((function(err, stream) {\n                    if (err) {\n                        this.authFailHandler(err);\n                        return;\n                    }\n                    this.socket = stream ? stream : Net.connect(this.opts.port, this.opts.host);\n                    this.socketInit();\n                }).bind(this));\n                if (tmpSocket) {\n                    this.socket = tmpSocket;\n                    this.socketInit();\n                }\n            } else {\n                this.authFailHandler(Errors.createError(\"stream option is not a function. stream must be a function with (error, callback) parameter\", Errors.ER_BAD_PARAMETER_VALUE, this.info));\n            }\n            return;\n        } else {\n            this.socket = Net.connect(this.opts.port, this.opts.host);\n            this.socket.setNoDelay(true);\n        }\n        this.socketInit();\n    }\n    socketInit() {\n        this.socket.on(\"data\", this.streamIn.onData.bind(this.streamIn));\n        this.socket.on(\"error\", this.socketErrorHandler.bind(this));\n        this.socket.on(\"end\", this.socketErrorHandler.bind(this));\n        this.socket.on(\"connect\", (function() {\n            if (this.status === Status.CONNECTING) {\n                this.status = Status.AUTHENTICATING;\n                this.socket.setTimeout(this.opts.socketTimeout, this.socketTimeoutReached.bind(this));\n                this.socket.setNoDelay(true);\n                // keep alive for socket. This won't reset server wait_timeout use pool option idleTimeout for that\n                if (this.opts.keepAliveDelay) {\n                    this.socket.setKeepAlive(true, this.opts.keepAliveDelay);\n                }\n            }\n        }).bind(this));\n        this.socket.writeBuf = (buf)=>this.socket.write(buf);\n        this.socket.flush = ()=>{};\n        this.streamOut.setStream(this.socket);\n    }\n    /**\n   * Authentication success result handler.\n   *\n   * @private\n   */ authSucceedHandler() {\n        //enable packet compression according to option\n        if (this.opts.compress) {\n            if (this.info.serverCapabilities & Capabilities.COMPRESS) {\n                this.streamOut.setStream(new CompressionOutputStream(this.socket, this.opts, this.info));\n                this.streamIn = new CompressionInputStream(this.streamIn, this.receiveQueue, this.opts, this.info);\n                this.socket.removeAllListeners(\"data\");\n                this.socket.on(\"data\", this.streamIn.onData.bind(this.streamIn));\n            } else if (this.opts.logger.error) {\n                this.opts.logger.error(Errors.createError(\"connection is configured to use packet compression, but the server doesn't have this capability\", Errors.ER_COMPRESSION_NOT_SUPPORTED, this.info));\n            }\n        }\n        this.addCommand = this.opts.pipelining ? this.addCommandEnablePipeline : this.addCommandEnable;\n        const conn = this;\n        this.status = Status.INIT_CMD;\n        this.executeSessionVariableQuery().then(conn.handleCharset.bind(conn)).then(this.handleTimezone.bind(this)).then(this.checkServerVersion.bind(this)).then(this.executeInitQuery.bind(this)).then(this.executeSessionTimeout.bind(this)).then(()=>{\n            clearTimeout(this.timeout);\n            conn.status = Status.CONNECTED;\n            process.nextTick(conn.connectResolveFct, conn);\n            const commands = conn.waitingAuthenticationQueue.toArray();\n            commands.forEach((cmd)=>{\n                conn.addCommand(cmd);\n            });\n            conn.waitingAuthenticationQueue = null;\n            conn.connectRejectFct = null;\n            conn.connectResolveFct = null;\n        }).catch((err)=>{\n            if (!err.fatal) {\n                const res = ()=>{\n                    conn.authFailHandler.call(conn, err);\n                };\n                conn.end(res, res);\n            } else {\n                conn.authFailHandler.call(conn, err);\n            }\n            return Promise.reject(err);\n        });\n    }\n    /**\n   * Authentication failed result handler.\n   *\n   * @private\n   */ authFailHandler(err) {\n        clearTimeout(this.timeout);\n        if (this.connectRejectFct) {\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            //remove handshake command\n            this.receiveQueue.shift();\n            this.fatalError(err, true);\n            process.nextTick(this.connectRejectFct, err);\n            this.connectRejectFct = null;\n        }\n    }\n    /**\n   * Create TLS socket and associate events.\n   *\n   * @param callback  callback function when done\n   * @private\n   */ createSecureContext(callback) {\n        const sslOption = Object.assign({}, this.opts.ssl, {\n            servername: this.opts.host,\n            socket: this.socket\n        });\n        try {\n            const secureSocket = tls.connect(sslOption, callback);\n            secureSocket.on(\"data\", this.streamIn.onData.bind(this.streamIn));\n            secureSocket.on(\"error\", this.socketErrorHandler.bind(this));\n            secureSocket.on(\"end\", this.socketErrorHandler.bind(this));\n            secureSocket.writeBuf = (buf)=>secureSocket.write(buf);\n            secureSocket.flush = ()=>{};\n            this.socket.removeAllListeners(\"data\");\n            this.socket = secureSocket;\n            this.streamOut.setStream(secureSocket);\n        } catch (err) {\n            this.socketErrorHandler(err);\n        }\n    }\n    /**\n   * Handle packet when no packet is expected.\n   * (there can be an ERROR packet send by server/proxy to inform that connection is ending).\n   *\n   * @param packet  packet\n   * @private\n   */ unexpectedPacket(packet) {\n        if (packet && packet.peek() === 0xff) {\n            //can receive unexpected error packet from server/proxy\n            //to inform that connection is closed (usually by timeout)\n            let err = packet.readError(this.info);\n            if (err.fatal && this.status < Status.CLOSING) {\n                this.emit(\"error\", err);\n                if (this.opts.logger.error) this.opts.logger.error(err);\n                this.end(()=>{}, ()=>{});\n            }\n        } else if (this.status < Status.CLOSING) {\n            const err = Errors.createFatalError(`receiving packet from server without active commands\\nconn:${this.info.threadId ? this.info.threadId : -1}(${packet.pos},${packet.end})\\n${Utils.log(this.opts, packet.buf, packet.pos, packet.end)}`, Errors.ER_UNEXPECTED_PACKET, this.info);\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            this.emit(\"error\", err);\n            this.destroy();\n        }\n    }\n    /**\n   * Handle connection timeout.\n   *\n   * @private\n   */ connectTimeoutReached(initialConnectionTime) {\n        this.timeout = null;\n        const handshake = this.receiveQueue.peekFront();\n        const err = Errors.createFatalError(`Connection timeout: failed to create socket after ${Date.now() - initialConnectionTime}ms`, Errors.ER_CONNECTION_TIMEOUT, this.info, \"08S01\", null, handshake ? handshake.stack : null);\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        this.authFailHandler(err);\n    }\n    /**\n   * Handle socket timeout.\n   *\n   * @private\n   */ socketTimeoutReached() {\n        const err = Errors.createFatalError(\"socket timeout\", Errors.ER_SOCKET_TIMEOUT, this.info);\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        this.fatalError(err, true);\n    }\n    /**\n   * Add command to waiting queue until authentication.\n   *\n   * @param cmd         command\n   * @private\n   */ addCommandQueue(cmd) {\n        this.waitingAuthenticationQueue.push(cmd);\n    }\n    /**\n   * Add command to command sending and receiving queue.\n   *\n   * @param cmd         command\n   * @private\n   */ addCommandEnable(cmd) {\n        cmd.once(\"end\", this._sendNextCmdImmediate.bind(this));\n        //send immediately only if no current active receiver\n        if (this.sendQueue.isEmpty() && this.receiveQueue.isEmpty()) {\n            this.receiveQueue.push(cmd);\n            cmd.start(this.streamOut, this.opts, this.info);\n        } else {\n            this.receiveQueue.push(cmd);\n            this.sendQueue.push(cmd);\n        }\n    }\n    /**\n   * Add command to command sending and receiving queue using pipelining\n   *\n   * @param cmd         command\n   * @private\n   */ addCommandEnablePipeline(cmd) {\n        cmd.once(\"send_end\", this._sendNextCmdImmediate.bind(this));\n        this.receiveQueue.push(cmd);\n        if (this.sendQueue.isEmpty()) {\n            cmd.start(this.streamOut, this.opts, this.info);\n            if (cmd.sending) {\n                this.sendQueue.push(cmd);\n                cmd.prependOnceListener(\"send_end\", this.sendQueue.shift.bind(this.sendQueue));\n            }\n        } else {\n            this.sendQueue.push(cmd);\n        }\n    }\n    /**\n   * Replacing command when connection is closing or closed to send a proper error message.\n   *\n   * @param cmd         command\n   * @private\n   */ addCommandDisabled(cmd) {\n        const err = cmd.throwNewError(\"Cannot execute new commands: connection closed\", true, this.info, \"08S01\", Errors.ER_CMD_CONNECTION_CLOSED);\n        if (this.opts.logger.error) this.opts.logger.error(err);\n    }\n    /**\n   * Handle socket error.\n   *\n   * @param err               socket error\n   * @private\n   */ socketErrorHandler(err) {\n        if (this.status >= Status.CLOSING) return;\n        if (this.socket) {\n            this.socket.writeBuf = ()=>{};\n            this.socket.flush = ()=>{};\n        }\n        //socket has been ended without error\n        if (!err) {\n            err = Errors.createFatalError(\"socket has unexpectedly been closed\", Errors.ER_SOCKET_UNEXPECTED_CLOSE, this.info);\n        } else {\n            err.fatal = true;\n            err.sqlState = \"HY000\";\n        }\n        switch(this.status){\n            case Status.CONNECTING:\n            case Status.AUTHENTICATING:\n                const currentCmd = this.receiveQueue.peekFront();\n                if (currentCmd && currentCmd.stack && err) {\n                    err.stack += \"\\n From event:\\n\" + currentCmd.stack.substring(currentCmd.stack.indexOf(\"\\n\") + 1);\n                }\n                this.authFailHandler(err);\n                break;\n            default:\n                this.fatalError(err, false);\n        }\n    }\n    /**\n   * Fatal unexpected error : closing connection, and throw exception.\n   */ fatalError(err, avoidThrowError) {\n        if (this.status >= Status.CLOSING) {\n            this.socketErrorDispatchToQueries(err);\n            return;\n        }\n        const mustThrowError = this.status !== Status.CONNECTING;\n        this.status = Status.CLOSING;\n        //prevent executing new commands\n        this.addCommand = this.addCommandDisabled;\n        if (this.socket) {\n            this.socket.removeAllListeners(\"error\");\n            this.socket.removeAllListeners(\"timeout\");\n            this.socket.removeAllListeners(\"close\");\n            this.socket.removeAllListeners(\"data\");\n            if (!this.socket.destroyed) this.socket.destroy();\n            this.socket = undefined;\n        }\n        this.status = Status.CLOSED;\n        const errorThrownByCmd = this.socketErrorDispatchToQueries(err);\n        if (mustThrowError) {\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            if (this.listenerCount(\"error\") > 0) {\n                this.emit(\"error\", err);\n                this.emit(\"end\");\n                this.clear();\n            } else {\n                this.emit(\"end\");\n                this.clear();\n                //error will be thrown if no error listener and no command did throw the exception\n                if (!avoidThrowError && !errorThrownByCmd) throw err;\n            }\n        } else {\n            this.clear();\n        }\n    }\n    /**\n   * Dispatch fatal error to current running queries.\n   *\n   * @param err        the fatal error\n   * @return {boolean} return if error has been relayed to queries\n   */ socketErrorDispatchToQueries(err) {\n        let receiveCmd;\n        let errorThrownByCmd = false;\n        while(receiveCmd = this.receiveQueue.shift()){\n            if (receiveCmd && receiveCmd.onPacketReceive) {\n                errorThrownByCmd = true;\n                setImmediate(receiveCmd.throwError.bind(receiveCmd, err, this.info));\n            }\n        }\n        return errorThrownByCmd;\n    }\n    /**\n   * Will send next command in queue if any.\n   *\n   * @private\n   */ nextSendCmd() {\n        let sendCmd;\n        if (sendCmd = this.sendQueue.shift()) {\n            if (sendCmd.sending) {\n                this.sendQueue.unshift(sendCmd);\n            } else {\n                sendCmd.start(this.streamOut, this.opts, this.info);\n                if (sendCmd.sending) {\n                    this.sendQueue.unshift(sendCmd);\n                    sendCmd.prependOnceListener(\"send_end\", this.sendQueue.shift.bind(this.sendQueue));\n                }\n            }\n        }\n    }\n    /**\n   * Change transaction state.\n   *\n   * @param cmdParam command parameter\n   * @param resolve success function to call\n   * @param reject error function to call\n   * @private\n   */ changeTransaction(cmdParam, resolve, reject) {\n        //if command in progress, driver cannot rely on status and must execute query\n        if (this.status >= Status.CLOSING) {\n            const err = Errors.createFatalError(\"Cannot execute new commands: connection closed\", Errors.ER_CMD_CONNECTION_CLOSED, this.info, \"08S01\", cmdParam.sql);\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            reject(err);\n            return;\n        }\n        //Command in progress => must execute query\n        //or if no command in progress, can rely on status to know if query is needed\n        if (this.receiveQueue.peekFront() || this.info.status & ServerStatus.STATUS_IN_TRANS) {\n            const cmd = new Query(resolve, (err)=>{\n                if (this.opts.logger.error) this.opts.logger.error(err);\n                reject(err);\n            }, this.opts, cmdParam);\n            this.addCommand(cmd);\n        } else resolve();\n    }\n    changeUser(cmdParam, resolve, reject) {\n        if (!this.info.isMariaDB()) {\n            const err = Errors.createError(\"method changeUser not available for MySQL server due to Bug #83472\", Errors.ER_MYSQL_CHANGE_USER_BUG, this.info, \"0A000\");\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            reject(err);\n            return;\n        }\n        if (this.status < Status.CLOSING) {\n            this.addCommand = this.addCommandEnable;\n        }\n        let conn = this;\n        if (cmdParam.opts && cmdParam.opts.collation && typeof cmdParam.opts.collation === \"string\") {\n            const val = cmdParam.opts.collation.toUpperCase();\n            cmdParam.opts.collation = Collations.fromName(cmdParam.opts.collation.toUpperCase());\n            if (cmdParam.opts.collation === undefined) return reject(new RangeError(`Unknown collation '${val}'`));\n        }\n        this.addCommand(new ChangeUser(cmdParam, this.opts, (res)=>{\n            if (conn.status < Status.CLOSING && conn.opts.pipelining) conn.addCommand = conn.addCommandEnablePipeline;\n            if (cmdParam.opts && cmdParam.opts.collation) conn.opts.collation = cmdParam.opts.collation;\n            conn.handleCharset().then(()=>{\n                if (cmdParam.opts && cmdParam.opts.collation) {\n                    conn.info.collation = cmdParam.opts.collation;\n                    conn.opts.emit(\"collation\", cmdParam.opts.collation);\n                }\n                resolve(res);\n            }).catch((err)=>{\n                const res = ()=>conn.authFailHandler.call(conn, err);\n                if (!err.fatal) {\n                    conn.end(res, res);\n                } else {\n                    res();\n                }\n                reject(err);\n            });\n        }, this.authFailHandler.bind(this, reject), this.getSocket.bind(this)));\n    }\n    query(cmdParam, resolve, reject) {\n        if (!cmdParam.sql) return reject(Errors.createError(\"sql parameter is mandatory\", Errors.ER_UNDEFINED_SQL, this.info, \"HY000\", null, false, cmdParam.stack));\n        const cmd = new Query(resolve, (err)=>{\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            reject(err);\n        }, this.opts, cmdParam);\n        this.addCommand(cmd);\n    }\n    prepare(cmdParam, resolve, reject) {\n        if (!cmdParam.sql) return reject(Errors.createError(\"sql parameter is mandatory\", Errors.ER_UNDEFINED_SQL, this.info, \"HY000\"));\n        if (this.prepareCache && (this.sendQueue.isEmpty() || !this.receiveQueue.peekFront())) {\n            // no command in queue, database is then considered ok, and cache can be search right now\n            const cachedPrepare = this.prepareCache.get(cmdParam.sql);\n            if (cachedPrepare) {\n                return resolve(cachedPrepare);\n            }\n        }\n        const cmd = new Prepare(resolve, (err)=>{\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            reject(err);\n        }, this.opts, cmdParam, this);\n        this.addCommand(cmd);\n    }\n    importFile(cmdParam, resolve, reject) {\n        const conn = this;\n        if (!cmdParam || !cmdParam.file) {\n            return reject(Errors.createError(\"SQL file parameter is mandatory\", Errors.ER_MISSING_SQL_PARAMETER, conn.info, \"HY000\", null, false, cmdParam.stack));\n        }\n        const prevAddCommand = this.addCommand.bind(conn);\n        this.waitingAuthenticationQueue = new Queue();\n        this.addCommand = this.addCommandQueue;\n        const tmpQuery = function(sql, resolve, reject) {\n            const cmd = new Query(resolve, (err)=>{\n                if (conn.opts.logger.error) conn.opts.logger.error(err);\n                reject(err);\n            }, conn.opts, new CommandParameter(sql, null, {}));\n            prevAddCommand(cmd);\n        };\n        let prevDatabase = null;\n        return (cmdParam.skipDbCheck ? Promise.resolve() : new Promise(tmpQuery.bind(conn, \"SELECT DATABASE() as db\"))).then((res)=>{\n            prevDatabase = res ? res[0].db : null;\n            if (cmdParam.skipDbCheck && !conn.opts.database || !cmdParam.skipDbCheck && !cmdParam.database && !prevDatabase) {\n                return reject(Errors.createError(\"Database parameter is not set and no database is selected\", Errors.ER_MISSING_DATABASE_PARAMETER, conn.info, \"HY000\", null, false, cmdParam.stack));\n            }\n            const searchDbPromise = cmdParam.database ? new Promise(tmpQuery.bind(conn, `USE \\`${cmdParam.database.replace(/`/gi, \"``\")}\\``)) : Promise.resolve();\n            return searchDbPromise.then(()=>{\n                const endingFunction = ()=>{\n                    if (conn.status < Status.CLOSING) {\n                        conn.addCommand = conn.addCommandEnable.bind(conn);\n                        if (conn.status < Status.CLOSING && conn.opts.pipelining) {\n                            conn.addCommand = conn.addCommandEnablePipeline.bind(conn);\n                        }\n                        const commands = conn.waitingAuthenticationQueue.toArray();\n                        commands.forEach((cmd)=>conn.addCommand(cmd));\n                        conn.waitingAuthenticationQueue = null;\n                    }\n                };\n                return fsPromises.open(cmdParam.file, \"r\").then(async (fd)=>{\n                    const buf = {\n                        buffer: Buffer.allocUnsafe(16384),\n                        offset: 0,\n                        end: 0\n                    };\n                    const queryPromises = [];\n                    let cmdError = null;\n                    while(!cmdError){\n                        try {\n                            const res = await fd.read(buf.buffer, buf.end, buf.buffer.length - buf.end, null);\n                            if (res.bytesRead == 0) {\n                                // end of file reached.\n                                fd.close().catch(()=>{});\n                                if (cmdError) {\n                                    endingFunction();\n                                    reject(cmdError);\n                                    return;\n                                }\n                                await Promise.allSettled(queryPromises).then(()=>{\n                                    if (!cmdParam.skipDbCheck && cmdParam.database && cmdParam.database != prevDatabase) {\n                                        return new Promise(tmpQuery.bind(conn, `USE \\`${prevDatabase.replace(/`/gi, \"``\")}\\``));\n                                    }\n                                    return Promise.resolve();\n                                }).then(()=>{\n                                    endingFunction();\n                                    if (cmdError) {\n                                        reject(cmdError);\n                                    }\n                                    resolve();\n                                }).catch((err)=>{\n                                    endingFunction();\n                                    reject(err);\n                                });\n                                return;\n                            } else {\n                                buf.end += res.bytesRead;\n                                const queries = Parse.parseQueries(buf);\n                                const queryIntermediatePromise = queries.flatMap((element)=>{\n                                    return new Promise(tmpQuery.bind(conn, element)).catch((err)=>{\n                                        cmdError = err;\n                                    });\n                                });\n                                queryPromises.push(...queryIntermediatePromise);\n                                if (buf.offset == buf.end) {\n                                    buf.offset = 0;\n                                    buf.end = 0;\n                                } else {\n                                    // ensure that buffer can at least read 8k bytes,\n                                    // either by copying remaining data on used part or growing buffer\n                                    if (buf.offset > 8192) {\n                                        // reuse buffer, copying remaining data begin of buffer\n                                        buf.buffer.copy(buf.buffer, 0, buf.offset, buf.end);\n                                        buf.end -= buf.offset;\n                                        buf.offset = 0;\n                                    } else if (buf.buffer.length - buf.end < 8192) {\n                                        // grow buffer\n                                        const tmpBuf = Buffer.allocUnsafe(buf.buffer.length << 1);\n                                        buf.buffer.copy(tmpBuf, 0, buf.offset, buf.end);\n                                        buf.buffer = tmpBuf;\n                                        buf.end -= buf.offset;\n                                        buf.offset = 0;\n                                    }\n                                }\n                            }\n                        } catch (e) {\n                            fd.close().catch(()=>{});\n                            endingFunction();\n                            Promise.allSettled(queryPromises).catch(()=>{});\n                            return reject(Errors.createError(e.message, Errors.ER_SQL_FILE_ERROR, conn.info, \"HY000\", null, false, cmdParam.stack));\n                        }\n                    }\n                    if (cmdError) {\n                        endingFunction();\n                        reject(cmdError);\n                    }\n                }).catch((err)=>{\n                    endingFunction();\n                    if (err.code === \"ENOENT\") {\n                        return reject(Errors.createError(`SQL file parameter '${cmdParam.file}' doesn't exists`, Errors.ER_MISSING_SQL_FILE, conn.info, \"HY000\", null, false, cmdParam.stack));\n                    }\n                    return reject(Errors.createError(err.message, Errors.ER_SQL_FILE_ERROR, conn.info, \"HY000\", null, false, cmdParam.stack));\n                });\n            });\n        });\n    }\n    /**\n   * Clearing connection variables when ending.\n   *\n   * @private\n   */ clear() {\n        this.sendQueue.clear();\n        this.opts.removeAllListeners();\n        this.streamOut = undefined;\n        this.socket = undefined;\n    }\n    get threadId() {\n        return this.info ? this.info.threadId : null;\n    }\n    _sendNextCmdImmediate() {\n        if (!this.sendQueue.isEmpty()) {\n            setImmediate(this.nextSendCmd.bind(this));\n        }\n    }\n    _closePrepare(prepareResultPacket) {\n        this.addCommand(new ClosePrepare(new CommandParameter(null, null, null, null), ()=>{}, ()=>{}, prepareResultPacket));\n    }\n    _logAndReject(reject, err) {\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        reject(err);\n    }\n}\nclass TestMethods {\n    #collation;\n    #socket;\n    constructor(collation, socket){\n        this.#collation = collation;\n        this.#socket = socket;\n    }\n    getCollation() {\n        return this.#collation;\n    }\n    getSocket() {\n        return this.#socket;\n    }\n}\nmodule.exports = Connection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/connection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/const/capabilities.js":
/*!********************************************************!*\
  !*** ./node_modules/mariadb/lib/const/capabilities.js ***!
  \********************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n/**\n * Capabilities list ( with 'CLIENT_' removed)\n * see : https://mariadb.com/kb/en/library/1-connecting-connecting/#capabilities\n */ /* mysql/old mariadb server/client */ \nmodule.exports.MYSQL = 1n;\n/* Found instead of affected rows */ module.exports.FOUND_ROWS = 2n;\n/* get all column flags */ module.exports.LONG_FLAG = 4n;\n/* one can specify db on connect */ module.exports.CONNECT_WITH_DB = 8n;\n/* don't allow database.table.column */ module.exports.NO_SCHEMA = 1n << 4n;\n/* can use compression protocol */ module.exports.COMPRESS = 1n << 5n;\n/* odbc client */ module.exports.ODBC = 1n << 6n;\n/* can use LOAD DATA LOCAL */ module.exports.LOCAL_FILES = 1n << 7n;\n/* ignore spaces before '' */ module.exports.IGNORE_SPACE = 1n << 8n;\n/* new 4.1 protocol */ module.exports.PROTOCOL_41 = 1n << 9n;\n/* this is an interactive client */ module.exports.INTERACTIVE = 1n << 10n;\n/* switch to ssl after handshake */ module.exports.SSL = 1n << 11n;\n/* IGNORE sigpipes */ module.exports.IGNORE_SIGPIPE = 1n << 12n;\n/* client knows about transactions */ module.exports.TRANSACTIONS = 1n << 13n;\n/* old flag for 4.1 protocol  */ module.exports.RESERVED = 1n << 14n;\n/* new 4.1 authentication */ module.exports.SECURE_CONNECTION = 1n << 15n;\n/* enable/disable multi-stmt support */ module.exports.MULTI_STATEMENTS = 1n << 16n;\n/* enable/disable multi-results */ module.exports.MULTI_RESULTS = 1n << 17n;\n/* multi-results in ps-protocol */ module.exports.PS_MULTI_RESULTS = 1n << 18n;\n/* client supports plugin authentication */ module.exports.PLUGIN_AUTH = 1n << 19n;\n/* permits connection attributes */ module.exports.CONNECT_ATTRS = 1n << 20n;\n/* Enable authentication response packet to be larger than 255 bytes. */ module.exports.PLUGIN_AUTH_LENENC_CLIENT_DATA = 1n << 21n;\n/* Don't close the connection for a connection with expired password. */ module.exports.CAN_HANDLE_EXPIRED_PASSWORDS = 1n << 22n;\n/* Capable of handling server state change information. Its a hint to the\n  server to include the state change information in Ok packet. */ module.exports.SESSION_TRACK = 1n << 23n;\n/* Client no longer needs EOF packet */ module.exports.DEPRECATE_EOF = 1n << 24n;\nmodule.exports.SSL_VERIFY_SERVER_CERT = 1n << 30n;\n/* MariaDB extended capabilities */ /* Permit bulk insert*/ module.exports.MARIADB_CLIENT_STMT_BULK_OPERATIONS = 1n << 34n;\n/* Clients supporting extended metadata */ module.exports.MARIADB_CLIENT_EXTENDED_TYPE_INFO = 1n << 35n;\nmodule.exports.MARIADB_CLIENT_CACHE_METADATA = 1n << 36n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29uc3QvY2FwYWJpbGl0aWVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxrREFBa0Q7QUFFbEQ7OztDQUdDLEdBQ0QsbUNBQW1DO0FBQ25DQSxvQkFBb0IsR0FBRyxFQUFFO0FBQ3pCLGtDQUFrQyxHQUNsQ0EseUJBQXlCLEdBQUcsRUFBRTtBQUM5Qix3QkFBd0IsR0FDeEJBLHdCQUF3QixHQUFHLEVBQUU7QUFDN0IsaUNBQWlDLEdBQ2pDQSw4QkFBOEIsR0FBRyxFQUFFO0FBQ25DLHFDQUFxQyxHQUNyQ0Esd0JBQXdCLEdBQUcsRUFBRSxJQUFJLEVBQUU7QUFDbkMsZ0NBQWdDLEdBQ2hDQSx1QkFBdUIsR0FBRyxFQUFFLElBQUksRUFBRTtBQUNsQyxlQUFlLEdBQ2ZBLG1CQUFtQixHQUFHLEVBQUUsSUFBSSxFQUFFO0FBQzlCLDJCQUEyQixHQUMzQkEsMEJBQTBCLEdBQUcsRUFBRSxJQUFJLEVBQUU7QUFDckMsMkJBQTJCLEdBQzNCQSwyQkFBMkIsR0FBRyxFQUFFLElBQUksRUFBRTtBQUN0QyxvQkFBb0IsR0FDcEJBLDBCQUEwQixHQUFHLEVBQUUsSUFBSSxFQUFFO0FBQ3JDLGlDQUFpQyxHQUNqQ0EsMEJBQTBCLEdBQUcsRUFBRSxJQUFJLEdBQUc7QUFDdEMsaUNBQWlDLEdBQ2pDQSxrQkFBa0IsR0FBRyxFQUFFLElBQUksR0FBRztBQUM5QixtQkFBbUIsR0FDbkJBLDZCQUE2QixHQUFHLEVBQUUsSUFBSSxHQUFHO0FBQ3pDLG1DQUFtQyxHQUNuQ0EsMkJBQTJCLEdBQUcsRUFBRSxJQUFJLEdBQUc7QUFDdkMsOEJBQThCLEdBQzlCQSx1QkFBdUIsR0FBRyxFQUFFLElBQUksR0FBRztBQUNuQywwQkFBMEIsR0FDMUJBLGdDQUFnQyxHQUFHLEVBQUUsSUFBSSxHQUFHO0FBQzVDLHFDQUFxQyxHQUNyQ0EsK0JBQStCLEdBQUcsRUFBRSxJQUFJLEdBQUc7QUFDM0MsZ0NBQWdDLEdBQ2hDQSw0QkFBNEIsR0FBRyxFQUFFLElBQUksR0FBRztBQUN4QyxnQ0FBZ0MsR0FDaENBLCtCQUErQixHQUFHLEVBQUUsSUFBSSxHQUFHO0FBQzNDLHlDQUF5QyxHQUN6Q0EsMEJBQTBCLEdBQUcsRUFBRSxJQUFJLEdBQUc7QUFDdEMsaUNBQWlDLEdBQ2pDQSw0QkFBNEIsR0FBRyxFQUFFLElBQUksR0FBRztBQUN4QyxzRUFBc0UsR0FDdEVBLDZDQUE2QyxHQUFHLEVBQUUsSUFBSSxHQUFHO0FBQ3pELHNFQUFzRSxHQUN0RUEsMkNBQTJDLEdBQUcsRUFBRSxJQUFJLEdBQUc7QUFDdkQ7K0RBQytELEdBQy9EQSw0QkFBNEIsR0FBRyxFQUFFLElBQUksR0FBRztBQUN4QyxxQ0FBcUMsR0FDckNBLDRCQUE0QixHQUFHLEVBQUUsSUFBSSxHQUFHO0FBQ3hDQSxxQ0FBcUMsR0FBRyxFQUFFLElBQUksR0FBRztBQUVqRCxpQ0FBaUMsR0FFakMscUJBQXFCLEdBQ3JCQSxrREFBa0QsR0FBRyxFQUFFLElBQUksR0FBRztBQUU5RCx3Q0FBd0MsR0FDeENBLGdEQUFnRCxHQUFHLEVBQUUsSUFBSSxHQUFHO0FBQzVEQSw0Q0FBNEMsR0FBRyxFQUFFLElBQUksR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvbGliL2NvbnN0L2NhcGFiaWxpdGllcy5qcz9jMzBhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbi8qKlxuICogQ2FwYWJpbGl0aWVzIGxpc3QgKCB3aXRoICdDTElFTlRfJyByZW1vdmVkKVxuICogc2VlIDogaHR0cHM6Ly9tYXJpYWRiLmNvbS9rYi9lbi9saWJyYXJ5LzEtY29ubmVjdGluZy1jb25uZWN0aW5nLyNjYXBhYmlsaXRpZXNcbiAqL1xuLyogbXlzcWwvb2xkIG1hcmlhZGIgc2VydmVyL2NsaWVudCAqL1xubW9kdWxlLmV4cG9ydHMuTVlTUUwgPSAxbjtcbi8qIEZvdW5kIGluc3RlYWQgb2YgYWZmZWN0ZWQgcm93cyAqL1xubW9kdWxlLmV4cG9ydHMuRk9VTkRfUk9XUyA9IDJuO1xuLyogZ2V0IGFsbCBjb2x1bW4gZmxhZ3MgKi9cbm1vZHVsZS5leHBvcnRzLkxPTkdfRkxBRyA9IDRuO1xuLyogb25lIGNhbiBzcGVjaWZ5IGRiIG9uIGNvbm5lY3QgKi9cbm1vZHVsZS5leHBvcnRzLkNPTk5FQ1RfV0lUSF9EQiA9IDhuO1xuLyogZG9uJ3QgYWxsb3cgZGF0YWJhc2UudGFibGUuY29sdW1uICovXG5tb2R1bGUuZXhwb3J0cy5OT19TQ0hFTUEgPSAxbiA8PCA0bjtcbi8qIGNhbiB1c2UgY29tcHJlc3Npb24gcHJvdG9jb2wgKi9cbm1vZHVsZS5leHBvcnRzLkNPTVBSRVNTID0gMW4gPDwgNW47XG4vKiBvZGJjIGNsaWVudCAqL1xubW9kdWxlLmV4cG9ydHMuT0RCQyA9IDFuIDw8IDZuO1xuLyogY2FuIHVzZSBMT0FEIERBVEEgTE9DQUwgKi9cbm1vZHVsZS5leHBvcnRzLkxPQ0FMX0ZJTEVTID0gMW4gPDwgN247XG4vKiBpZ25vcmUgc3BhY2VzIGJlZm9yZSAnJyAqL1xubW9kdWxlLmV4cG9ydHMuSUdOT1JFX1NQQUNFID0gMW4gPDwgOG47XG4vKiBuZXcgNC4xIHByb3RvY29sICovXG5tb2R1bGUuZXhwb3J0cy5QUk9UT0NPTF80MSA9IDFuIDw8IDluO1xuLyogdGhpcyBpcyBhbiBpbnRlcmFjdGl2ZSBjbGllbnQgKi9cbm1vZHVsZS5leHBvcnRzLklOVEVSQUNUSVZFID0gMW4gPDwgMTBuO1xuLyogc3dpdGNoIHRvIHNzbCBhZnRlciBoYW5kc2hha2UgKi9cbm1vZHVsZS5leHBvcnRzLlNTTCA9IDFuIDw8IDExbjtcbi8qIElHTk9SRSBzaWdwaXBlcyAqL1xubW9kdWxlLmV4cG9ydHMuSUdOT1JFX1NJR1BJUEUgPSAxbiA8PCAxMm47XG4vKiBjbGllbnQga25vd3MgYWJvdXQgdHJhbnNhY3Rpb25zICovXG5tb2R1bGUuZXhwb3J0cy5UUkFOU0FDVElPTlMgPSAxbiA8PCAxM247XG4vKiBvbGQgZmxhZyBmb3IgNC4xIHByb3RvY29sICAqL1xubW9kdWxlLmV4cG9ydHMuUkVTRVJWRUQgPSAxbiA8PCAxNG47XG4vKiBuZXcgNC4xIGF1dGhlbnRpY2F0aW9uICovXG5tb2R1bGUuZXhwb3J0cy5TRUNVUkVfQ09OTkVDVElPTiA9IDFuIDw8IDE1bjtcbi8qIGVuYWJsZS9kaXNhYmxlIG11bHRpLXN0bXQgc3VwcG9ydCAqL1xubW9kdWxlLmV4cG9ydHMuTVVMVElfU1RBVEVNRU5UUyA9IDFuIDw8IDE2bjtcbi8qIGVuYWJsZS9kaXNhYmxlIG11bHRpLXJlc3VsdHMgKi9cbm1vZHVsZS5leHBvcnRzLk1VTFRJX1JFU1VMVFMgPSAxbiA8PCAxN247XG4vKiBtdWx0aS1yZXN1bHRzIGluIHBzLXByb3RvY29sICovXG5tb2R1bGUuZXhwb3J0cy5QU19NVUxUSV9SRVNVTFRTID0gMW4gPDwgMThuO1xuLyogY2xpZW50IHN1cHBvcnRzIHBsdWdpbiBhdXRoZW50aWNhdGlvbiAqL1xubW9kdWxlLmV4cG9ydHMuUExVR0lOX0FVVEggPSAxbiA8PCAxOW47XG4vKiBwZXJtaXRzIGNvbm5lY3Rpb24gYXR0cmlidXRlcyAqL1xubW9kdWxlLmV4cG9ydHMuQ09OTkVDVF9BVFRSUyA9IDFuIDw8IDIwbjtcbi8qIEVuYWJsZSBhdXRoZW50aWNhdGlvbiByZXNwb25zZSBwYWNrZXQgdG8gYmUgbGFyZ2VyIHRoYW4gMjU1IGJ5dGVzLiAqL1xubW9kdWxlLmV4cG9ydHMuUExVR0lOX0FVVEhfTEVORU5DX0NMSUVOVF9EQVRBID0gMW4gPDwgMjFuO1xuLyogRG9uJ3QgY2xvc2UgdGhlIGNvbm5lY3Rpb24gZm9yIGEgY29ubmVjdGlvbiB3aXRoIGV4cGlyZWQgcGFzc3dvcmQuICovXG5tb2R1bGUuZXhwb3J0cy5DQU5fSEFORExFX0VYUElSRURfUEFTU1dPUkRTID0gMW4gPDwgMjJuO1xuLyogQ2FwYWJsZSBvZiBoYW5kbGluZyBzZXJ2ZXIgc3RhdGUgY2hhbmdlIGluZm9ybWF0aW9uLiBJdHMgYSBoaW50IHRvIHRoZVxuICBzZXJ2ZXIgdG8gaW5jbHVkZSB0aGUgc3RhdGUgY2hhbmdlIGluZm9ybWF0aW9uIGluIE9rIHBhY2tldC4gKi9cbm1vZHVsZS5leHBvcnRzLlNFU1NJT05fVFJBQ0sgPSAxbiA8PCAyM247XG4vKiBDbGllbnQgbm8gbG9uZ2VyIG5lZWRzIEVPRiBwYWNrZXQgKi9cbm1vZHVsZS5leHBvcnRzLkRFUFJFQ0FURV9FT0YgPSAxbiA8PCAyNG47XG5tb2R1bGUuZXhwb3J0cy5TU0xfVkVSSUZZX1NFUlZFUl9DRVJUID0gMW4gPDwgMzBuO1xuXG4vKiBNYXJpYURCIGV4dGVuZGVkIGNhcGFiaWxpdGllcyAqL1xuXG4vKiBQZXJtaXQgYnVsayBpbnNlcnQqL1xubW9kdWxlLmV4cG9ydHMuTUFSSUFEQl9DTElFTlRfU1RNVF9CVUxLX09QRVJBVElPTlMgPSAxbiA8PCAzNG47XG5cbi8qIENsaWVudHMgc3VwcG9ydGluZyBleHRlbmRlZCBtZXRhZGF0YSAqL1xubW9kdWxlLmV4cG9ydHMuTUFSSUFEQl9DTElFTlRfRVhURU5ERURfVFlQRV9JTkZPID0gMW4gPDwgMzVuO1xubW9kdWxlLmV4cG9ydHMuTUFSSUFEQl9DTElFTlRfQ0FDSEVfTUVUQURBVEEgPSAxbiA8PCAzNm47XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIk1ZU1FMIiwiRk9VTkRfUk9XUyIsIkxPTkdfRkxBRyIsIkNPTk5FQ1RfV0lUSF9EQiIsIk5PX1NDSEVNQSIsIkNPTVBSRVNTIiwiT0RCQyIsIkxPQ0FMX0ZJTEVTIiwiSUdOT1JFX1NQQUNFIiwiUFJPVE9DT0xfNDEiLCJJTlRFUkFDVElWRSIsIlNTTCIsIklHTk9SRV9TSUdQSVBFIiwiVFJBTlNBQ1RJT05TIiwiUkVTRVJWRUQiLCJTRUNVUkVfQ09OTkVDVElPTiIsIk1VTFRJX1NUQVRFTUVOVFMiLCJNVUxUSV9SRVNVTFRTIiwiUFNfTVVMVElfUkVTVUxUUyIsIlBMVUdJTl9BVVRIIiwiQ09OTkVDVF9BVFRSUyIsIlBMVUdJTl9BVVRIX0xFTkVOQ19DTElFTlRfREFUQSIsIkNBTl9IQU5ETEVfRVhQSVJFRF9QQVNTV09SRFMiLCJTRVNTSU9OX1RSQUNLIiwiREVQUkVDQVRFX0VPRiIsIlNTTF9WRVJJRllfU0VSVkVSX0NFUlQiLCJNQVJJQURCX0NMSUVOVF9TVE1UX0JVTEtfT1BFUkFUSU9OUyIsIk1BUklBREJfQ0xJRU5UX0VYVEVOREVEX1RZUEVfSU5GTyIsIk1BUklBREJfQ0xJRU5UX0NBQ0hFX01FVEFEQVRBIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/const/capabilities.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/const/collations.js":
/*!******************************************************!*\
  !*** ./node_modules/mariadb/lib/const/collations.js ***!
  \******************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n// noinspection SpellCheckingInspection\n\nlet charsets = [];\nlet defaultCharsets = [];\nclass Collation {\n    constructor(index, name, charset, maxLength){\n        this.index = index;\n        this.name = name;\n        this.charset = charset;\n        this.maxLength = maxLength;\n    }\n    static fromCharset(charset) {\n        return defaultCharsets[charset === \"utf8mb3\" ? \"utf8\" : charset];\n    }\n    static fromIndex(index) {\n        if (index >= charsets.length) return undefined;\n        return charsets[index];\n    }\n    static fromName(name) {\n        for(let i = 0; i < charsets.length; i++){\n            let collation = charsets[i];\n            if (collation && collation.name === name) {\n                return collation;\n            }\n        }\n        return undefined;\n    }\n}\n// generated with query :\n// SELECT CONCAT('charsets[', CAST(co.ID as char), '] = new Collation(', CAST(co.ID as char), ', \\'',\n// UPPER(co.COLLATION_NAME), '\\', \\'', co.CHARACTER_SET_NAME, '\\', ', CAST(ca.MAXLEN as char), ');\\n')\n// FROM information_schema.COLLATIONS co\n//   LEFT OUTER JOIN information_schema.CHARACTER_SETS ca ON ca.character_set_name = co.character_set_name\n// ORDER BY co.ID ASC;\n//then replace \"utf8mb4\" by \"utf8\"\ncharsets[1] = new Collation(1, \"BIG5_CHINESE_CI\", \"big5\", 2);\ncharsets[2] = new Collation(2, \"LATIN2_CZECH_CS\", \"latin2\", 1);\ncharsets[3] = new Collation(3, \"DEC8_SWEDISH_CI\", \"dec8\", 1);\ncharsets[4] = new Collation(4, \"CP850_GENERAL_CI\", \"cp850\", 1);\ncharsets[5] = new Collation(5, \"LATIN1_GERMAN1_CI\", \"latin1\", 1);\ncharsets[6] = new Collation(6, \"HP8_ENGLISH_CI\", \"hp8\", 1);\ncharsets[7] = new Collation(7, \"KOI8R_GENERAL_CI\", \"koi8r\", 1);\ncharsets[8] = new Collation(8, \"LATIN1_SWEDISH_CI\", \"latin1\", 1);\ncharsets[9] = new Collation(9, \"LATIN2_GENERAL_CI\", \"latin2\", 1);\ncharsets[10] = new Collation(10, \"SWE7_SWEDISH_CI\", \"swe7\", 1);\ncharsets[11] = new Collation(11, \"ASCII_GENERAL_CI\", \"ascii\", 1);\ncharsets[12] = new Collation(12, \"UJIS_JAPANESE_CI\", \"ujis\", 3);\ncharsets[13] = new Collation(13, \"SJIS_JAPANESE_CI\", \"sjis\", 2);\ncharsets[14] = new Collation(14, \"CP1251_BULGARIAN_CI\", \"cp1251\", 1);\ncharsets[15] = new Collation(15, \"LATIN1_DANISH_CI\", \"latin1\", 1);\ncharsets[16] = new Collation(16, \"HEBREW_GENERAL_CI\", \"hebrew\", 1);\ncharsets[18] = new Collation(18, \"TIS620_THAI_CI\", \"tis620\", 1);\ncharsets[19] = new Collation(19, \"EUCKR_KOREAN_CI\", \"euckr\", 2);\ncharsets[20] = new Collation(20, \"LATIN7_ESTONIAN_CS\", \"latin7\", 1);\ncharsets[21] = new Collation(21, \"LATIN2_HUNGARIAN_CI\", \"latin2\", 1);\ncharsets[22] = new Collation(22, \"KOI8U_GENERAL_CI\", \"koi8u\", 1);\ncharsets[23] = new Collation(23, \"CP1251_UKRAINIAN_CI\", \"cp1251\", 1);\ncharsets[24] = new Collation(24, \"GB2312_CHINESE_CI\", \"gb2312\", 2);\ncharsets[25] = new Collation(25, \"GREEK_GENERAL_CI\", \"greek\", 1);\ncharsets[26] = new Collation(26, \"CP1250_GENERAL_CI\", \"cp1250\", 1);\ncharsets[27] = new Collation(27, \"LATIN2_CROATIAN_CI\", \"latin2\", 1);\ncharsets[28] = new Collation(28, \"GBK_CHINESE_CI\", \"gbk\", 2);\ncharsets[29] = new Collation(29, \"CP1257_LITHUANIAN_CI\", \"cp1257\", 1);\ncharsets[30] = new Collation(30, \"LATIN5_TURKISH_CI\", \"latin5\", 1);\ncharsets[31] = new Collation(31, \"LATIN1_GERMAN2_CI\", \"latin1\", 1);\ncharsets[32] = new Collation(32, \"ARMSCII8_GENERAL_CI\", \"armscii8\", 1);\ncharsets[33] = new Collation(33, \"UTF8_GENERAL_CI\", \"utf8\", 3);\ncharsets[34] = new Collation(34, \"CP1250_CZECH_CS\", \"cp1250\", 1);\ncharsets[35] = new Collation(35, \"UCS2_GENERAL_CI\", \"ucs2\", 2);\ncharsets[36] = new Collation(36, \"CP866_GENERAL_CI\", \"cp866\", 1);\ncharsets[37] = new Collation(37, \"KEYBCS2_GENERAL_CI\", \"keybcs2\", 1);\ncharsets[38] = new Collation(38, \"MACCE_GENERAL_CI\", \"macce\", 1);\ncharsets[39] = new Collation(39, \"MACROMAN_GENERAL_CI\", \"macroman\", 1);\ncharsets[40] = new Collation(40, \"CP852_GENERAL_CI\", \"cp852\", 1);\ncharsets[41] = new Collation(41, \"LATIN7_GENERAL_CI\", \"latin7\", 1);\ncharsets[42] = new Collation(42, \"LATIN7_GENERAL_CS\", \"latin7\", 1);\ncharsets[43] = new Collation(43, \"MACCE_BIN\", \"macce\", 1);\ncharsets[44] = new Collation(44, \"CP1250_CROATIAN_CI\", \"cp1250\", 1);\ncharsets[45] = new Collation(45, \"UTF8MB4_GENERAL_CI\", \"utf8\", 4);\ncharsets[46] = new Collation(46, \"UTF8MB4_BIN\", \"utf8\", 4);\ncharsets[47] = new Collation(47, \"LATIN1_BIN\", \"latin1\", 1);\ncharsets[48] = new Collation(48, \"LATIN1_GENERAL_CI\", \"latin1\", 1);\ncharsets[49] = new Collation(49, \"LATIN1_GENERAL_CS\", \"latin1\", 1);\ncharsets[50] = new Collation(50, \"CP1251_BIN\", \"cp1251\", 1);\ncharsets[51] = new Collation(51, \"CP1251_GENERAL_CI\", \"cp1251\", 1);\ncharsets[52] = new Collation(52, \"CP1251_GENERAL_CS\", \"cp1251\", 1);\ncharsets[53] = new Collation(53, \"MACROMAN_BIN\", \"macroman\", 1);\ncharsets[54] = new Collation(54, \"UTF16_GENERAL_CI\", \"utf16\", 4);\ncharsets[55] = new Collation(55, \"UTF16_BIN\", \"utf16\", 4);\ncharsets[56] = new Collation(56, \"UTF16LE_GENERAL_CI\", \"utf16le\", 4);\ncharsets[57] = new Collation(57, \"CP1256_GENERAL_CI\", \"cp1256\", 1);\ncharsets[58] = new Collation(58, \"CP1257_BIN\", \"cp1257\", 1);\ncharsets[59] = new Collation(59, \"CP1257_GENERAL_CI\", \"cp1257\", 1);\ncharsets[60] = new Collation(60, \"UTF32_GENERAL_CI\", \"utf32\", 4);\ncharsets[61] = new Collation(61, \"UTF32_BIN\", \"utf32\", 4);\ncharsets[62] = new Collation(62, \"UTF16LE_BIN\", \"utf16le\", 4);\ncharsets[63] = new Collation(63, \"BINARY\", \"binary\", 1);\ncharsets[64] = new Collation(64, \"ARMSCII8_BIN\", \"armscii8\", 1);\ncharsets[65] = new Collation(65, \"ASCII_BIN\", \"ascii\", 1);\ncharsets[66] = new Collation(66, \"CP1250_BIN\", \"cp1250\", 1);\ncharsets[67] = new Collation(67, \"CP1256_BIN\", \"cp1256\", 1);\ncharsets[68] = new Collation(68, \"CP866_BIN\", \"cp866\", 1);\ncharsets[69] = new Collation(69, \"DEC8_BIN\", \"dec8\", 1);\ncharsets[70] = new Collation(70, \"GREEK_BIN\", \"greek\", 1);\ncharsets[71] = new Collation(71, \"HEBREW_BIN\", \"hebrew\", 1);\ncharsets[72] = new Collation(72, \"HP8_BIN\", \"hp8\", 1);\ncharsets[73] = new Collation(73, \"KEYBCS2_BIN\", \"keybcs2\", 1);\ncharsets[74] = new Collation(74, \"KOI8R_BIN\", \"koi8r\", 1);\ncharsets[75] = new Collation(75, \"KOI8U_BIN\", \"koi8u\", 1);\ncharsets[76] = new Collation(76, \"UTF8_TOLOWER_CI\", \"utf8\", 3);\ncharsets[77] = new Collation(77, \"LATIN2_BIN\", \"latin2\", 1);\ncharsets[78] = new Collation(78, \"LATIN5_BIN\", \"latin5\", 1);\ncharsets[79] = new Collation(79, \"LATIN7_BIN\", \"latin7\", 1);\ncharsets[80] = new Collation(80, \"CP850_BIN\", \"cp850\", 1);\ncharsets[81] = new Collation(81, \"CP852_BIN\", \"cp852\", 1);\ncharsets[82] = new Collation(82, \"SWE7_BIN\", \"swe7\", 1);\ncharsets[83] = new Collation(83, \"UTF8_BIN\", \"utf8\", 3);\ncharsets[84] = new Collation(84, \"BIG5_BIN\", \"big5\", 2);\ncharsets[85] = new Collation(85, \"EUCKR_BIN\", \"euckr\", 2);\ncharsets[86] = new Collation(86, \"GB2312_BIN\", \"gb2312\", 2);\ncharsets[87] = new Collation(87, \"GBK_BIN\", \"gbk\", 2);\ncharsets[88] = new Collation(88, \"SJIS_BIN\", \"sjis\", 2);\ncharsets[89] = new Collation(89, \"TIS620_BIN\", \"tis620\", 1);\ncharsets[90] = new Collation(90, \"UCS2_BIN\", \"ucs2\", 2);\ncharsets[91] = new Collation(91, \"UJIS_BIN\", \"ujis\", 3);\ncharsets[92] = new Collation(92, \"GEOSTD8_GENERAL_CI\", \"geostd8\", 1);\ncharsets[93] = new Collation(93, \"GEOSTD8_BIN\", \"geostd8\", 1);\ncharsets[94] = new Collation(94, \"LATIN1_SPANISH_CI\", \"latin1\", 1);\ncharsets[95] = new Collation(95, \"CP932_JAPANESE_CI\", \"cp932\", 2);\ncharsets[96] = new Collation(96, \"CP932_BIN\", \"cp932\", 2);\ncharsets[97] = new Collation(97, \"EUCJPMS_JAPANESE_CI\", \"eucjpms\", 3);\ncharsets[98] = new Collation(98, \"EUCJPMS_BIN\", \"eucjpms\", 3);\ncharsets[99] = new Collation(99, \"CP1250_POLISH_CI\", \"cp1250\", 1);\ncharsets[101] = new Collation(101, \"UTF16_UNICODE_CI\", \"utf16\", 4);\ncharsets[102] = new Collation(102, \"UTF16_ICELANDIC_CI\", \"utf16\", 4);\ncharsets[103] = new Collation(103, \"UTF16_LATVIAN_CI\", \"utf16\", 4);\ncharsets[104] = new Collation(104, \"UTF16_ROMANIAN_CI\", \"utf16\", 4);\ncharsets[105] = new Collation(105, \"UTF16_SLOVENIAN_CI\", \"utf16\", 4);\ncharsets[106] = new Collation(106, \"UTF16_POLISH_CI\", \"utf16\", 4);\ncharsets[107] = new Collation(107, \"UTF16_ESTONIAN_CI\", \"utf16\", 4);\ncharsets[108] = new Collation(108, \"UTF16_SPANISH_CI\", \"utf16\", 4);\ncharsets[109] = new Collation(109, \"UTF16_SWEDISH_CI\", \"utf16\", 4);\ncharsets[110] = new Collation(110, \"UTF16_TURKISH_CI\", \"utf16\", 4);\ncharsets[111] = new Collation(111, \"UTF16_CZECH_CI\", \"utf16\", 4);\ncharsets[112] = new Collation(112, \"UTF16_DANISH_CI\", \"utf16\", 4);\ncharsets[113] = new Collation(113, \"UTF16_LITHUANIAN_CI\", \"utf16\", 4);\ncharsets[114] = new Collation(114, \"UTF16_SLOVAK_CI\", \"utf16\", 4);\ncharsets[115] = new Collation(115, \"UTF16_SPANISH2_CI\", \"utf16\", 4);\ncharsets[116] = new Collation(116, \"UTF16_ROMAN_CI\", \"utf16\", 4);\ncharsets[117] = new Collation(117, \"UTF16_PERSIAN_CI\", \"utf16\", 4);\ncharsets[118] = new Collation(118, \"UTF16_ESPERANTO_CI\", \"utf16\", 4);\ncharsets[119] = new Collation(119, \"UTF16_HUNGARIAN_CI\", \"utf16\", 4);\ncharsets[120] = new Collation(120, \"UTF16_SINHALA_CI\", \"utf16\", 4);\ncharsets[121] = new Collation(121, \"UTF16_GERMAN2_CI\", \"utf16\", 4);\ncharsets[122] = new Collation(122, \"UTF16_CROATIAN_MYSQL561_CI\", \"utf16\", 4);\ncharsets[123] = new Collation(123, \"UTF16_UNICODE_520_CI\", \"utf16\", 4);\ncharsets[124] = new Collation(124, \"UTF16_VIETNAMESE_CI\", \"utf16\", 4);\ncharsets[128] = new Collation(128, \"UCS2_UNICODE_CI\", \"ucs2\", 2);\ncharsets[129] = new Collation(129, \"UCS2_ICELANDIC_CI\", \"ucs2\", 2);\ncharsets[130] = new Collation(130, \"UCS2_LATVIAN_CI\", \"ucs2\", 2);\ncharsets[131] = new Collation(131, \"UCS2_ROMANIAN_CI\", \"ucs2\", 2);\ncharsets[132] = new Collation(132, \"UCS2_SLOVENIAN_CI\", \"ucs2\", 2);\ncharsets[133] = new Collation(133, \"UCS2_POLISH_CI\", \"ucs2\", 2);\ncharsets[134] = new Collation(134, \"UCS2_ESTONIAN_CI\", \"ucs2\", 2);\ncharsets[135] = new Collation(135, \"UCS2_SPANISH_CI\", \"ucs2\", 2);\ncharsets[136] = new Collation(136, \"UCS2_SWEDISH_CI\", \"ucs2\", 2);\ncharsets[137] = new Collation(137, \"UCS2_TURKISH_CI\", \"ucs2\", 2);\ncharsets[138] = new Collation(138, \"UCS2_CZECH_CI\", \"ucs2\", 2);\ncharsets[139] = new Collation(139, \"UCS2_DANISH_CI\", \"ucs2\", 2);\ncharsets[140] = new Collation(140, \"UCS2_LITHUANIAN_CI\", \"ucs2\", 2);\ncharsets[141] = new Collation(141, \"UCS2_SLOVAK_CI\", \"ucs2\", 2);\ncharsets[142] = new Collation(142, \"UCS2_SPANISH2_CI\", \"ucs2\", 2);\ncharsets[143] = new Collation(143, \"UCS2_ROMAN_CI\", \"ucs2\", 2);\ncharsets[144] = new Collation(144, \"UCS2_PERSIAN_CI\", \"ucs2\", 2);\ncharsets[145] = new Collation(145, \"UCS2_ESPERANTO_CI\", \"ucs2\", 2);\ncharsets[146] = new Collation(146, \"UCS2_HUNGARIAN_CI\", \"ucs2\", 2);\ncharsets[147] = new Collation(147, \"UCS2_SINHALA_CI\", \"ucs2\", 2);\ncharsets[148] = new Collation(148, \"UCS2_GERMAN2_CI\", \"ucs2\", 2);\ncharsets[149] = new Collation(149, \"UCS2_CROATIAN_MYSQL561_CI\", \"ucs2\", 2);\ncharsets[150] = new Collation(150, \"UCS2_UNICODE_520_CI\", \"ucs2\", 2);\ncharsets[151] = new Collation(151, \"UCS2_VIETNAMESE_CI\", \"ucs2\", 2);\ncharsets[159] = new Collation(159, \"UCS2_GENERAL_MYSQL500_CI\", \"ucs2\", 2);\ncharsets[160] = new Collation(160, \"UTF32_UNICODE_CI\", \"utf32\", 4);\ncharsets[161] = new Collation(161, \"UTF32_ICELANDIC_CI\", \"utf32\", 4);\ncharsets[162] = new Collation(162, \"UTF32_LATVIAN_CI\", \"utf32\", 4);\ncharsets[163] = new Collation(163, \"UTF32_ROMANIAN_CI\", \"utf32\", 4);\ncharsets[164] = new Collation(164, \"UTF32_SLOVENIAN_CI\", \"utf32\", 4);\ncharsets[165] = new Collation(165, \"UTF32_POLISH_CI\", \"utf32\", 4);\ncharsets[166] = new Collation(166, \"UTF32_ESTONIAN_CI\", \"utf32\", 4);\ncharsets[167] = new Collation(167, \"UTF32_SPANISH_CI\", \"utf32\", 4);\ncharsets[168] = new Collation(168, \"UTF32_SWEDISH_CI\", \"utf32\", 4);\ncharsets[169] = new Collation(169, \"UTF32_TURKISH_CI\", \"utf32\", 4);\ncharsets[170] = new Collation(170, \"UTF32_CZECH_CI\", \"utf32\", 4);\ncharsets[171] = new Collation(171, \"UTF32_DANISH_CI\", \"utf32\", 4);\ncharsets[172] = new Collation(172, \"UTF32_LITHUANIAN_CI\", \"utf32\", 4);\ncharsets[173] = new Collation(173, \"UTF32_SLOVAK_CI\", \"utf32\", 4);\ncharsets[174] = new Collation(174, \"UTF32_SPANISH2_CI\", \"utf32\", 4);\ncharsets[175] = new Collation(175, \"UTF32_ROMAN_CI\", \"utf32\", 4);\ncharsets[176] = new Collation(176, \"UTF32_PERSIAN_CI\", \"utf32\", 4);\ncharsets[177] = new Collation(177, \"UTF32_ESPERANTO_CI\", \"utf32\", 4);\ncharsets[178] = new Collation(178, \"UTF32_HUNGARIAN_CI\", \"utf32\", 4);\ncharsets[179] = new Collation(179, \"UTF32_SINHALA_CI\", \"utf32\", 4);\ncharsets[180] = new Collation(180, \"UTF32_GERMAN2_CI\", \"utf32\", 4);\ncharsets[181] = new Collation(181, \"UTF32_CROATIAN_MYSQL561_CI\", \"utf32\", 4);\ncharsets[182] = new Collation(182, \"UTF32_UNICODE_520_CI\", \"utf32\", 4);\ncharsets[183] = new Collation(183, \"UTF32_VIETNAMESE_CI\", \"utf32\", 4);\ncharsets[192] = new Collation(192, \"UTF8_UNICODE_CI\", \"utf8\", 3);\ncharsets[193] = new Collation(193, \"UTF8_ICELANDIC_CI\", \"utf8\", 3);\ncharsets[194] = new Collation(194, \"UTF8_LATVIAN_CI\", \"utf8\", 3);\ncharsets[195] = new Collation(195, \"UTF8_ROMANIAN_CI\", \"utf8\", 3);\ncharsets[196] = new Collation(196, \"UTF8_SLOVENIAN_CI\", \"utf8\", 3);\ncharsets[197] = new Collation(197, \"UTF8_POLISH_CI\", \"utf8\", 3);\ncharsets[198] = new Collation(198, \"UTF8_ESTONIAN_CI\", \"utf8\", 3);\ncharsets[199] = new Collation(199, \"UTF8_SPANISH_CI\", \"utf8\", 3);\ncharsets[200] = new Collation(200, \"UTF8_SWEDISH_CI\", \"utf8\", 3);\ncharsets[201] = new Collation(201, \"UTF8_TURKISH_CI\", \"utf8\", 3);\ncharsets[202] = new Collation(202, \"UTF8_CZECH_CI\", \"utf8\", 3);\ncharsets[203] = new Collation(203, \"UTF8_DANISH_CI\", \"utf8\", 3);\ncharsets[204] = new Collation(204, \"UTF8_LITHUANIAN_CI\", \"utf8\", 3);\ncharsets[205] = new Collation(205, \"UTF8_SLOVAK_CI\", \"utf8\", 3);\ncharsets[206] = new Collation(206, \"UTF8_SPANISH2_CI\", \"utf8\", 3);\ncharsets[207] = new Collation(207, \"UTF8_ROMAN_CI\", \"utf8\", 3);\ncharsets[208] = new Collation(208, \"UTF8_PERSIAN_CI\", \"utf8\", 3);\ncharsets[209] = new Collation(209, \"UTF8_ESPERANTO_CI\", \"utf8\", 3);\ncharsets[210] = new Collation(210, \"UTF8_HUNGARIAN_CI\", \"utf8\", 3);\ncharsets[211] = new Collation(211, \"UTF8_SINHALA_CI\", \"utf8\", 3);\ncharsets[212] = new Collation(212, \"UTF8_GERMAN2_CI\", \"utf8\", 3);\ncharsets[213] = new Collation(213, \"UTF8_CROATIAN_MYSQL561_CI\", \"utf8\", 3);\ncharsets[214] = new Collation(214, \"UTF8_UNICODE_520_CI\", \"utf8\", 3);\ncharsets[215] = new Collation(215, \"UTF8_VIETNAMESE_CI\", \"utf8\", 3);\ncharsets[223] = new Collation(223, \"UTF8_GENERAL_MYSQL500_CI\", \"utf8\", 3);\ncharsets[224] = new Collation(224, \"UTF8MB4_UNICODE_CI\", \"utf8\", 4);\ncharsets[225] = new Collation(225, \"UTF8MB4_ICELANDIC_CI\", \"utf8\", 4);\ncharsets[226] = new Collation(226, \"UTF8MB4_LATVIAN_CI\", \"utf8\", 4);\ncharsets[227] = new Collation(227, \"UTF8MB4_ROMANIAN_CI\", \"utf8\", 4);\ncharsets[228] = new Collation(228, \"UTF8MB4_SLOVENIAN_CI\", \"utf8\", 4);\ncharsets[229] = new Collation(229, \"UTF8MB4_POLISH_CI\", \"utf8\", 4);\ncharsets[230] = new Collation(230, \"UTF8MB4_ESTONIAN_CI\", \"utf8\", 4);\ncharsets[231] = new Collation(231, \"UTF8MB4_SPANISH_CI\", \"utf8\", 4);\ncharsets[232] = new Collation(232, \"UTF8MB4_SWEDISH_CI\", \"utf8\", 4);\ncharsets[233] = new Collation(233, \"UTF8MB4_TURKISH_CI\", \"utf8\", 4);\ncharsets[234] = new Collation(234, \"UTF8MB4_CZECH_CI\", \"utf8\", 4);\ncharsets[235] = new Collation(235, \"UTF8MB4_DANISH_CI\", \"utf8\", 4);\ncharsets[236] = new Collation(236, \"UTF8MB4_LITHUANIAN_CI\", \"utf8\", 4);\ncharsets[237] = new Collation(237, \"UTF8MB4_SLOVAK_CI\", \"utf8\", 4);\ncharsets[238] = new Collation(238, \"UTF8MB4_SPANISH2_CI\", \"utf8\", 4);\ncharsets[239] = new Collation(239, \"UTF8MB4_ROMAN_CI\", \"utf8\", 4);\ncharsets[240] = new Collation(240, \"UTF8MB4_PERSIAN_CI\", \"utf8\", 4);\ncharsets[241] = new Collation(241, \"UTF8MB4_ESPERANTO_CI\", \"utf8\", 4);\ncharsets[242] = new Collation(242, \"UTF8MB4_HUNGARIAN_CI\", \"utf8\", 4);\ncharsets[243] = new Collation(243, \"UTF8MB4_SINHALA_CI\", \"utf8\", 4);\ncharsets[244] = new Collation(244, \"UTF8MB4_GERMAN2_CI\", \"utf8\", 4);\ncharsets[245] = new Collation(245, \"UTF8MB4_CROATIAN_MYSQL561_CI\", \"utf8\", 4);\ncharsets[246] = new Collation(246, \"UTF8MB4_UNICODE_520_CI\", \"utf8\", 4);\ncharsets[247] = new Collation(247, \"UTF8MB4_VIETNAMESE_CI\", \"utf8\", 4);\ncharsets[248] = new Collation(248, \"GB18030_CHINESE_CI\", \"gb18030\", 4);\ncharsets[249] = new Collation(249, \"GB18030_BIN\", \"gb18030\", 4);\ncharsets[250] = new Collation(250, \"GB18030_UNICODE_520_CI\", \"gb18030\", 4);\ncharsets[255] = new Collation(255, \"UTF8MB4_0900_AI_CI\", \"utf8\", 4);\ncharsets[256] = new Collation(256, \"UTF8MB4_DE_PB_0900_AI_CI\", \"utf8\", 4);\ncharsets[257] = new Collation(257, \"UTF8MB4_IS_0900_AI_CI\", \"utf8\", 4);\ncharsets[258] = new Collation(258, \"UTF8MB4_LV_0900_AI_CI\", \"utf8\", 4);\ncharsets[259] = new Collation(259, \"UTF8MB4_RO_0900_AI_CI\", \"utf8\", 4);\ncharsets[260] = new Collation(260, \"UTF8MB4_SL_0900_AI_CI\", \"utf8\", 4);\ncharsets[261] = new Collation(261, \"UTF8MB4_PL_0900_AI_CI\", \"utf8\", 4);\ncharsets[262] = new Collation(262, \"UTF8MB4_ET_0900_AI_CI\", \"utf8\", 4);\ncharsets[263] = new Collation(263, \"UTF8MB4_ES_0900_AI_CI\", \"utf8\", 4);\ncharsets[264] = new Collation(264, \"UTF8MB4_SV_0900_AI_CI\", \"utf8\", 4);\ncharsets[265] = new Collation(265, \"UTF8MB4_TR_0900_AI_CI\", \"utf8\", 4);\ncharsets[266] = new Collation(266, \"UTF8MB4_CS_0900_AI_CI\", \"utf8\", 4);\ncharsets[267] = new Collation(267, \"UTF8MB4_DA_0900_AI_CI\", \"utf8\", 4);\ncharsets[268] = new Collation(268, \"UTF8MB4_LT_0900_AI_CI\", \"utf8\", 4);\ncharsets[269] = new Collation(269, \"UTF8MB4_SK_0900_AI_CI\", \"utf8\", 4);\ncharsets[270] = new Collation(270, \"UTF8MB4_ES_TRAD_0900_AI_CI\", \"utf8\", 4);\ncharsets[271] = new Collation(271, \"UTF8MB4_LA_0900_AI_CI\", \"utf8\", 4);\ncharsets[273] = new Collation(273, \"UTF8MB4_EO_0900_AI_CI\", \"utf8\", 4);\ncharsets[274] = new Collation(274, \"UTF8MB4_HU_0900_AI_CI\", \"utf8\", 4);\ncharsets[275] = new Collation(275, \"UTF8MB4_HR_0900_AI_CI\", \"utf8\", 4);\ncharsets[277] = new Collation(277, \"UTF8MB4_VI_0900_AI_CI\", \"utf8\", 4);\ncharsets[278] = new Collation(278, \"UTF8MB4_0900_AS_CS\", \"utf8\", 4);\ncharsets[279] = new Collation(279, \"UTF8MB4_DE_PB_0900_AS_CS\", \"utf8\", 4);\ncharsets[280] = new Collation(280, \"UTF8MB4_IS_0900_AS_CS\", \"utf8\", 4);\ncharsets[281] = new Collation(281, \"UTF8MB4_LV_0900_AS_CS\", \"utf8\", 4);\ncharsets[282] = new Collation(282, \"UTF8MB4_RO_0900_AS_CS\", \"utf8\", 4);\ncharsets[283] = new Collation(283, \"UTF8MB4_SL_0900_AS_CS\", \"utf8\", 4);\ncharsets[284] = new Collation(284, \"UTF8MB4_PL_0900_AS_CS\", \"utf8\", 4);\ncharsets[285] = new Collation(285, \"UTF8MB4_ET_0900_AS_CS\", \"utf8\", 4);\ncharsets[286] = new Collation(286, \"UTF8MB4_ES_0900_AS_CS\", \"utf8\", 4);\ncharsets[287] = new Collation(287, \"UTF8MB4_SV_0900_AS_CS\", \"utf8\", 4);\ncharsets[288] = new Collation(288, \"UTF8MB4_TR_0900_AS_CS\", \"utf8\", 4);\ncharsets[289] = new Collation(289, \"UTF8MB4_CS_0900_AS_CS\", \"utf8\", 4);\ncharsets[290] = new Collation(290, \"UTF8MB4_DA_0900_AS_CS\", \"utf8\", 4);\ncharsets[291] = new Collation(291, \"UTF8MB4_LT_0900_AS_CS\", \"utf8\", 4);\ncharsets[292] = new Collation(292, \"UTF8MB4_SK_0900_AS_CS\", \"utf8\", 4);\ncharsets[293] = new Collation(293, \"UTF8MB4_ES_TRAD_0900_AS_CS\", \"utf8\", 4);\ncharsets[294] = new Collation(294, \"UTF8MB4_LA_0900_AS_CS\", \"utf8\", 4);\ncharsets[296] = new Collation(296, \"UTF8MB4_EO_0900_AS_CS\", \"utf8\", 4);\ncharsets[297] = new Collation(297, \"UTF8MB4_HU_0900_AS_CS\", \"utf8\", 4);\ncharsets[298] = new Collation(298, \"UTF8MB4_HR_0900_AS_CS\", \"utf8\", 4);\ncharsets[300] = new Collation(300, \"UTF8MB4_VI_0900_AS_CS\", \"utf8\", 4);\ncharsets[303] = new Collation(303, \"UTF8MB4_JA_0900_AS_CS\", \"utf8\", 4);\ncharsets[304] = new Collation(304, \"UTF8MB4_JA_0900_AS_CS_KS\", \"utf8\", 4);\ncharsets[305] = new Collation(305, \"UTF8MB4_0900_AS_CI\", \"utf8\", 4);\ncharsets[306] = new Collation(306, \"UTF8MB4_RU_0900_AI_CI\", \"utf8\", 4);\ncharsets[307] = new Collation(307, \"UTF8MB4_RU_0900_AS_CS\", \"utf8\", 4);\ncharsets[308] = new Collation(308, \"UTF8MB4_ZH_0900_AS_CS\", \"utf8\", 4);\ncharsets[309] = new Collation(309, \"UTF8MB4_0900_BIN\", \"utf8\", 4);\ncharsets[576] = new Collation(576, \"UTF8_CROATIAN_CI\", \"utf8\", 3);\ncharsets[577] = new Collation(577, \"UTF8_MYANMAR_CI\", \"utf8\", 3);\ncharsets[578] = new Collation(578, \"UTF8_THAI_520_W2\", \"utf8\", 3);\ncharsets[608] = new Collation(608, \"UTF8MB4_CROATIAN_CI\", \"utf8\", 4);\ncharsets[609] = new Collation(609, \"UTF8MB4_MYANMAR_CI\", \"utf8\", 4);\ncharsets[610] = new Collation(610, \"UTF8MB4_THAI_520_W2\", \"utf8\", 4);\ncharsets[640] = new Collation(640, \"UCS2_CROATIAN_CI\", \"ucs2\", 2);\ncharsets[641] = new Collation(641, \"UCS2_MYANMAR_CI\", \"ucs2\", 2);\ncharsets[642] = new Collation(642, \"UCS2_THAI_520_W2\", \"ucs2\", 2);\ncharsets[672] = new Collation(672, \"UTF16_CROATIAN_CI\", \"utf16\", 4);\ncharsets[673] = new Collation(673, \"UTF16_MYANMAR_CI\", \"utf16\", 4);\ncharsets[674] = new Collation(674, \"UTF16_THAI_520_W2\", \"utf16\", 4);\ncharsets[736] = new Collation(736, \"UTF32_CROATIAN_CI\", \"utf32\", 4);\ncharsets[737] = new Collation(737, \"UTF32_MYANMAR_CI\", \"utf32\", 4);\ncharsets[738] = new Collation(738, \"UTF32_THAI_520_W2\", \"utf32\", 4);\ncharsets[1025] = new Collation(1025, \"BIG5_CHINESE_NOPAD_CI\", \"big5\", 2);\ncharsets[1027] = new Collation(1027, \"DEC8_SWEDISH_NOPAD_CI\", \"dec8\", 1);\ncharsets[1028] = new Collation(1028, \"CP850_GENERAL_NOPAD_CI\", \"cp850\", 1);\ncharsets[1030] = new Collation(1030, \"HP8_ENGLISH_NOPAD_CI\", \"hp8\", 1);\ncharsets[1031] = new Collation(1031, \"KOI8R_GENERAL_NOPAD_CI\", \"koi8r\", 1);\ncharsets[1032] = new Collation(1032, \"LATIN1_SWEDISH_NOPAD_CI\", \"latin1\", 1);\ncharsets[1033] = new Collation(1033, \"LATIN2_GENERAL_NOPAD_CI\", \"latin2\", 1);\ncharsets[1034] = new Collation(1034, \"SWE7_SWEDISH_NOPAD_CI\", \"swe7\", 1);\ncharsets[1035] = new Collation(1035, \"ASCII_GENERAL_NOPAD_CI\", \"ascii\", 1);\ncharsets[1036] = new Collation(1036, \"UJIS_JAPANESE_NOPAD_CI\", \"ujis\", 3);\ncharsets[1037] = new Collation(1037, \"SJIS_JAPANESE_NOPAD_CI\", \"sjis\", 2);\ncharsets[1040] = new Collation(1040, \"HEBREW_GENERAL_NOPAD_CI\", \"hebrew\", 1);\ncharsets[1042] = new Collation(1042, \"TIS620_THAI_NOPAD_CI\", \"tis620\", 1);\ncharsets[1043] = new Collation(1043, \"EUCKR_KOREAN_NOPAD_CI\", \"euckr\", 2);\ncharsets[1046] = new Collation(1046, \"KOI8U_GENERAL_NOPAD_CI\", \"koi8u\", 1);\ncharsets[1048] = new Collation(1048, \"GB2312_CHINESE_NOPAD_CI\", \"gb2312\", 2);\ncharsets[1049] = new Collation(1049, \"GREEK_GENERAL_NOPAD_CI\", \"greek\", 1);\ncharsets[1050] = new Collation(1050, \"CP1250_GENERAL_NOPAD_CI\", \"cp1250\", 1);\ncharsets[1052] = new Collation(1052, \"GBK_CHINESE_NOPAD_CI\", \"gbk\", 2);\ncharsets[1054] = new Collation(1054, \"LATIN5_TURKISH_NOPAD_CI\", \"latin5\", 1);\ncharsets[1056] = new Collation(1056, \"ARMSCII8_GENERAL_NOPAD_CI\", \"armscii8\", 1);\ncharsets[1057] = new Collation(1057, \"UTF8_GENERAL_NOPAD_CI\", \"utf8\", 3);\ncharsets[1059] = new Collation(1059, \"UCS2_GENERAL_NOPAD_CI\", \"ucs2\", 2);\ncharsets[1060] = new Collation(1060, \"CP866_GENERAL_NOPAD_CI\", \"cp866\", 1);\ncharsets[1061] = new Collation(1061, \"KEYBCS2_GENERAL_NOPAD_CI\", \"keybcs2\", 1);\ncharsets[1062] = new Collation(1062, \"MACCE_GENERAL_NOPAD_CI\", \"macce\", 1);\ncharsets[1063] = new Collation(1063, \"MACROMAN_GENERAL_NOPAD_CI\", \"macroman\", 1);\ncharsets[1064] = new Collation(1064, \"CP852_GENERAL_NOPAD_CI\", \"cp852\", 1);\ncharsets[1065] = new Collation(1065, \"LATIN7_GENERAL_NOPAD_CI\", \"latin7\", 1);\ncharsets[1067] = new Collation(1067, \"MACCE_NOPAD_BIN\", \"macce\", 1);\ncharsets[1069] = new Collation(1069, \"UTF8MB4_GENERAL_NOPAD_CI\", \"utf8\", 4);\ncharsets[1070] = new Collation(1070, \"UTF8MB4_NOPAD_BIN\", \"utf8\", 4);\ncharsets[1071] = new Collation(1071, \"LATIN1_NOPAD_BIN\", \"latin1\", 1);\ncharsets[1074] = new Collation(1074, \"CP1251_NOPAD_BIN\", \"cp1251\", 1);\ncharsets[1075] = new Collation(1075, \"CP1251_GENERAL_NOPAD_CI\", \"cp1251\", 1);\ncharsets[1077] = new Collation(1077, \"MACROMAN_NOPAD_BIN\", \"macroman\", 1);\ncharsets[1078] = new Collation(1078, \"UTF16_GENERAL_NOPAD_CI\", \"utf16\", 4);\ncharsets[1079] = new Collation(1079, \"UTF16_NOPAD_BIN\", \"utf16\", 4);\ncharsets[1080] = new Collation(1080, \"UTF16LE_GENERAL_NOPAD_CI\", \"utf16le\", 4);\ncharsets[1081] = new Collation(1081, \"CP1256_GENERAL_NOPAD_CI\", \"cp1256\", 1);\ncharsets[1082] = new Collation(1082, \"CP1257_NOPAD_BIN\", \"cp1257\", 1);\ncharsets[1083] = new Collation(1083, \"CP1257_GENERAL_NOPAD_CI\", \"cp1257\", 1);\ncharsets[1084] = new Collation(1084, \"UTF32_GENERAL_NOPAD_CI\", \"utf32\", 4);\ncharsets[1085] = new Collation(1085, \"UTF32_NOPAD_BIN\", \"utf32\", 4);\ncharsets[1086] = new Collation(1086, \"UTF16LE_NOPAD_BIN\", \"utf16le\", 4);\ncharsets[1088] = new Collation(1088, \"ARMSCII8_NOPAD_BIN\", \"armscii8\", 1);\ncharsets[1089] = new Collation(1089, \"ASCII_NOPAD_BIN\", \"ascii\", 1);\ncharsets[1090] = new Collation(1090, \"CP1250_NOPAD_BIN\", \"cp1250\", 1);\ncharsets[1091] = new Collation(1091, \"CP1256_NOPAD_BIN\", \"cp1256\", 1);\ncharsets[1092] = new Collation(1092, \"CP866_NOPAD_BIN\", \"cp866\", 1);\ncharsets[1093] = new Collation(1093, \"DEC8_NOPAD_BIN\", \"dec8\", 1);\ncharsets[1094] = new Collation(1094, \"GREEK_NOPAD_BIN\", \"greek\", 1);\ncharsets[1095] = new Collation(1095, \"HEBREW_NOPAD_BIN\", \"hebrew\", 1);\ncharsets[1096] = new Collation(1096, \"HP8_NOPAD_BIN\", \"hp8\", 1);\ncharsets[1097] = new Collation(1097, \"KEYBCS2_NOPAD_BIN\", \"keybcs2\", 1);\ncharsets[1098] = new Collation(1098, \"KOI8R_NOPAD_BIN\", \"koi8r\", 1);\ncharsets[1099] = new Collation(1099, \"KOI8U_NOPAD_BIN\", \"koi8u\", 1);\ncharsets[1101] = new Collation(1101, \"LATIN2_NOPAD_BIN\", \"latin2\", 1);\ncharsets[1102] = new Collation(1102, \"LATIN5_NOPAD_BIN\", \"latin5\", 1);\ncharsets[1103] = new Collation(1103, \"LATIN7_NOPAD_BIN\", \"latin7\", 1);\ncharsets[1104] = new Collation(1104, \"CP850_NOPAD_BIN\", \"cp850\", 1);\ncharsets[1105] = new Collation(1105, \"CP852_NOPAD_BIN\", \"cp852\", 1);\ncharsets[1106] = new Collation(1106, \"SWE7_NOPAD_BIN\", \"swe7\", 1);\ncharsets[1107] = new Collation(1107, \"UTF8_NOPAD_BIN\", \"utf8\", 3);\ncharsets[1108] = new Collation(1108, \"BIG5_NOPAD_BIN\", \"big5\", 2);\ncharsets[1109] = new Collation(1109, \"EUCKR_NOPAD_BIN\", \"euckr\", 2);\ncharsets[1110] = new Collation(1110, \"GB2312_NOPAD_BIN\", \"gb2312\", 2);\ncharsets[1111] = new Collation(1111, \"GBK_NOPAD_BIN\", \"gbk\", 2);\ncharsets[1112] = new Collation(1112, \"SJIS_NOPAD_BIN\", \"sjis\", 2);\ncharsets[1113] = new Collation(1113, \"TIS620_NOPAD_BIN\", \"tis620\", 1);\ncharsets[1114] = new Collation(1114, \"UCS2_NOPAD_BIN\", \"ucs2\", 2);\ncharsets[1115] = new Collation(1115, \"UJIS_NOPAD_BIN\", \"ujis\", 3);\ncharsets[1116] = new Collation(1116, \"GEOSTD8_GENERAL_NOPAD_CI\", \"geostd8\", 1);\ncharsets[1117] = new Collation(1117, \"GEOSTD8_NOPAD_BIN\", \"geostd8\", 1);\ncharsets[1119] = new Collation(1119, \"CP932_JAPANESE_NOPAD_CI\", \"cp932\", 2);\ncharsets[1120] = new Collation(1120, \"CP932_NOPAD_BIN\", \"cp932\", 2);\ncharsets[1121] = new Collation(1121, \"EUCJPMS_JAPANESE_NOPAD_CI\", \"eucjpms\", 3);\ncharsets[1122] = new Collation(1122, \"EUCJPMS_NOPAD_BIN\", \"eucjpms\", 3);\ncharsets[1125] = new Collation(1125, \"UTF16_UNICODE_NOPAD_CI\", \"utf16\", 4);\ncharsets[1147] = new Collation(1147, \"UTF16_UNICODE_520_NOPAD_CI\", \"utf16\", 4);\ncharsets[1152] = new Collation(1152, \"UCS2_UNICODE_NOPAD_CI\", \"ucs2\", 2);\ncharsets[1174] = new Collation(1174, \"UCS2_UNICODE_520_NOPAD_CI\", \"ucs2\", 2);\ncharsets[1184] = new Collation(1184, \"UTF32_UNICODE_NOPAD_CI\", \"utf32\", 4);\ncharsets[1206] = new Collation(1206, \"UTF32_UNICODE_520_NOPAD_CI\", \"utf32\", 4);\ncharsets[1216] = new Collation(1216, \"UTF8_UNICODE_NOPAD_CI\", \"utf8\", 3);\ncharsets[1238] = new Collation(1238, \"UTF8_UNICODE_520_NOPAD_CI\", \"utf8\", 3);\ncharsets[1248] = new Collation(1248, \"UTF8MB4_UNICODE_NOPAD_CI\", \"utf8\", 4);\ncharsets[1270] = new Collation(1270, \"UTF8MB4_UNICODE_520_NOPAD_CI\", \"utf8\", 4);\nfor(let i = 0; i < charsets.length; i++){\n    let collation = charsets[i];\n    if (collation) {\n        Collation.prototype[collation.name] = collation;\n    }\n}\n/**\n * Map charset to default collation\n *\n * created with query:\n *  SELECT CONCAT(' defaultCharsets[\\'',  co.character_set_name , '\\'] = charsets[', CAST(co.ID as char), '];')\n *  FROM information_schema.COLLATIONS co WHERE co.IS_DEFAULT = 'Yes' ORDER BY co.ID ASC;\n */ defaultCharsets[\"big5\"] = charsets[1];\ndefaultCharsets[\"dec8\"] = charsets[3];\ndefaultCharsets[\"cp850\"] = charsets[4];\ndefaultCharsets[\"hp8\"] = charsets[6];\ndefaultCharsets[\"koi8r\"] = charsets[7];\ndefaultCharsets[\"latin1\"] = charsets[8];\ndefaultCharsets[\"latin2\"] = charsets[9];\ndefaultCharsets[\"swe7\"] = charsets[10];\ndefaultCharsets[\"ascii\"] = charsets[11];\ndefaultCharsets[\"ujis\"] = charsets[12];\ndefaultCharsets[\"sjis\"] = charsets[13];\ndefaultCharsets[\"hebrew\"] = charsets[16];\ndefaultCharsets[\"tis620\"] = charsets[18];\ndefaultCharsets[\"euckr\"] = charsets[19];\ndefaultCharsets[\"koi8u\"] = charsets[22];\ndefaultCharsets[\"gb2312\"] = charsets[24];\ndefaultCharsets[\"greek\"] = charsets[25];\ndefaultCharsets[\"cp1250\"] = charsets[26];\ndefaultCharsets[\"gbk\"] = charsets[28];\ndefaultCharsets[\"latin5\"] = charsets[30];\ndefaultCharsets[\"armscii8\"] = charsets[32];\ndefaultCharsets[\"utf8\"] = charsets[33];\ndefaultCharsets[\"ucs2\"] = charsets[35];\ndefaultCharsets[\"cp866\"] = charsets[36];\ndefaultCharsets[\"keybcs2\"] = charsets[37];\ndefaultCharsets[\"macce\"] = charsets[38];\ndefaultCharsets[\"macroman\"] = charsets[39];\ndefaultCharsets[\"cp852\"] = charsets[40];\ndefaultCharsets[\"latin7\"] = charsets[41];\ndefaultCharsets[\"utf8mb4\"] = charsets[45];\ndefaultCharsets[\"cp1251\"] = charsets[51];\ndefaultCharsets[\"utf16\"] = charsets[54];\ndefaultCharsets[\"utf16le\"] = charsets[56];\ndefaultCharsets[\"cp1256\"] = charsets[57];\ndefaultCharsets[\"cp1257\"] = charsets[59];\ndefaultCharsets[\"utf32\"] = charsets[60];\ndefaultCharsets[\"binary\"] = charsets[63];\ndefaultCharsets[\"geostd8\"] = charsets[92];\ndefaultCharsets[\"cp932\"] = charsets[95];\ndefaultCharsets[\"eucjpms\"] = charsets[97];\ndefaultCharsets[\"gb18030\"] = charsets[248];\nmodule.exports = Collation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/const/collations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/const/connection_status.js":
/*!*************************************************************!*\
  !*** ./node_modules/mariadb/lib/const/connection_status.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\nconst Status = {\n    NOT_CONNECTED: 1,\n    CONNECTING: 2,\n    AUTHENTICATING: 3,\n    INIT_CMD: 4,\n    CONNECTED: 5,\n    CLOSING: 6,\n    CLOSED: 7\n};\nmodule.exports.Status = Status;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29uc3QvY29ubmVjdGlvbl9zdGF0dXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTO0lBQ2JDLGVBQWU7SUFDZkMsWUFBWTtJQUNaQyxnQkFBZ0I7SUFDaEJDLFVBQVU7SUFDVkMsV0FBVztJQUNYQyxTQUFTO0lBQ1RDLFFBQVE7QUFDVjtBQUVBQyxxQkFBcUIsR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZm5leHRqcy8uL25vZGVfbW9kdWxlcy9tYXJpYWRiL2xpYi9jb25zdC9jb25uZWN0aW9uX3N0YXR1cy5qcz8xMjdkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU3RhdHVzID0ge1xuICBOT1RfQ09OTkVDVEVEOiAxLFxuICBDT05ORUNUSU5HOiAyLFxuICBBVVRIRU5USUNBVElORzogMyxcbiAgSU5JVF9DTUQ6IDQsXG4gIENPTk5FQ1RFRDogNSxcbiAgQ0xPU0lORzogNixcbiAgQ0xPU0VEOiA3XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5TdGF0dXMgPSBTdGF0dXM7XG4iXSwibmFtZXMiOlsiU3RhdHVzIiwiTk9UX0NPTk5FQ1RFRCIsIkNPTk5FQ1RJTkciLCJBVVRIRU5USUNBVElORyIsIklOSVRfQ01EIiwiQ09OTkVDVEVEIiwiQ0xPU0lORyIsIkNMT1NFRCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/const/connection_status.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/const/error-code.js":
/*!******************************************************!*\
  !*** ./node_modules/mariadb/lib/const/error-code.js ***!
  \******************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\n/**\n * File generated using test/tools/generate-mariadb.js\n * from MariaDB 10.9\n *\n * !!!!!! DO NOT CHANGE MANUALLY !!!!!!\n */ let codes = {};\ncodes[120] = \"HA_ERR_KEY_NOT_FOUND\";\ncodes[121] = \"HA_ERR_FOUND_DUPP_KEY\";\ncodes[122] = \"HA_ERR_INTERNAL_ERROR\";\ncodes[123] = \"HA_ERR_RECORD_CHANGED\";\ncodes[124] = \"HA_ERR_WRONG_INDEX\";\ncodes[126] = \"HA_ERR_CRASHED\";\ncodes[127] = \"HA_ERR_WRONG_IN_RECORD\";\ncodes[128] = \"HA_ERR_OUT_OF_MEM\";\ncodes[130] = \"HA_ERR_NOT_A_TABLE\";\ncodes[131] = \"HA_ERR_WRONG_COMMAND\";\ncodes[132] = \"HA_ERR_OLD_FILE\";\ncodes[133] = \"HA_ERR_NO_ACTIVE_RECORD\";\ncodes[134] = \"HA_ERR_RECORD_DELETED\";\ncodes[135] = \"HA_ERR_RECORD_FILE_FULL\";\ncodes[136] = \"HA_ERR_INDEX_FILE_FULL\";\ncodes[137] = \"HA_ERR_END_OF_FILE\";\ncodes[138] = \"HA_ERR_UNSUPPORTED\";\ncodes[139] = \"HA_ERR_TO_BIG_ROW\";\ncodes[140] = \"HA_WRONG_CREATE_OPTION\";\ncodes[141] = \"HA_ERR_FOUND_DUPP_UNIQUE\";\ncodes[142] = \"HA_ERR_UNKNOWN_CHARSET\";\ncodes[143] = \"HA_ERR_WRONG_MRG_TABLE_DEF\";\ncodes[144] = \"HA_ERR_CRASHED_ON_REPAIR\";\ncodes[145] = \"HA_ERR_CRASHED_ON_USAGE\";\ncodes[146] = \"HA_ERR_LOCK_WAIT_TIMEOUT\";\ncodes[147] = \"HA_ERR_LOCK_TABLE_FULL\";\ncodes[148] = \"HA_ERR_READ_ONLY_TRANSACTION\";\ncodes[149] = \"HA_ERR_LOCK_DEADLOCK\";\ncodes[150] = \"HA_ERR_CANNOT_ADD_FOREIGN\";\ncodes[151] = \"HA_ERR_NO_REFERENCED_ROW\";\ncodes[152] = \"HA_ERR_ROW_IS_REFERENCED\";\ncodes[153] = \"HA_ERR_NO_SAVEPOINT\";\ncodes[154] = \"HA_ERR_NON_UNIQUE_BLOCK_SIZE\";\ncodes[155] = \"HA_ERR_NO_SUCH_TABLE\";\ncodes[156] = \"HA_ERR_TABLE_EXIST\";\ncodes[157] = \"HA_ERR_NO_CONNECTION\";\ncodes[158] = \"HA_ERR_NULL_IN_SPATIAL\";\ncodes[159] = \"HA_ERR_TABLE_DEF_CHANGED\";\ncodes[160] = \"HA_ERR_NO_PARTITION_FOUND\";\ncodes[161] = \"HA_ERR_RBR_LOGGING_FAILED\";\ncodes[162] = \"HA_ERR_DROP_INDEX_FK\";\ncodes[163] = \"HA_ERR_FOREIGN_DUPLICATE_KEY\";\ncodes[164] = \"HA_ERR_TABLE_NEEDS_UPGRADE\";\ncodes[165] = \"HA_ERR_TABLE_READONLY\";\ncodes[166] = \"HA_ERR_AUTOINC_READ_FAILED\";\ncodes[167] = \"HA_ERR_AUTOINC_ERANGE\";\ncodes[168] = \"HA_ERR_GENERIC\";\ncodes[169] = \"HA_ERR_RECORD_IS_THE_SAME\";\ncodes[170] = \"HA_ERR_LOGGING_IMPOSSIBLE\";\ncodes[171] = \"HA_ERR_CORRUPT_EVENT\";\ncodes[172] = \"HA_ERR_NEW_FILE\";\ncodes[173] = \"HA_ERR_ROWS_EVENT_APPLY\";\ncodes[174] = \"HA_ERR_INITIALIZATION\";\ncodes[175] = \"HA_ERR_FILE_TOO_SHORT\";\ncodes[176] = \"HA_ERR_WRONG_CRC\";\ncodes[177] = \"HA_ERR_TOO_MANY_CONCURRENT_TRXS\";\ncodes[178] = \"HA_ERR_NOT_IN_LOCK_PARTITIONS\";\ncodes[179] = \"HA_ERR_INDEX_COL_TOO_LONG\";\ncodes[180] = \"HA_ERR_INDEX_CORRUPT\";\ncodes[181] = \"HA_ERR_UNDO_REC_TOO_BIG\";\ncodes[182] = \"HA_FTS_INVALID_DOCID\";\ncodes[184] = \"HA_ERR_TABLESPACE_EXISTS\";\ncodes[185] = \"HA_ERR_TOO_MANY_FIELDS\";\ncodes[186] = \"HA_ERR_ROW_IN_WRONG_PARTITION\";\ncodes[187] = \"HA_ERR_ROW_NOT_VISIBLE\";\ncodes[188] = \"HA_ERR_ABORTED_BY_USER\";\ncodes[189] = \"HA_ERR_DISK_FULL\";\ncodes[190] = \"HA_ERR_INCOMPATIBLE_DEFINITION\";\ncodes[191] = \"HA_ERR_FTS_TOO_MANY_WORDS_IN_PHRASE\";\ncodes[192] = \"HA_ERR_DECRYPTION_FAILED\";\ncodes[193] = \"HA_ERR_FK_DEPTH_EXCEEDED\";\ncodes[194] = \"HA_ERR_TABLESPACE_MISSING\";\ncodes[195] = \"HA_ERR_SEQUENCE_INVALID_DATA\";\ncodes[196] = \"HA_ERR_SEQUENCE_RUN_OUT\";\ncodes[197] = \"HA_ERR_COMMIT_ERROR\";\ncodes[198] = \"HA_ERR_PARTITION_LIST\";\ncodes[1000] = \"ER_HASHCHK\";\ncodes[1001] = \"ER_NISAMCHK\";\ncodes[1002] = \"ER_NO\";\ncodes[1003] = \"ER_YES\";\ncodes[1004] = \"ER_CANT_CREATE_FILE\";\ncodes[1005] = \"ER_CANT_CREATE_TABLE\";\ncodes[1006] = \"ER_CANT_CREATE_DB\";\ncodes[1007] = \"ER_DB_CREATE_EXISTS\";\ncodes[1008] = \"ER_DB_DROP_EXISTS\";\ncodes[1009] = \"ER_DB_DROP_DELETE\";\ncodes[1010] = \"ER_DB_DROP_RMDIR\";\ncodes[1011] = \"ER_CANT_DELETE_FILE\";\ncodes[1012] = \"ER_CANT_FIND_SYSTEM_REC\";\ncodes[1013] = \"ER_CANT_GET_STAT\";\ncodes[1014] = \"ER_CANT_GET_WD\";\ncodes[1015] = \"ER_CANT_LOCK\";\ncodes[1016] = \"ER_CANT_OPEN_FILE\";\ncodes[1017] = \"ER_FILE_NOT_FOUND\";\ncodes[1018] = \"ER_CANT_READ_DIR\";\ncodes[1019] = \"ER_CANT_SET_WD\";\ncodes[1020] = \"ER_CHECKREAD\";\ncodes[1021] = \"ER_DISK_FULL\";\ncodes[1022] = \"ER_DUP_KEY\";\ncodes[1023] = \"ER_ERROR_ON_CLOSE\";\ncodes[1024] = \"ER_ERROR_ON_READ\";\ncodes[1025] = \"ER_ERROR_ON_RENAME\";\ncodes[1026] = \"ER_ERROR_ON_WRITE\";\ncodes[1027] = \"ER_FILE_USED\";\ncodes[1028] = \"ER_FILSORT_ABORT\";\ncodes[1029] = \"ER_FORM_NOT_FOUND\";\ncodes[1030] = \"ER_GET_ERRNO\";\ncodes[1031] = \"ER_ILLEGAL_HA\";\ncodes[1032] = \"ER_KEY_NOT_FOUND\";\ncodes[1033] = \"ER_NOT_FORM_FILE\";\ncodes[1034] = \"ER_NOT_KEYFILE\";\ncodes[1035] = \"ER_OLD_KEYFILE\";\ncodes[1036] = \"ER_OPEN_AS_READONLY\";\ncodes[1037] = \"ER_OUTOFMEMORY\";\ncodes[1038] = \"ER_OUT_OF_SORTMEMORY\";\ncodes[1039] = \"ER_UNEXPECTED_EOF\";\ncodes[1040] = \"ER_CON_COUNT_ERROR\";\ncodes[1041] = \"ER_OUT_OF_RESOURCES\";\ncodes[1042] = \"ER_BAD_HOST_ERROR\";\ncodes[1043] = \"ER_HANDSHAKE_ERROR\";\ncodes[1044] = \"ER_DBACCESS_DENIED_ERROR\";\ncodes[1045] = \"ER_ACCESS_DENIED_ERROR\";\ncodes[1046] = \"ER_NO_DB_ERROR\";\ncodes[1047] = \"ER_UNKNOWN_COM_ERROR\";\ncodes[1048] = \"ER_BAD_NULL_ERROR\";\ncodes[1049] = \"ER_BAD_DB_ERROR\";\ncodes[1050] = \"ER_TABLE_EXISTS_ERROR\";\ncodes[1051] = \"ER_BAD_TABLE_ERROR\";\ncodes[1052] = \"ER_NON_UNIQ_ERROR\";\ncodes[1053] = \"ER_SERVER_SHUTDOWN\";\ncodes[1054] = \"ER_BAD_FIELD_ERROR\";\ncodes[1055] = \"ER_WRONG_FIELD_WITH_GROUP\";\ncodes[1056] = \"ER_WRONG_GROUP_FIELD\";\ncodes[1057] = \"ER_WRONG_SUM_SELECT\";\ncodes[1058] = \"ER_WRONG_VALUE_COUNT\";\ncodes[1059] = \"ER_TOO_LONG_IDENT\";\ncodes[1060] = \"ER_DUP_FIELDNAME\";\ncodes[1061] = \"ER_DUP_KEYNAME\";\ncodes[1062] = \"ER_DUP_ENTRY\";\ncodes[1063] = \"ER_WRONG_FIELD_SPEC\";\ncodes[1064] = \"ER_PARSE_ERROR\";\ncodes[1065] = \"ER_EMPTY_QUERY\";\ncodes[1066] = \"ER_NONUNIQ_TABLE\";\ncodes[1067] = \"ER_INVALID_DEFAULT\";\ncodes[1068] = \"ER_MULTIPLE_PRI_KEY\";\ncodes[1069] = \"ER_TOO_MANY_KEYS\";\ncodes[1070] = \"ER_TOO_MANY_KEY_PARTS\";\ncodes[1071] = \"ER_TOO_LONG_KEY\";\ncodes[1072] = \"ER_KEY_COLUMN_DOES_NOT_EXIST\";\ncodes[1073] = \"ER_BLOB_USED_AS_KEY\";\ncodes[1074] = \"ER_TOO_BIG_FIELDLENGTH\";\ncodes[1075] = \"ER_WRONG_AUTO_KEY\";\ncodes[1076] = \"ER_BINLOG_CANT_DELETE_GTID_DOMAIN\";\ncodes[1077] = \"ER_NORMAL_SHUTDOWN\";\ncodes[1078] = \"ER_GOT_SIGNAL\";\ncodes[1079] = \"ER_SHUTDOWN_COMPLETE\";\ncodes[1080] = \"ER_FORCING_CLOSE\";\ncodes[1081] = \"ER_IPSOCK_ERROR\";\ncodes[1082] = \"ER_NO_SUCH_INDEX\";\ncodes[1083] = \"ER_WRONG_FIELD_TERMINATORS\";\ncodes[1084] = \"ER_BLOBS_AND_NO_TERMINATED\";\ncodes[1085] = \"ER_TEXTFILE_NOT_READABLE\";\ncodes[1086] = \"ER_FILE_EXISTS_ERROR\";\ncodes[1087] = \"ER_LOAD_INFO\";\ncodes[1088] = \"ER_ALTER_INFO\";\ncodes[1089] = \"ER_WRONG_SUB_KEY\";\ncodes[1090] = \"ER_CANT_REMOVE_ALL_FIELDS\";\ncodes[1091] = \"ER_CANT_DROP_FIELD_OR_KEY\";\ncodes[1092] = \"ER_INSERT_INFO\";\ncodes[1093] = \"ER_UPDATE_TABLE_USED\";\ncodes[1094] = \"ER_NO_SUCH_THREAD\";\ncodes[1095] = \"ER_KILL_DENIED_ERROR\";\ncodes[1096] = \"ER_NO_TABLES_USED\";\ncodes[1097] = \"ER_TOO_BIG_SET\";\ncodes[1098] = \"ER_NO_UNIQUE_LOGFILE\";\ncodes[1099] = \"ER_TABLE_NOT_LOCKED_FOR_WRITE\";\ncodes[1100] = \"ER_TABLE_NOT_LOCKED\";\ncodes[1101] = \"ER_UNUSED_17\";\ncodes[1102] = \"ER_WRONG_DB_NAME\";\ncodes[1103] = \"ER_WRONG_TABLE_NAME\";\ncodes[1104] = \"ER_TOO_BIG_SELECT\";\ncodes[1105] = \"ER_UNKNOWN_ERROR\";\ncodes[1106] = \"ER_UNKNOWN_PROCEDURE\";\ncodes[1107] = \"ER_WRONG_PARAMCOUNT_TO_PROCEDURE\";\ncodes[1108] = \"ER_WRONG_PARAMETERS_TO_PROCEDURE\";\ncodes[1109] = \"ER_UNKNOWN_TABLE\";\ncodes[1110] = \"ER_FIELD_SPECIFIED_TWICE\";\ncodes[1111] = \"ER_INVALID_GROUP_FUNC_USE\";\ncodes[1112] = \"ER_UNSUPPORTED_EXTENSION\";\ncodes[1113] = \"ER_TABLE_MUST_HAVE_COLUMNS\";\ncodes[1114] = \"ER_RECORD_FILE_FULL\";\ncodes[1115] = \"ER_UNKNOWN_CHARACTER_SET\";\ncodes[1116] = \"ER_TOO_MANY_TABLES\";\ncodes[1117] = \"ER_TOO_MANY_FIELDS\";\ncodes[1118] = \"ER_TOO_BIG_ROWSIZE\";\ncodes[1119] = \"ER_STACK_OVERRUN\";\ncodes[1120] = \"ER_WRONG_OUTER_JOIN\";\ncodes[1121] = \"ER_NULL_COLUMN_IN_INDEX\";\ncodes[1122] = \"ER_CANT_FIND_UDF\";\ncodes[1123] = \"ER_CANT_INITIALIZE_UDF\";\ncodes[1124] = \"ER_UDF_NO_PATHS\";\ncodes[1125] = \"ER_UDF_EXISTS\";\ncodes[1126] = \"ER_CANT_OPEN_LIBRARY\";\ncodes[1127] = \"ER_CANT_FIND_DL_ENTRY\";\ncodes[1128] = \"ER_FUNCTION_NOT_DEFINED\";\ncodes[1129] = \"ER_HOST_IS_BLOCKED\";\ncodes[1130] = \"ER_HOST_NOT_PRIVILEGED\";\ncodes[1131] = \"ER_PASSWORD_ANONYMOUS_USER\";\ncodes[1132] = \"ER_PASSWORD_NOT_ALLOWED\";\ncodes[1133] = \"ER_PASSWORD_NO_MATCH\";\ncodes[1134] = \"ER_UPDATE_INFO\";\ncodes[1135] = \"ER_CANT_CREATE_THREAD\";\ncodes[1136] = \"ER_WRONG_VALUE_COUNT_ON_ROW\";\ncodes[1137] = \"ER_CANT_REOPEN_TABLE\";\ncodes[1138] = \"ER_INVALID_USE_OF_NULL\";\ncodes[1139] = \"ER_REGEXP_ERROR\";\ncodes[1140] = \"ER_MIX_OF_GROUP_FUNC_AND_FIELDS\";\ncodes[1141] = \"ER_NONEXISTING_GRANT\";\ncodes[1142] = \"ER_TABLEACCESS_DENIED_ERROR\";\ncodes[1143] = \"ER_COLUMNACCESS_DENIED_ERROR\";\ncodes[1144] = \"ER_ILLEGAL_GRANT_FOR_TABLE\";\ncodes[1145] = \"ER_GRANT_WRONG_HOST_OR_USER\";\ncodes[1146] = \"ER_NO_SUCH_TABLE\";\ncodes[1147] = \"ER_NONEXISTING_TABLE_GRANT\";\ncodes[1148] = \"ER_NOT_ALLOWED_COMMAND\";\ncodes[1149] = \"ER_SYNTAX_ERROR\";\ncodes[1150] = \"ER_DELAYED_CANT_CHANGE_LOCK\";\ncodes[1151] = \"ER_TOO_MANY_DELAYED_THREADS\";\ncodes[1152] = \"ER_ABORTING_CONNECTION\";\ncodes[1153] = \"ER_NET_PACKET_TOO_LARGE\";\ncodes[1154] = \"ER_NET_READ_ERROR_FROM_PIPE\";\ncodes[1155] = \"ER_NET_FCNTL_ERROR\";\ncodes[1156] = \"ER_NET_PACKETS_OUT_OF_ORDER\";\ncodes[1157] = \"ER_NET_UNCOMPRESS_ERROR\";\ncodes[1158] = \"ER_NET_READ_ERROR\";\ncodes[1159] = \"ER_NET_READ_INTERRUPTED\";\ncodes[1160] = \"ER_NET_ERROR_ON_WRITE\";\ncodes[1161] = \"ER_NET_WRITE_INTERRUPTED\";\ncodes[1162] = \"ER_TOO_LONG_STRING\";\ncodes[1163] = \"ER_TABLE_CANT_HANDLE_BLOB\";\ncodes[1164] = \"ER_TABLE_CANT_HANDLE_AUTO_INCREMENT\";\ncodes[1165] = \"ER_DELAYED_INSERT_TABLE_LOCKED\";\ncodes[1166] = \"ER_WRONG_COLUMN_NAME\";\ncodes[1167] = \"ER_WRONG_KEY_COLUMN\";\ncodes[1168] = \"ER_WRONG_MRG_TABLE\";\ncodes[1169] = \"ER_DUP_UNIQUE\";\ncodes[1170] = \"ER_BLOB_KEY_WITHOUT_LENGTH\";\ncodes[1171] = \"ER_PRIMARY_CANT_HAVE_NULL\";\ncodes[1172] = \"ER_TOO_MANY_ROWS\";\ncodes[1173] = \"ER_REQUIRES_PRIMARY_KEY\";\ncodes[1174] = \"ER_NO_RAID_COMPILED\";\ncodes[1175] = \"ER_UPDATE_WITHOUT_KEY_IN_SAFE_MODE\";\ncodes[1176] = \"ER_KEY_DOES_NOT_EXISTS\";\ncodes[1177] = \"ER_CHECK_NO_SUCH_TABLE\";\ncodes[1178] = \"ER_CHECK_NOT_IMPLEMENTED\";\ncodes[1179] = \"ER_CANT_DO_THIS_DURING_AN_TRANSACTION\";\ncodes[1180] = \"ER_ERROR_DURING_COMMIT\";\ncodes[1181] = \"ER_ERROR_DURING_ROLLBACK\";\ncodes[1182] = \"ER_ERROR_DURING_FLUSH_LOGS\";\ncodes[1183] = \"ER_ERROR_DURING_CHECKPOINT\";\ncodes[1184] = \"ER_NEW_ABORTING_CONNECTION\";\ncodes[1185] = \"ER_UNUSED_10\";\ncodes[1186] = \"ER_FLUSH_MASTER_BINLOG_CLOSED\";\ncodes[1187] = \"ER_INDEX_REBUILD\";\ncodes[1188] = \"ER_MASTER\";\ncodes[1189] = \"ER_MASTER_NET_READ\";\ncodes[1190] = \"ER_MASTER_NET_WRITE\";\ncodes[1191] = \"ER_FT_MATCHING_KEY_NOT_FOUND\";\ncodes[1192] = \"ER_LOCK_OR_ACTIVE_TRANSACTION\";\ncodes[1193] = \"ER_UNKNOWN_SYSTEM_VARIABLE\";\ncodes[1194] = \"ER_CRASHED_ON_USAGE\";\ncodes[1195] = \"ER_CRASHED_ON_REPAIR\";\ncodes[1196] = \"ER_WARNING_NOT_COMPLETE_ROLLBACK\";\ncodes[1197] = \"ER_TRANS_CACHE_FULL\";\ncodes[1198] = \"ER_SLAVE_MUST_STOP\";\ncodes[1199] = \"ER_SLAVE_NOT_RUNNING\";\ncodes[1200] = \"ER_BAD_SLAVE\";\ncodes[1201] = \"ER_MASTER_INFO\";\ncodes[1202] = \"ER_SLAVE_THREAD\";\ncodes[1203] = \"ER_TOO_MANY_USER_CONNECTIONS\";\ncodes[1204] = \"ER_SET_CONSTANTS_ONLY\";\ncodes[1205] = \"ER_LOCK_WAIT_TIMEOUT\";\ncodes[1206] = \"ER_LOCK_TABLE_FULL\";\ncodes[1207] = \"ER_READ_ONLY_TRANSACTION\";\ncodes[1208] = \"ER_DROP_DB_WITH_READ_LOCK\";\ncodes[1209] = \"ER_CREATE_DB_WITH_READ_LOCK\";\ncodes[1210] = \"ER_WRONG_ARGUMENTS\";\ncodes[1211] = \"ER_NO_PERMISSION_TO_CREATE_USER\";\ncodes[1212] = \"ER_UNION_TABLES_IN_DIFFERENT_DIR\";\ncodes[1213] = \"ER_LOCK_DEADLOCK\";\ncodes[1214] = \"ER_TABLE_CANT_HANDLE_FT\";\ncodes[1215] = \"ER_CANNOT_ADD_FOREIGN\";\ncodes[1216] = \"ER_NO_REFERENCED_ROW\";\ncodes[1217] = \"ER_ROW_IS_REFERENCED\";\ncodes[1218] = \"ER_CONNECT_TO_MASTER\";\ncodes[1219] = \"ER_QUERY_ON_MASTER\";\ncodes[1220] = \"ER_ERROR_WHEN_EXECUTING_COMMAND\";\ncodes[1221] = \"ER_WRONG_USAGE\";\ncodes[1222] = \"ER_WRONG_NUMBER_OF_COLUMNS_IN_SELECT\";\ncodes[1223] = \"ER_CANT_UPDATE_WITH_READLOCK\";\ncodes[1224] = \"ER_MIXING_NOT_ALLOWED\";\ncodes[1225] = \"ER_DUP_ARGUMENT\";\ncodes[1226] = \"ER_USER_LIMIT_REACHED\";\ncodes[1227] = \"ER_SPECIFIC_ACCESS_DENIED_ERROR\";\ncodes[1228] = \"ER_LOCAL_VARIABLE\";\ncodes[1229] = \"ER_GLOBAL_VARIABLE\";\ncodes[1230] = \"ER_NO_DEFAULT\";\ncodes[1231] = \"ER_WRONG_VALUE_FOR_VAR\";\ncodes[1232] = \"ER_WRONG_TYPE_FOR_VAR\";\ncodes[1233] = \"ER_VAR_CANT_BE_READ\";\ncodes[1234] = \"ER_CANT_USE_OPTION_HERE\";\ncodes[1235] = \"ER_NOT_SUPPORTED_YET\";\ncodes[1236] = \"ER_MASTER_FATAL_ERROR_READING_BINLOG\";\ncodes[1237] = \"ER_SLAVE_IGNORED_TABLE\";\ncodes[1238] = \"ER_INCORRECT_GLOBAL_LOCAL_VAR\";\ncodes[1239] = \"ER_WRONG_FK_DEF\";\ncodes[1240] = \"ER_KEY_REF_DO_NOT_MATCH_TABLE_REF\";\ncodes[1241] = \"ER_OPERAND_COLUMNS\";\ncodes[1242] = \"ER_SUBQUERY_NO_1_ROW\";\ncodes[1243] = \"ER_UNKNOWN_STMT_HANDLER\";\ncodes[1244] = \"ER_CORRUPT_HELP_DB\";\ncodes[1245] = \"ER_CYCLIC_REFERENCE\";\ncodes[1246] = \"ER_AUTO_CONVERT\";\ncodes[1247] = \"ER_ILLEGAL_REFERENCE\";\ncodes[1248] = \"ER_DERIVED_MUST_HAVE_ALIAS\";\ncodes[1249] = \"ER_SELECT_REDUCED\";\ncodes[1250] = \"ER_TABLENAME_NOT_ALLOWED_HERE\";\ncodes[1251] = \"ER_NOT_SUPPORTED_AUTH_MODE\";\ncodes[1252] = \"ER_SPATIAL_CANT_HAVE_NULL\";\ncodes[1253] = \"ER_COLLATION_CHARSET_MISMATCH\";\ncodes[1254] = \"ER_SLAVE_WAS_RUNNING\";\ncodes[1255] = \"ER_SLAVE_WAS_NOT_RUNNING\";\ncodes[1256] = \"ER_TOO_BIG_FOR_UNCOMPRESS\";\ncodes[1257] = \"ER_ZLIB_Z_MEM_ERROR\";\ncodes[1258] = \"ER_ZLIB_Z_BUF_ERROR\";\ncodes[1259] = \"ER_ZLIB_Z_DATA_ERROR\";\ncodes[1260] = \"ER_CUT_VALUE_GROUP_CONCAT\";\ncodes[1261] = \"ER_WARN_TOO_FEW_RECORDS\";\ncodes[1262] = \"ER_WARN_TOO_MANY_RECORDS\";\ncodes[1263] = \"ER_WARN_NULL_TO_NOTNULL\";\ncodes[1264] = \"ER_WARN_DATA_OUT_OF_RANGE\";\ncodes[1265] = \"WARN_DATA_TRUNCATED\";\ncodes[1266] = \"ER_WARN_USING_OTHER_HANDLER\";\ncodes[1267] = \"ER_CANT_AGGREGATE_2COLLATIONS\";\ncodes[1268] = \"ER_DROP_USER\";\ncodes[1269] = \"ER_REVOKE_GRANTS\";\ncodes[1270] = \"ER_CANT_AGGREGATE_3COLLATIONS\";\ncodes[1271] = \"ER_CANT_AGGREGATE_NCOLLATIONS\";\ncodes[1272] = \"ER_VARIABLE_IS_NOT_STRUCT\";\ncodes[1273] = \"ER_UNKNOWN_COLLATION\";\ncodes[1274] = \"ER_SLAVE_IGNORED_SSL_PARAMS\";\ncodes[1275] = \"ER_SERVER_IS_IN_SECURE_AUTH_MODE\";\ncodes[1276] = \"ER_WARN_FIELD_RESOLVED\";\ncodes[1277] = \"ER_BAD_SLAVE_UNTIL_COND\";\ncodes[1278] = \"ER_MISSING_SKIP_SLAVE\";\ncodes[1279] = \"ER_UNTIL_COND_IGNORED\";\ncodes[1280] = \"ER_WRONG_NAME_FOR_INDEX\";\ncodes[1281] = \"ER_WRONG_NAME_FOR_CATALOG\";\ncodes[1282] = \"ER_WARN_QC_RESIZE\";\ncodes[1283] = \"ER_BAD_FT_COLUMN\";\ncodes[1284] = \"ER_UNKNOWN_KEY_CACHE\";\ncodes[1285] = \"ER_WARN_HOSTNAME_WONT_WORK\";\ncodes[1286] = \"ER_UNKNOWN_STORAGE_ENGINE\";\ncodes[1287] = \"ER_WARN_DEPRECATED_SYNTAX\";\ncodes[1288] = \"ER_NON_UPDATABLE_TABLE\";\ncodes[1289] = \"ER_FEATURE_DISABLED\";\ncodes[1290] = \"ER_OPTION_PREVENTS_STATEMENT\";\ncodes[1291] = \"ER_DUPLICATED_VALUE_IN_TYPE\";\ncodes[1292] = \"ER_TRUNCATED_WRONG_VALUE\";\ncodes[1293] = \"ER_TOO_MUCH_AUTO_TIMESTAMP_COLS\";\ncodes[1294] = \"ER_INVALID_ON_UPDATE\";\ncodes[1295] = \"ER_UNSUPPORTED_PS\";\ncodes[1296] = \"ER_GET_ERRMSG\";\ncodes[1297] = \"ER_GET_TEMPORARY_ERRMSG\";\ncodes[1298] = \"ER_UNKNOWN_TIME_ZONE\";\ncodes[1299] = \"ER_WARN_INVALID_TIMESTAMP\";\ncodes[1300] = \"ER_INVALID_CHARACTER_STRING\";\ncodes[1301] = \"ER_WARN_ALLOWED_PACKET_OVERFLOWED\";\ncodes[1302] = \"ER_CONFLICTING_DECLARATIONS\";\ncodes[1303] = \"ER_SP_NO_RECURSIVE_CREATE\";\ncodes[1304] = \"ER_SP_ALREADY_EXISTS\";\ncodes[1305] = \"ER_SP_DOES_NOT_EXIST\";\ncodes[1306] = \"ER_SP_DROP_FAILED\";\ncodes[1307] = \"ER_SP_STORE_FAILED\";\ncodes[1308] = \"ER_SP_LILABEL_MISMATCH\";\ncodes[1309] = \"ER_SP_LABEL_REDEFINE\";\ncodes[1310] = \"ER_SP_LABEL_MISMATCH\";\ncodes[1311] = \"ER_SP_UNINIT_VAR\";\ncodes[1312] = \"ER_SP_BADSELECT\";\ncodes[1313] = \"ER_SP_BADRETURN\";\ncodes[1314] = \"ER_SP_BADSTATEMENT\";\ncodes[1315] = \"ER_UPDATE_LOG_DEPRECATED_IGNORED\";\ncodes[1316] = \"ER_UPDATE_LOG_DEPRECATED_TRANSLATED\";\ncodes[1317] = \"ER_QUERY_INTERRUPTED\";\ncodes[1318] = \"ER_SP_WRONG_NO_OF_ARGS\";\ncodes[1319] = \"ER_SP_COND_MISMATCH\";\ncodes[1320] = \"ER_SP_NORETURN\";\ncodes[1321] = \"ER_SP_NORETURNEND\";\ncodes[1322] = \"ER_SP_BAD_CURSOR_QUERY\";\ncodes[1323] = \"ER_SP_BAD_CURSOR_SELECT\";\ncodes[1324] = \"ER_SP_CURSOR_MISMATCH\";\ncodes[1325] = \"ER_SP_CURSOR_ALREADY_OPEN\";\ncodes[1326] = \"ER_SP_CURSOR_NOT_OPEN\";\ncodes[1327] = \"ER_SP_UNDECLARED_VAR\";\ncodes[1328] = \"ER_SP_WRONG_NO_OF_FETCH_ARGS\";\ncodes[1329] = \"ER_SP_FETCH_NO_DATA\";\ncodes[1330] = \"ER_SP_DUP_PARAM\";\ncodes[1331] = \"ER_SP_DUP_VAR\";\ncodes[1332] = \"ER_SP_DUP_COND\";\ncodes[1333] = \"ER_SP_DUP_CURS\";\ncodes[1334] = \"ER_SP_CANT_ALTER\";\ncodes[1335] = \"ER_SP_SUBSELECT_NYI\";\ncodes[1336] = \"ER_STMT_NOT_ALLOWED_IN_SF_OR_TRG\";\ncodes[1337] = \"ER_SP_VARCOND_AFTER_CURSHNDLR\";\ncodes[1338] = \"ER_SP_CURSOR_AFTER_HANDLER\";\ncodes[1339] = \"ER_SP_CASE_NOT_FOUND\";\ncodes[1340] = \"ER_FPARSER_TOO_BIG_FILE\";\ncodes[1341] = \"ER_FPARSER_BAD_HEADER\";\ncodes[1342] = \"ER_FPARSER_EOF_IN_COMMENT\";\ncodes[1343] = \"ER_FPARSER_ERROR_IN_PARAMETER\";\ncodes[1344] = \"ER_FPARSER_EOF_IN_UNKNOWN_PARAMETER\";\ncodes[1345] = \"ER_VIEW_NO_EXPLAIN\";\ncodes[1346] = \"ER_FRM_UNKNOWN_TYPE\";\ncodes[1347] = \"ER_WRONG_OBJECT\";\ncodes[1348] = \"ER_NONUPDATEABLE_COLUMN\";\ncodes[1349] = \"ER_VIEW_SELECT_DERIVED\";\ncodes[1350] = \"ER_VIEW_SELECT_CLAUSE\";\ncodes[1351] = \"ER_VIEW_SELECT_VARIABLE\";\ncodes[1352] = \"ER_VIEW_SELECT_TMPTABLE\";\ncodes[1353] = \"ER_VIEW_WRONG_LIST\";\ncodes[1354] = \"ER_WARN_VIEW_MERGE\";\ncodes[1355] = \"ER_WARN_VIEW_WITHOUT_KEY\";\ncodes[1356] = \"ER_VIEW_INVALID\";\ncodes[1357] = \"ER_SP_NO_DROP_SP\";\ncodes[1358] = \"ER_SP_GOTO_IN_HNDLR\";\ncodes[1359] = \"ER_TRG_ALREADY_EXISTS\";\ncodes[1360] = \"ER_TRG_DOES_NOT_EXIST\";\ncodes[1361] = \"ER_TRG_ON_VIEW_OR_TEMP_TABLE\";\ncodes[1362] = \"ER_TRG_CANT_CHANGE_ROW\";\ncodes[1363] = \"ER_TRG_NO_SUCH_ROW_IN_TRG\";\ncodes[1364] = \"ER_NO_DEFAULT_FOR_FIELD\";\ncodes[1365] = \"ER_DIVISION_BY_ZERO\";\ncodes[1366] = \"ER_TRUNCATED_WRONG_VALUE_FOR_FIELD\";\ncodes[1367] = \"ER_ILLEGAL_VALUE_FOR_TYPE\";\ncodes[1368] = \"ER_VIEW_NONUPD_CHECK\";\ncodes[1369] = \"ER_VIEW_CHECK_FAILED\";\ncodes[1370] = \"ER_PROCACCESS_DENIED_ERROR\";\ncodes[1371] = \"ER_RELAY_LOG_FAIL\";\ncodes[1372] = \"ER_PASSWD_LENGTH\";\ncodes[1373] = \"ER_UNKNOWN_TARGET_BINLOG\";\ncodes[1374] = \"ER_IO_ERR_LOG_INDEX_READ\";\ncodes[1375] = \"ER_BINLOG_PURGE_PROHIBITED\";\ncodes[1376] = \"ER_FSEEK_FAIL\";\ncodes[1377] = \"ER_BINLOG_PURGE_FATAL_ERR\";\ncodes[1378] = \"ER_LOG_IN_USE\";\ncodes[1379] = \"ER_LOG_PURGE_UNKNOWN_ERR\";\ncodes[1380] = \"ER_RELAY_LOG_INIT\";\ncodes[1381] = \"ER_NO_BINARY_LOGGING\";\ncodes[1382] = \"ER_RESERVED_SYNTAX\";\ncodes[1383] = \"ER_WSAS_FAILED\";\ncodes[1384] = \"ER_DIFF_GROUPS_PROC\";\ncodes[1385] = \"ER_NO_GROUP_FOR_PROC\";\ncodes[1386] = \"ER_ORDER_WITH_PROC\";\ncodes[1387] = \"ER_LOGGING_PROHIBIT_CHANGING_OF\";\ncodes[1388] = \"ER_NO_FILE_MAPPING\";\ncodes[1389] = \"ER_WRONG_MAGIC\";\ncodes[1390] = \"ER_PS_MANY_PARAM\";\ncodes[1391] = \"ER_KEY_PART_0\";\ncodes[1392] = \"ER_VIEW_CHECKSUM\";\ncodes[1393] = \"ER_VIEW_MULTIUPDATE\";\ncodes[1394] = \"ER_VIEW_NO_INSERT_FIELD_LIST\";\ncodes[1395] = \"ER_VIEW_DELETE_MERGE_VIEW\";\ncodes[1396] = \"ER_CANNOT_USER\";\ncodes[1397] = \"ER_XAER_NOTA\";\ncodes[1398] = \"ER_XAER_INVAL\";\ncodes[1399] = \"ER_XAER_RMFAIL\";\ncodes[1400] = \"ER_XAER_OUTSIDE\";\ncodes[1401] = \"ER_XAER_RMERR\";\ncodes[1402] = \"ER_XA_RBROLLBACK\";\ncodes[1403] = \"ER_NONEXISTING_PROC_GRANT\";\ncodes[1404] = \"ER_PROC_AUTO_GRANT_FAIL\";\ncodes[1405] = \"ER_PROC_AUTO_REVOKE_FAIL\";\ncodes[1406] = \"ER_DATA_TOO_LONG\";\ncodes[1407] = \"ER_SP_BAD_SQLSTATE\";\ncodes[1408] = \"ER_STARTUP\";\ncodes[1409] = \"ER_LOAD_FROM_FIXED_SIZE_ROWS_TO_VAR\";\ncodes[1410] = \"ER_CANT_CREATE_USER_WITH_GRANT\";\ncodes[1411] = \"ER_WRONG_VALUE_FOR_TYPE\";\ncodes[1412] = \"ER_TABLE_DEF_CHANGED\";\ncodes[1413] = \"ER_SP_DUP_HANDLER\";\ncodes[1414] = \"ER_SP_NOT_VAR_ARG\";\ncodes[1415] = \"ER_SP_NO_RETSET\";\ncodes[1416] = \"ER_CANT_CREATE_GEOMETRY_OBJECT\";\ncodes[1417] = \"ER_FAILED_ROUTINE_BREAK_BINLOG\";\ncodes[1418] = \"ER_BINLOG_UNSAFE_ROUTINE\";\ncodes[1419] = \"ER_BINLOG_CREATE_ROUTINE_NEED_SUPER\";\ncodes[1420] = \"ER_EXEC_STMT_WITH_OPEN_CURSOR\";\ncodes[1421] = \"ER_STMT_HAS_NO_OPEN_CURSOR\";\ncodes[1422] = \"ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG\";\ncodes[1423] = \"ER_NO_DEFAULT_FOR_VIEW_FIELD\";\ncodes[1424] = \"ER_SP_NO_RECURSION\";\ncodes[1425] = \"ER_TOO_BIG_SCALE\";\ncodes[1426] = \"ER_TOO_BIG_PRECISION\";\ncodes[1427] = \"ER_M_BIGGER_THAN_D\";\ncodes[1428] = \"ER_WRONG_LOCK_OF_SYSTEM_TABLE\";\ncodes[1429] = \"ER_CONNECT_TO_FOREIGN_DATA_SOURCE\";\ncodes[1430] = \"ER_QUERY_ON_FOREIGN_DATA_SOURCE\";\ncodes[1431] = \"ER_FOREIGN_DATA_SOURCE_DOESNT_EXIST\";\ncodes[1432] = \"ER_FOREIGN_DATA_STRING_INVALID_CANT_CREATE\";\ncodes[1433] = \"ER_FOREIGN_DATA_STRING_INVALID\";\ncodes[1434] = \"ER_CANT_CREATE_FEDERATED_TABLE\";\ncodes[1435] = \"ER_TRG_IN_WRONG_SCHEMA\";\ncodes[1436] = \"ER_STACK_OVERRUN_NEED_MORE\";\ncodes[1437] = \"ER_TOO_LONG_BODY\";\ncodes[1438] = \"ER_WARN_CANT_DROP_DEFAULT_KEYCACHE\";\ncodes[1439] = \"ER_TOO_BIG_DISPLAYWIDTH\";\ncodes[1440] = \"ER_XAER_DUPID\";\ncodes[1441] = \"ER_DATETIME_FUNCTION_OVERFLOW\";\ncodes[1442] = \"ER_CANT_UPDATE_USED_TABLE_IN_SF_OR_TRG\";\ncodes[1443] = \"ER_VIEW_PREVENT_UPDATE\";\ncodes[1444] = \"ER_PS_NO_RECURSION\";\ncodes[1445] = \"ER_SP_CANT_SET_AUTOCOMMIT\";\ncodes[1446] = \"ER_MALFORMED_DEFINER\";\ncodes[1447] = \"ER_VIEW_FRM_NO_USER\";\ncodes[1448] = \"ER_VIEW_OTHER_USER\";\ncodes[1449] = \"ER_NO_SUCH_USER\";\ncodes[1450] = \"ER_FORBID_SCHEMA_CHANGE\";\ncodes[1451] = \"ER_ROW_IS_REFERENCED_2\";\ncodes[1452] = \"ER_NO_REFERENCED_ROW_2\";\ncodes[1453] = \"ER_SP_BAD_VAR_SHADOW\";\ncodes[1454] = \"ER_TRG_NO_DEFINER\";\ncodes[1455] = \"ER_OLD_FILE_FORMAT\";\ncodes[1456] = \"ER_SP_RECURSION_LIMIT\";\ncodes[1457] = \"ER_SP_PROC_TABLE_CORRUPT\";\ncodes[1458] = \"ER_SP_WRONG_NAME\";\ncodes[1459] = \"ER_TABLE_NEEDS_UPGRADE\";\ncodes[1460] = \"ER_SP_NO_AGGREGATE\";\ncodes[1461] = \"ER_MAX_PREPARED_STMT_COUNT_REACHED\";\ncodes[1462] = \"ER_VIEW_RECURSIVE\";\ncodes[1463] = \"ER_NON_GROUPING_FIELD_USED\";\ncodes[1464] = \"ER_TABLE_CANT_HANDLE_SPKEYS\";\ncodes[1465] = \"ER_NO_TRIGGERS_ON_SYSTEM_SCHEMA\";\ncodes[1466] = \"ER_REMOVED_SPACES\";\ncodes[1467] = \"ER_AUTOINC_READ_FAILED\";\ncodes[1468] = \"ER_USERNAME\";\ncodes[1469] = \"ER_HOSTNAME\";\ncodes[1470] = \"ER_WRONG_STRING_LENGTH\";\ncodes[1471] = \"ER_NON_INSERTABLE_TABLE\";\ncodes[1472] = \"ER_ADMIN_WRONG_MRG_TABLE\";\ncodes[1473] = \"ER_TOO_HIGH_LEVEL_OF_NESTING_FOR_SELECT\";\ncodes[1474] = \"ER_NAME_BECOMES_EMPTY\";\ncodes[1475] = \"ER_AMBIGUOUS_FIELD_TERM\";\ncodes[1476] = \"ER_FOREIGN_SERVER_EXISTS\";\ncodes[1477] = \"ER_FOREIGN_SERVER_DOESNT_EXIST\";\ncodes[1478] = \"ER_ILLEGAL_HA_CREATE_OPTION\";\ncodes[1479] = \"ER_PARTITION_REQUIRES_VALUES_ERROR\";\ncodes[1480] = \"ER_PARTITION_WRONG_VALUES_ERROR\";\ncodes[1481] = \"ER_PARTITION_MAXVALUE_ERROR\";\ncodes[1482] = \"ER_PARTITION_SUBPARTITION_ERROR\";\ncodes[1483] = \"ER_PARTITION_SUBPART_MIX_ERROR\";\ncodes[1484] = \"ER_PARTITION_WRONG_NO_PART_ERROR\";\ncodes[1485] = \"ER_PARTITION_WRONG_NO_SUBPART_ERROR\";\ncodes[1486] = \"ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR\";\ncodes[1487] = \"ER_NOT_CONSTANT_EXPRESSION\";\ncodes[1488] = \"ER_FIELD_NOT_FOUND_PART_ERROR\";\ncodes[1489] = \"ER_LIST_OF_FIELDS_ONLY_IN_HASH_ERROR\";\ncodes[1490] = \"ER_INCONSISTENT_PARTITION_INFO_ERROR\";\ncodes[1491] = \"ER_PARTITION_FUNC_NOT_ALLOWED_ERROR\";\ncodes[1492] = \"ER_PARTITIONS_MUST_BE_DEFINED_ERROR\";\ncodes[1493] = \"ER_RANGE_NOT_INCREASING_ERROR\";\ncodes[1494] = \"ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR\";\ncodes[1495] = \"ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR\";\ncodes[1496] = \"ER_PARTITION_ENTRY_ERROR\";\ncodes[1497] = \"ER_MIX_HANDLER_ERROR\";\ncodes[1498] = \"ER_PARTITION_NOT_DEFINED_ERROR\";\ncodes[1499] = \"ER_TOO_MANY_PARTITIONS_ERROR\";\ncodes[1500] = \"ER_SUBPARTITION_ERROR\";\ncodes[1501] = \"ER_CANT_CREATE_HANDLER_FILE\";\ncodes[1502] = \"ER_BLOB_FIELD_IN_PART_FUNC_ERROR\";\ncodes[1503] = \"ER_UNIQUE_KEY_NEED_ALL_FIELDS_IN_PF\";\ncodes[1504] = \"ER_NO_PARTS_ERROR\";\ncodes[1505] = \"ER_PARTITION_MGMT_ON_NONPARTITIONED\";\ncodes[1506] = \"ER_FEATURE_NOT_SUPPORTED_WITH_PARTITIONING\";\ncodes[1507] = \"ER_PARTITION_DOES_NOT_EXIST\";\ncodes[1508] = \"ER_DROP_LAST_PARTITION\";\ncodes[1509] = \"ER_COALESCE_ONLY_ON_HASH_PARTITION\";\ncodes[1510] = \"ER_REORG_HASH_ONLY_ON_SAME_NO\";\ncodes[1511] = \"ER_REORG_NO_PARAM_ERROR\";\ncodes[1512] = \"ER_ONLY_ON_RANGE_LIST_PARTITION\";\ncodes[1513] = \"ER_ADD_PARTITION_SUBPART_ERROR\";\ncodes[1514] = \"ER_ADD_PARTITION_NO_NEW_PARTITION\";\ncodes[1515] = \"ER_COALESCE_PARTITION_NO_PARTITION\";\ncodes[1516] = \"ER_REORG_PARTITION_NOT_EXIST\";\ncodes[1517] = \"ER_SAME_NAME_PARTITION\";\ncodes[1518] = \"ER_NO_BINLOG_ERROR\";\ncodes[1519] = \"ER_CONSECUTIVE_REORG_PARTITIONS\";\ncodes[1520] = \"ER_REORG_OUTSIDE_RANGE\";\ncodes[1521] = \"ER_PARTITION_FUNCTION_FAILURE\";\ncodes[1522] = \"ER_PART_STATE_ERROR\";\ncodes[1523] = \"ER_LIMITED_PART_RANGE\";\ncodes[1524] = \"ER_PLUGIN_IS_NOT_LOADED\";\ncodes[1525] = \"ER_WRONG_VALUE\";\ncodes[1526] = \"ER_NO_PARTITION_FOR_GIVEN_VALUE\";\ncodes[1527] = \"ER_FILEGROUP_OPTION_ONLY_ONCE\";\ncodes[1528] = \"ER_CREATE_FILEGROUP_FAILED\";\ncodes[1529] = \"ER_DROP_FILEGROUP_FAILED\";\ncodes[1530] = \"ER_TABLESPACE_AUTO_EXTEND_ERROR\";\ncodes[1531] = \"ER_WRONG_SIZE_NUMBER\";\ncodes[1532] = \"ER_SIZE_OVERFLOW_ERROR\";\ncodes[1533] = \"ER_ALTER_FILEGROUP_FAILED\";\ncodes[1534] = \"ER_BINLOG_ROW_LOGGING_FAILED\";\ncodes[1535] = \"ER_BINLOG_ROW_WRONG_TABLE_DEF\";\ncodes[1536] = \"ER_BINLOG_ROW_RBR_TO_SBR\";\ncodes[1537] = \"ER_EVENT_ALREADY_EXISTS\";\ncodes[1538] = \"ER_EVENT_STORE_FAILED\";\ncodes[1539] = \"ER_EVENT_DOES_NOT_EXIST\";\ncodes[1540] = \"ER_EVENT_CANT_ALTER\";\ncodes[1541] = \"ER_EVENT_DROP_FAILED\";\ncodes[1542] = \"ER_EVENT_INTERVAL_NOT_POSITIVE_OR_TOO_BIG\";\ncodes[1543] = \"ER_EVENT_ENDS_BEFORE_STARTS\";\ncodes[1544] = \"ER_EVENT_EXEC_TIME_IN_THE_PAST\";\ncodes[1545] = \"ER_EVENT_OPEN_TABLE_FAILED\";\ncodes[1546] = \"ER_EVENT_NEITHER_M_EXPR_NOR_M_AT\";\ncodes[1547] = \"ER_UNUSED_2\";\ncodes[1548] = \"ER_UNUSED_3\";\ncodes[1549] = \"ER_EVENT_CANNOT_DELETE\";\ncodes[1550] = \"ER_EVENT_COMPILE_ERROR\";\ncodes[1551] = \"ER_EVENT_SAME_NAME\";\ncodes[1552] = \"ER_EVENT_DATA_TOO_LONG\";\ncodes[1553] = \"ER_DROP_INDEX_FK\";\ncodes[1554] = \"ER_WARN_DEPRECATED_SYNTAX_WITH_VER\";\ncodes[1555] = \"ER_CANT_WRITE_LOCK_LOG_TABLE\";\ncodes[1556] = \"ER_CANT_LOCK_LOG_TABLE\";\ncodes[1557] = \"ER_UNUSED_4\";\ncodes[1558] = \"ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE\";\ncodes[1559] = \"ER_TEMP_TABLE_PREVENTS_SWITCH_OUT_OF_RBR\";\ncodes[1560] = \"ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_FORMAT\";\ncodes[1561] = \"ER_UNUSED_13\";\ncodes[1562] = \"ER_PARTITION_NO_TEMPORARY\";\ncodes[1563] = \"ER_PARTITION_CONST_DOMAIN_ERROR\";\ncodes[1564] = \"ER_PARTITION_FUNCTION_IS_NOT_ALLOWED\";\ncodes[1565] = \"ER_DDL_LOG_ERROR\";\ncodes[1566] = \"ER_NULL_IN_VALUES_LESS_THAN\";\ncodes[1567] = \"ER_WRONG_PARTITION_NAME\";\ncodes[1568] = \"ER_CANT_CHANGE_TX_CHARACTERISTICS\";\ncodes[1569] = \"ER_DUP_ENTRY_AUTOINCREMENT_CASE\";\ncodes[1570] = \"ER_EVENT_MODIFY_QUEUE_ERROR\";\ncodes[1571] = \"ER_EVENT_SET_VAR_ERROR\";\ncodes[1572] = \"ER_PARTITION_MERGE_ERROR\";\ncodes[1573] = \"ER_CANT_ACTIVATE_LOG\";\ncodes[1574] = \"ER_RBR_NOT_AVAILABLE\";\ncodes[1575] = \"ER_BASE64_DECODE_ERROR\";\ncodes[1576] = \"ER_EVENT_RECURSION_FORBIDDEN\";\ncodes[1577] = \"ER_EVENTS_DB_ERROR\";\ncodes[1578] = \"ER_ONLY_INTEGERS_ALLOWED\";\ncodes[1579] = \"ER_UNSUPORTED_LOG_ENGINE\";\ncodes[1580] = \"ER_BAD_LOG_STATEMENT\";\ncodes[1581] = \"ER_CANT_RENAME_LOG_TABLE\";\ncodes[1582] = \"ER_WRONG_PARAMCOUNT_TO_NATIVE_FCT\";\ncodes[1583] = \"ER_WRONG_PARAMETERS_TO_NATIVE_FCT\";\ncodes[1584] = \"ER_WRONG_PARAMETERS_TO_STORED_FCT\";\ncodes[1585] = \"ER_NATIVE_FCT_NAME_COLLISION\";\ncodes[1586] = \"ER_DUP_ENTRY_WITH_KEY_NAME\";\ncodes[1587] = \"ER_BINLOG_PURGE_EMFILE\";\ncodes[1588] = \"ER_EVENT_CANNOT_CREATE_IN_THE_PAST\";\ncodes[1589] = \"ER_EVENT_CANNOT_ALTER_IN_THE_PAST\";\ncodes[1590] = \"ER_SLAVE_INCIDENT\";\ncodes[1591] = \"ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT\";\ncodes[1592] = \"ER_BINLOG_UNSAFE_STATEMENT\";\ncodes[1593] = \"ER_SLAVE_FATAL_ERROR\";\ncodes[1594] = \"ER_SLAVE_RELAY_LOG_READ_FAILURE\";\ncodes[1595] = \"ER_SLAVE_RELAY_LOG_WRITE_FAILURE\";\ncodes[1596] = \"ER_SLAVE_CREATE_EVENT_FAILURE\";\ncodes[1597] = \"ER_SLAVE_MASTER_COM_FAILURE\";\ncodes[1598] = \"ER_BINLOG_LOGGING_IMPOSSIBLE\";\ncodes[1599] = \"ER_VIEW_NO_CREATION_CTX\";\ncodes[1600] = \"ER_VIEW_INVALID_CREATION_CTX\";\ncodes[1601] = \"ER_SR_INVALID_CREATION_CTX\";\ncodes[1602] = \"ER_TRG_CORRUPTED_FILE\";\ncodes[1603] = \"ER_TRG_NO_CREATION_CTX\";\ncodes[1604] = \"ER_TRG_INVALID_CREATION_CTX\";\ncodes[1605] = \"ER_EVENT_INVALID_CREATION_CTX\";\ncodes[1606] = \"ER_TRG_CANT_OPEN_TABLE\";\ncodes[1607] = \"ER_CANT_CREATE_SROUTINE\";\ncodes[1608] = \"ER_UNUSED_11\";\ncodes[1609] = \"ER_NO_FORMAT_DESCRIPTION_EVENT_BEFORE_BINLOG_STATEMENT\";\ncodes[1610] = \"ER_SLAVE_CORRUPT_EVENT\";\ncodes[1611] = \"ER_LOAD_DATA_INVALID_COLUMN\";\ncodes[1612] = \"ER_LOG_PURGE_NO_FILE\";\ncodes[1613] = \"ER_XA_RBTIMEOUT\";\ncodes[1614] = \"ER_XA_RBDEADLOCK\";\ncodes[1615] = \"ER_NEED_REPREPARE\";\ncodes[1616] = \"ER_DELAYED_NOT_SUPPORTED\";\ncodes[1617] = \"WARN_NO_MASTER_INFO\";\ncodes[1618] = \"WARN_OPTION_IGNORED\";\ncodes[1619] = \"ER_PLUGIN_DELETE_BUILTIN\";\ncodes[1620] = \"WARN_PLUGIN_BUSY\";\ncodes[1621] = \"ER_VARIABLE_IS_READONLY\";\ncodes[1622] = \"ER_WARN_ENGINE_TRANSACTION_ROLLBACK\";\ncodes[1623] = \"ER_SLAVE_HEARTBEAT_FAILURE\";\ncodes[1624] = \"ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE\";\ncodes[1625] = \"ER_UNUSED_14\";\ncodes[1626] = \"ER_CONFLICT_FN_PARSE_ERROR\";\ncodes[1627] = \"ER_EXCEPTIONS_WRITE_ERROR\";\ncodes[1628] = \"ER_TOO_LONG_TABLE_COMMENT\";\ncodes[1629] = \"ER_TOO_LONG_FIELD_COMMENT\";\ncodes[1630] = \"ER_FUNC_INEXISTENT_NAME_COLLISION\";\ncodes[1631] = \"ER_DATABASE_NAME\";\ncodes[1632] = \"ER_TABLE_NAME\";\ncodes[1633] = \"ER_PARTITION_NAME\";\ncodes[1634] = \"ER_SUBPARTITION_NAME\";\ncodes[1635] = \"ER_TEMPORARY_NAME\";\ncodes[1636] = \"ER_RENAMED_NAME\";\ncodes[1637] = \"ER_TOO_MANY_CONCURRENT_TRXS\";\ncodes[1638] = \"WARN_NON_ASCII_SEPARATOR_NOT_IMPLEMENTED\";\ncodes[1639] = \"ER_DEBUG_SYNC_TIMEOUT\";\ncodes[1640] = \"ER_DEBUG_SYNC_HIT_LIMIT\";\ncodes[1641] = \"ER_DUP_SIGNAL_SET\";\ncodes[1642] = \"ER_SIGNAL_WARN\";\ncodes[1643] = \"ER_SIGNAL_NOT_FOUND\";\ncodes[1644] = \"ER_SIGNAL_EXCEPTION\";\ncodes[1645] = \"ER_RESIGNAL_WITHOUT_ACTIVE_HANDLER\";\ncodes[1646] = \"ER_SIGNAL_BAD_CONDITION_TYPE\";\ncodes[1647] = \"WARN_COND_ITEM_TRUNCATED\";\ncodes[1648] = \"ER_COND_ITEM_TOO_LONG\";\ncodes[1649] = \"ER_UNKNOWN_LOCALE\";\ncodes[1650] = \"ER_SLAVE_IGNORE_SERVER_IDS\";\ncodes[1651] = \"ER_QUERY_CACHE_DISABLED\";\ncodes[1652] = \"ER_SAME_NAME_PARTITION_FIELD\";\ncodes[1653] = \"ER_PARTITION_COLUMN_LIST_ERROR\";\ncodes[1654] = \"ER_WRONG_TYPE_COLUMN_VALUE_ERROR\";\ncodes[1655] = \"ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR\";\ncodes[1656] = \"ER_MAXVALUE_IN_VALUES_IN\";\ncodes[1657] = \"ER_TOO_MANY_VALUES_ERROR\";\ncodes[1658] = \"ER_ROW_SINGLE_PARTITION_FIELD_ERROR\";\ncodes[1659] = \"ER_FIELD_TYPE_NOT_ALLOWED_AS_PARTITION_FIELD\";\ncodes[1660] = \"ER_PARTITION_FIELDS_TOO_LONG\";\ncodes[1661] = \"ER_BINLOG_ROW_ENGINE_AND_STMT_ENGINE\";\ncodes[1662] = \"ER_BINLOG_ROW_MODE_AND_STMT_ENGINE\";\ncodes[1663] = \"ER_BINLOG_UNSAFE_AND_STMT_ENGINE\";\ncodes[1664] = \"ER_BINLOG_ROW_INJECTION_AND_STMT_ENGINE\";\ncodes[1665] = \"ER_BINLOG_STMT_MODE_AND_ROW_ENGINE\";\ncodes[1666] = \"ER_BINLOG_ROW_INJECTION_AND_STMT_MODE\";\ncodes[1667] = \"ER_BINLOG_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE\";\ncodes[1668] = \"ER_BINLOG_UNSAFE_LIMIT\";\ncodes[1669] = \"ER_BINLOG_UNSAFE_INSERT_DELAYED\";\ncodes[1670] = \"ER_BINLOG_UNSAFE_SYSTEM_TABLE\";\ncodes[1671] = \"ER_BINLOG_UNSAFE_AUTOINC_COLUMNS\";\ncodes[1672] = \"ER_BINLOG_UNSAFE_UDF\";\ncodes[1673] = \"ER_BINLOG_UNSAFE_SYSTEM_VARIABLE\";\ncodes[1674] = \"ER_BINLOG_UNSAFE_SYSTEM_FUNCTION\";\ncodes[1675] = \"ER_BINLOG_UNSAFE_NONTRANS_AFTER_TRANS\";\ncodes[1676] = \"ER_MESSAGE_AND_STATEMENT\";\ncodes[1677] = \"ER_SLAVE_CONVERSION_FAILED\";\ncodes[1678] = \"ER_SLAVE_CANT_CREATE_CONVERSION\";\ncodes[1679] = \"ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_FORMAT\";\ncodes[1680] = \"ER_PATH_LENGTH\";\ncodes[1681] = \"ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT\";\ncodes[1682] = \"ER_WRONG_NATIVE_TABLE_STRUCTURE\";\ncodes[1683] = \"ER_WRONG_PERFSCHEMA_USAGE\";\ncodes[1684] = \"ER_WARN_I_S_SKIPPED_TABLE\";\ncodes[1685] = \"ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_BINLOG_DIRECT\";\ncodes[1686] = \"ER_STORED_FUNCTION_PREVENTS_SWITCH_BINLOG_DIRECT\";\ncodes[1687] = \"ER_SPATIAL_MUST_HAVE_GEOM_COL\";\ncodes[1688] = \"ER_TOO_LONG_INDEX_COMMENT\";\ncodes[1689] = \"ER_LOCK_ABORTED\";\ncodes[1690] = \"ER_DATA_OUT_OF_RANGE\";\ncodes[1691] = \"ER_WRONG_SPVAR_TYPE_IN_LIMIT\";\ncodes[1692] = \"ER_BINLOG_UNSAFE_MULTIPLE_ENGINES_AND_SELF_LOGGING_ENGINE\";\ncodes[1693] = \"ER_BINLOG_UNSAFE_MIXED_STATEMENT\";\ncodes[1694] = \"ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SQL_LOG_BIN\";\ncodes[1695] = \"ER_STORED_FUNCTION_PREVENTS_SWITCH_SQL_LOG_BIN\";\ncodes[1696] = \"ER_FAILED_READ_FROM_PAR_FILE\";\ncodes[1697] = \"ER_VALUES_IS_NOT_INT_TYPE_ERROR\";\ncodes[1698] = \"ER_ACCESS_DENIED_NO_PASSWORD_ERROR\";\ncodes[1699] = \"ER_SET_PASSWORD_AUTH_PLUGIN\";\ncodes[1700] = \"ER_GRANT_PLUGIN_USER_EXISTS\";\ncodes[1701] = \"ER_TRUNCATE_ILLEGAL_FK\";\ncodes[1702] = \"ER_PLUGIN_IS_PERMANENT\";\ncodes[1703] = \"ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN\";\ncodes[1704] = \"ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX\";\ncodes[1705] = \"ER_STMT_CACHE_FULL\";\ncodes[1706] = \"ER_MULTI_UPDATE_KEY_CONFLICT\";\ncodes[1707] = \"ER_TABLE_NEEDS_REBUILD\";\ncodes[1708] = \"WARN_OPTION_BELOW_LIMIT\";\ncodes[1709] = \"ER_INDEX_COLUMN_TOO_LONG\";\ncodes[1710] = \"ER_ERROR_IN_TRIGGER_BODY\";\ncodes[1711] = \"ER_ERROR_IN_UNKNOWN_TRIGGER_BODY\";\ncodes[1712] = \"ER_INDEX_CORRUPT\";\ncodes[1713] = \"ER_UNDO_RECORD_TOO_BIG\";\ncodes[1714] = \"ER_BINLOG_UNSAFE_INSERT_IGNORE_SELECT\";\ncodes[1715] = \"ER_BINLOG_UNSAFE_INSERT_SELECT_UPDATE\";\ncodes[1716] = \"ER_BINLOG_UNSAFE_REPLACE_SELECT\";\ncodes[1717] = \"ER_BINLOG_UNSAFE_CREATE_IGNORE_SELECT\";\ncodes[1718] = \"ER_BINLOG_UNSAFE_CREATE_REPLACE_SELECT\";\ncodes[1719] = \"ER_BINLOG_UNSAFE_UPDATE_IGNORE\";\ncodes[1720] = \"ER_UNUSED_15\";\ncodes[1721] = \"ER_UNUSED_16\";\ncodes[1722] = \"ER_BINLOG_UNSAFE_WRITE_AUTOINC_SELECT\";\ncodes[1723] = \"ER_BINLOG_UNSAFE_CREATE_SELECT_AUTOINC\";\ncodes[1724] = \"ER_BINLOG_UNSAFE_INSERT_TWO_KEYS\";\ncodes[1725] = \"ER_UNUSED_28\";\ncodes[1726] = \"ER_VERS_NOT_ALLOWED\";\ncodes[1727] = \"ER_BINLOG_UNSAFE_AUTOINC_NOT_FIRST\";\ncodes[1728] = \"ER_CANNOT_LOAD_FROM_TABLE_V2\";\ncodes[1729] = \"ER_MASTER_DELAY_VALUE_OUT_OF_RANGE\";\ncodes[1730] = \"ER_ONLY_FD_AND_RBR_EVENTS_ALLOWED_IN_BINLOG_STATEMENT\";\ncodes[1731] = \"ER_PARTITION_EXCHANGE_DIFFERENT_OPTION\";\ncodes[1732] = \"ER_PARTITION_EXCHANGE_PART_TABLE\";\ncodes[1733] = \"ER_PARTITION_EXCHANGE_TEMP_TABLE\";\ncodes[1734] = \"ER_PARTITION_INSTEAD_OF_SUBPARTITION\";\ncodes[1735] = \"ER_UNKNOWN_PARTITION\";\ncodes[1736] = \"ER_TABLES_DIFFERENT_METADATA\";\ncodes[1737] = \"ER_ROW_DOES_NOT_MATCH_PARTITION\";\ncodes[1738] = \"ER_BINLOG_CACHE_SIZE_GREATER_THAN_MAX\";\ncodes[1739] = \"ER_WARN_INDEX_NOT_APPLICABLE\";\ncodes[1740] = \"ER_PARTITION_EXCHANGE_FOREIGN_KEY\";\ncodes[1741] = \"ER_NO_SUCH_KEY_VALUE\";\ncodes[1742] = \"ER_VALUE_TOO_LONG\";\ncodes[1743] = \"ER_NETWORK_READ_EVENT_CHECKSUM_FAILURE\";\ncodes[1744] = \"ER_BINLOG_READ_EVENT_CHECKSUM_FAILURE\";\ncodes[1745] = \"ER_BINLOG_STMT_CACHE_SIZE_GREATER_THAN_MAX\";\ncodes[1746] = \"ER_CANT_UPDATE_TABLE_IN_CREATE_TABLE_SELECT\";\ncodes[1747] = \"ER_PARTITION_CLAUSE_ON_NONPARTITIONED\";\ncodes[1748] = \"ER_ROW_DOES_NOT_MATCH_GIVEN_PARTITION_SET\";\ncodes[1749] = \"ER_UNUSED_5\";\ncodes[1750] = \"ER_CHANGE_RPL_INFO_REPOSITORY_FAILURE\";\ncodes[1751] = \"ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_CREATED_TEMP_TABLE\";\ncodes[1752] = \"ER_WARNING_NOT_COMPLETE_ROLLBACK_WITH_DROPPED_TEMP_TABLE\";\ncodes[1753] = \"ER_MTS_FEATURE_IS_NOT_SUPPORTED\";\ncodes[1754] = \"ER_MTS_UPDATED_DBS_GREATER_MAX\";\ncodes[1755] = \"ER_MTS_CANT_PARALLEL\";\ncodes[1756] = \"ER_MTS_INCONSISTENT_DATA\";\ncodes[1757] = \"ER_FULLTEXT_NOT_SUPPORTED_WITH_PARTITIONING\";\ncodes[1758] = \"ER_DA_INVALID_CONDITION_NUMBER\";\ncodes[1759] = \"ER_INSECURE_PLAIN_TEXT\";\ncodes[1760] = \"ER_INSECURE_CHANGE_MASTER\";\ncodes[1761] = \"ER_FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO\";\ncodes[1762] = \"ER_FOREIGN_DUPLICATE_KEY_WITHOUT_CHILD_INFO\";\ncodes[1763] = \"ER_SQLTHREAD_WITH_SECURE_SLAVE\";\ncodes[1764] = \"ER_TABLE_HAS_NO_FT\";\ncodes[1765] = \"ER_VARIABLE_NOT_SETTABLE_IN_SF_OR_TRIGGER\";\ncodes[1766] = \"ER_VARIABLE_NOT_SETTABLE_IN_TRANSACTION\";\ncodes[1767] = \"ER_GTID_NEXT_IS_NOT_IN_GTID_NEXT_LIST\";\ncodes[1768] = \"ER_CANT_CHANGE_GTID_NEXT_IN_TRANSACTION_WHEN_GTID_NEXT_LIST_IS_NULL\";\ncodes[1769] = \"ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION\";\ncodes[1770] = \"ER_GTID_NEXT_CANT_BE_AUTOMATIC_IF_GTID_NEXT_LIST_IS_NON_NULL\";\ncodes[1771] = \"ER_SKIPPING_LOGGED_TRANSACTION\";\ncodes[1772] = \"ER_MALFORMED_GTID_SET_SPECIFICATION\";\ncodes[1773] = \"ER_MALFORMED_GTID_SET_ENCODING\";\ncodes[1774] = \"ER_MALFORMED_GTID_SPECIFICATION\";\ncodes[1775] = \"ER_GNO_EXHAUSTED\";\ncodes[1776] = \"ER_BAD_SLAVE_AUTO_POSITION\";\ncodes[1777] = \"ER_AUTO_POSITION_REQUIRES_GTID_MODE_ON\";\ncodes[1778] = \"ER_CANT_DO_IMPLICIT_COMMIT_IN_TRX_WHEN_GTID_NEXT_IS_SET\";\ncodes[1779] = \"ER_GTID_MODE_2_OR_3_REQUIRES_ENFORCE_GTID_CONSISTENCY_ON\";\ncodes[1780] = \"ER_GTID_MODE_REQUIRES_BINLOG\";\ncodes[1781] = \"ER_CANT_SET_GTID_NEXT_TO_GTID_WHEN_GTID_MODE_IS_OFF\";\ncodes[1782] = \"ER_CANT_SET_GTID_NEXT_TO_ANONYMOUS_WHEN_GTID_MODE_IS_ON\";\ncodes[1783] = \"ER_CANT_SET_GTID_NEXT_LIST_TO_NON_NULL_WHEN_GTID_MODE_IS_OFF\";\ncodes[1784] = \"ER_FOUND_GTID_EVENT_WHEN_GTID_MODE_IS_OFF\";\ncodes[1785] = \"ER_GTID_UNSAFE_NON_TRANSACTIONAL_TABLE\";\ncodes[1786] = \"ER_GTID_UNSAFE_CREATE_SELECT\";\ncodes[1787] = \"ER_GTID_UNSAFE_CREATE_DROP_TEMPORARY_TABLE_IN_TRANSACTION\";\ncodes[1788] = \"ER_GTID_MODE_CAN_ONLY_CHANGE_ONE_STEP_AT_A_TIME\";\ncodes[1789] = \"ER_MASTER_HAS_PURGED_REQUIRED_GTIDS\";\ncodes[1790] = \"ER_CANT_SET_GTID_NEXT_WHEN_OWNING_GTID\";\ncodes[1791] = \"ER_UNKNOWN_EXPLAIN_FORMAT\";\ncodes[1792] = \"ER_CANT_EXECUTE_IN_READ_ONLY_TRANSACTION\";\ncodes[1793] = \"ER_TOO_LONG_TABLE_PARTITION_COMMENT\";\ncodes[1794] = \"ER_SLAVE_CONFIGURATION\";\ncodes[1795] = \"ER_INNODB_FT_LIMIT\";\ncodes[1796] = \"ER_INNODB_NO_FT_TEMP_TABLE\";\ncodes[1797] = \"ER_INNODB_FT_WRONG_DOCID_COLUMN\";\ncodes[1798] = \"ER_INNODB_FT_WRONG_DOCID_INDEX\";\ncodes[1799] = \"ER_INNODB_ONLINE_LOG_TOO_BIG\";\ncodes[1800] = \"ER_UNKNOWN_ALTER_ALGORITHM\";\ncodes[1801] = \"ER_UNKNOWN_ALTER_LOCK\";\ncodes[1802] = \"ER_MTS_CHANGE_MASTER_CANT_RUN_WITH_GAPS\";\ncodes[1803] = \"ER_MTS_RECOVERY_FAILURE\";\ncodes[1804] = \"ER_MTS_RESET_WORKERS\";\ncodes[1805] = \"ER_COL_COUNT_DOESNT_MATCH_CORRUPTED_V2\";\ncodes[1806] = \"ER_SLAVE_SILENT_RETRY_TRANSACTION\";\ncodes[1807] = \"ER_UNUSED_22\";\ncodes[1808] = \"ER_TABLE_SCHEMA_MISMATCH\";\ncodes[1809] = \"ER_TABLE_IN_SYSTEM_TABLESPACE\";\ncodes[1810] = \"ER_IO_READ_ERROR\";\ncodes[1811] = \"ER_IO_WRITE_ERROR\";\ncodes[1812] = \"ER_TABLESPACE_MISSING\";\ncodes[1813] = \"ER_TABLESPACE_EXISTS\";\ncodes[1814] = \"ER_TABLESPACE_DISCARDED\";\ncodes[1815] = \"ER_INTERNAL_ERROR\";\ncodes[1816] = \"ER_INNODB_IMPORT_ERROR\";\ncodes[1817] = \"ER_INNODB_INDEX_CORRUPT\";\ncodes[1818] = \"ER_INVALID_YEAR_COLUMN_LENGTH\";\ncodes[1819] = \"ER_NOT_VALID_PASSWORD\";\ncodes[1820] = \"ER_MUST_CHANGE_PASSWORD\";\ncodes[1821] = \"ER_FK_NO_INDEX_CHILD\";\ncodes[1822] = \"ER_FK_NO_INDEX_PARENT\";\ncodes[1823] = \"ER_FK_FAIL_ADD_SYSTEM\";\ncodes[1824] = \"ER_FK_CANNOT_OPEN_PARENT\";\ncodes[1825] = \"ER_FK_INCORRECT_OPTION\";\ncodes[1826] = \"ER_DUP_CONSTRAINT_NAME\";\ncodes[1827] = \"ER_PASSWORD_FORMAT\";\ncodes[1828] = \"ER_FK_COLUMN_CANNOT_DROP\";\ncodes[1829] = \"ER_FK_COLUMN_CANNOT_DROP_CHILD\";\ncodes[1830] = \"ER_FK_COLUMN_NOT_NULL\";\ncodes[1831] = \"ER_DUP_INDEX\";\ncodes[1832] = \"ER_FK_COLUMN_CANNOT_CHANGE\";\ncodes[1833] = \"ER_FK_COLUMN_CANNOT_CHANGE_CHILD\";\ncodes[1834] = \"ER_FK_CANNOT_DELETE_PARENT\";\ncodes[1835] = \"ER_MALFORMED_PACKET\";\ncodes[1836] = \"ER_READ_ONLY_MODE\";\ncodes[1837] = \"ER_GTID_NEXT_TYPE_UNDEFINED_GROUP\";\ncodes[1838] = \"ER_VARIABLE_NOT_SETTABLE_IN_SP\";\ncodes[1839] = \"ER_CANT_SET_GTID_PURGED_WHEN_GTID_MODE_IS_OFF\";\ncodes[1840] = \"ER_CANT_SET_GTID_PURGED_WHEN_GTID_EXECUTED_IS_NOT_EMPTY\";\ncodes[1841] = \"ER_CANT_SET_GTID_PURGED_WHEN_OWNED_GTIDS_IS_NOT_EMPTY\";\ncodes[1842] = \"ER_GTID_PURGED_WAS_CHANGED\";\ncodes[1843] = \"ER_GTID_EXECUTED_WAS_CHANGED\";\ncodes[1844] = \"ER_BINLOG_STMT_MODE_AND_NO_REPL_TABLES\";\ncodes[1845] = \"ER_ALTER_OPERATION_NOT_SUPPORTED\";\ncodes[1846] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON\";\ncodes[1847] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COPY\";\ncodes[1848] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_PARTITION\";\ncodes[1849] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_RENAME\";\ncodes[1850] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_COLUMN_TYPE\";\ncodes[1851] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FK_CHECK\";\ncodes[1852] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_IGNORE\";\ncodes[1853] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOPK\";\ncodes[1854] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_AUTOINC\";\ncodes[1855] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_HIDDEN_FTS\";\ncodes[1856] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_CHANGE_FTS\";\ncodes[1857] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_FTS\";\ncodes[1858] = \"ER_SQL_SLAVE_SKIP_COUNTER_NOT_SETTABLE_IN_GTID_MODE\";\ncodes[1859] = \"ER_DUP_UNKNOWN_IN_INDEX\";\ncodes[1860] = \"ER_IDENT_CAUSES_TOO_LONG_PATH\";\ncodes[1861] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_NOT_NULL\";\ncodes[1862] = \"ER_MUST_CHANGE_PASSWORD_LOGIN\";\ncodes[1863] = \"ER_ROW_IN_WRONG_PARTITION\";\ncodes[1864] = \"ER_MTS_EVENT_BIGGER_PENDING_JOBS_SIZE_MAX\";\ncodes[1865] = \"ER_INNODB_NO_FT_USES_PARSER\";\ncodes[1866] = \"ER_BINLOG_LOGICAL_CORRUPTION\";\ncodes[1867] = \"ER_WARN_PURGE_LOG_IN_USE\";\ncodes[1868] = \"ER_WARN_PURGE_LOG_IS_ACTIVE\";\ncodes[1869] = \"ER_AUTO_INCREMENT_CONFLICT\";\ncodes[1870] = \"WARN_ON_BLOCKHOLE_IN_RBR\";\ncodes[1871] = \"ER_SLAVE_MI_INIT_REPOSITORY\";\ncodes[1872] = \"ER_SLAVE_RLI_INIT_REPOSITORY\";\ncodes[1873] = \"ER_ACCESS_DENIED_CHANGE_USER_ERROR\";\ncodes[1874] = \"ER_INNODB_READ_ONLY\";\ncodes[1875] = \"ER_STOP_SLAVE_SQL_THREAD_TIMEOUT\";\ncodes[1876] = \"ER_STOP_SLAVE_IO_THREAD_TIMEOUT\";\ncodes[1877] = \"ER_TABLE_CORRUPT\";\ncodes[1878] = \"ER_TEMP_FILE_WRITE_FAILURE\";\ncodes[1879] = \"ER_INNODB_FT_AUX_NOT_HEX_ID\";\ncodes[1880] = \"ER_LAST_MYSQL_ERROR_MESSAGE\";\ncodes[1900] = \"ER_UNUSED_18\";\ncodes[1901] = \"ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED\";\ncodes[1902] = \"ER_UNUSED_19\";\ncodes[1903] = \"ER_PRIMARY_KEY_BASED_ON_GENERATED_COLUMN\";\ncodes[1904] = \"ER_KEY_BASED_ON_GENERATED_VIRTUAL_COLUMN\";\ncodes[1905] = \"ER_WRONG_FK_OPTION_FOR_GENERATED_COLUMN\";\ncodes[1906] = \"ER_WARNING_NON_DEFAULT_VALUE_FOR_GENERATED_COLUMN\";\ncodes[1907] = \"ER_UNSUPPORTED_ACTION_ON_GENERATED_COLUMN\";\ncodes[1908] = \"ER_UNUSED_20\";\ncodes[1909] = \"ER_UNUSED_21\";\ncodes[1910] = \"ER_UNSUPPORTED_ENGINE_FOR_GENERATED_COLUMNS\";\ncodes[1911] = \"ER_UNKNOWN_OPTION\";\ncodes[1912] = \"ER_BAD_OPTION_VALUE\";\ncodes[1913] = \"ER_UNUSED_6\";\ncodes[1914] = \"ER_UNUSED_7\";\ncodes[1915] = \"ER_UNUSED_8\";\ncodes[1916] = \"ER_DATA_OVERFLOW\";\ncodes[1917] = \"ER_DATA_TRUNCATED\";\ncodes[1918] = \"ER_BAD_DATA\";\ncodes[1919] = \"ER_DYN_COL_WRONG_FORMAT\";\ncodes[1920] = \"ER_DYN_COL_IMPLEMENTATION_LIMIT\";\ncodes[1921] = \"ER_DYN_COL_DATA\";\ncodes[1922] = \"ER_DYN_COL_WRONG_CHARSET\";\ncodes[1923] = \"ER_ILLEGAL_SUBQUERY_OPTIMIZER_SWITCHES\";\ncodes[1924] = \"ER_QUERY_CACHE_IS_DISABLED\";\ncodes[1925] = \"ER_QUERY_CACHE_IS_GLOBALY_DISABLED\";\ncodes[1926] = \"ER_VIEW_ORDERBY_IGNORED\";\ncodes[1927] = \"ER_CONNECTION_KILLED\";\ncodes[1928] = \"ER_UNUSED_12\";\ncodes[1929] = \"ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_SKIP_REPLICATION\";\ncodes[1930] = \"ER_STORED_FUNCTION_PREVENTS_SWITCH_SKIP_REPLICATION\";\ncodes[1931] = \"ER_QUERY_EXCEEDED_ROWS_EXAMINED_LIMIT\";\ncodes[1932] = \"ER_NO_SUCH_TABLE_IN_ENGINE\";\ncodes[1933] = \"ER_TARGET_NOT_EXPLAINABLE\";\ncodes[1934] = \"ER_CONNECTION_ALREADY_EXISTS\";\ncodes[1935] = \"ER_MASTER_LOG_PREFIX\";\ncodes[1936] = \"ER_CANT_START_STOP_SLAVE\";\ncodes[1937] = \"ER_SLAVE_STARTED\";\ncodes[1938] = \"ER_SLAVE_STOPPED\";\ncodes[1939] = \"ER_SQL_DISCOVER_ERROR\";\ncodes[1940] = \"ER_FAILED_GTID_STATE_INIT\";\ncodes[1941] = \"ER_INCORRECT_GTID_STATE\";\ncodes[1942] = \"ER_CANNOT_UPDATE_GTID_STATE\";\ncodes[1943] = \"ER_DUPLICATE_GTID_DOMAIN\";\ncodes[1944] = \"ER_GTID_OPEN_TABLE_FAILED\";\ncodes[1945] = \"ER_GTID_POSITION_NOT_FOUND_IN_BINLOG\";\ncodes[1946] = \"ER_CANNOT_LOAD_SLAVE_GTID_STATE\";\ncodes[1947] = \"ER_MASTER_GTID_POS_CONFLICTS_WITH_BINLOG\";\ncodes[1948] = \"ER_MASTER_GTID_POS_MISSING_DOMAIN\";\ncodes[1949] = \"ER_UNTIL_REQUIRES_USING_GTID\";\ncodes[1950] = \"ER_GTID_STRICT_OUT_OF_ORDER\";\ncodes[1951] = \"ER_GTID_START_FROM_BINLOG_HOLE\";\ncodes[1952] = \"ER_SLAVE_UNEXPECTED_MASTER_SWITCH\";\ncodes[1953] = \"ER_INSIDE_TRANSACTION_PREVENTS_SWITCH_GTID_DOMAIN_ID_SEQ_NO\";\ncodes[1954] = \"ER_STORED_FUNCTION_PREVENTS_SWITCH_GTID_DOMAIN_ID_SEQ_NO\";\ncodes[1955] = \"ER_GTID_POSITION_NOT_FOUND_IN_BINLOG2\";\ncodes[1956] = \"ER_BINLOG_MUST_BE_EMPTY\";\ncodes[1957] = \"ER_NO_SUCH_QUERY\";\ncodes[1958] = \"ER_BAD_BASE64_DATA\";\ncodes[1959] = \"ER_INVALID_ROLE\";\ncodes[1960] = \"ER_INVALID_CURRENT_USER\";\ncodes[1961] = \"ER_CANNOT_GRANT_ROLE\";\ncodes[1962] = \"ER_CANNOT_REVOKE_ROLE\";\ncodes[1963] = \"ER_CHANGE_SLAVE_PARALLEL_THREADS_ACTIVE\";\ncodes[1964] = \"ER_PRIOR_COMMIT_FAILED\";\ncodes[1965] = \"ER_IT_IS_A_VIEW\";\ncodes[1966] = \"ER_SLAVE_SKIP_NOT_IN_GTID\";\ncodes[1967] = \"ER_TABLE_DEFINITION_TOO_BIG\";\ncodes[1968] = \"ER_PLUGIN_INSTALLED\";\ncodes[1969] = \"ER_STATEMENT_TIMEOUT\";\ncodes[1970] = \"ER_SUBQUERIES_NOT_SUPPORTED\";\ncodes[1971] = \"ER_SET_STATEMENT_NOT_SUPPORTED\";\ncodes[1972] = \"ER_UNUSED_9\";\ncodes[1973] = \"ER_USER_CREATE_EXISTS\";\ncodes[1974] = \"ER_USER_DROP_EXISTS\";\ncodes[1975] = \"ER_ROLE_CREATE_EXISTS\";\ncodes[1976] = \"ER_ROLE_DROP_EXISTS\";\ncodes[1977] = \"ER_CANNOT_CONVERT_CHARACTER\";\ncodes[1978] = \"ER_INVALID_DEFAULT_VALUE_FOR_FIELD\";\ncodes[1979] = \"ER_KILL_QUERY_DENIED_ERROR\";\ncodes[1980] = \"ER_NO_EIS_FOR_FIELD\";\ncodes[1981] = \"ER_WARN_AGGFUNC_DEPENDENCE\";\ncodes[1982] = \"WARN_INNODB_PARTITION_OPTION_IGNORED\";\ncodes[3000] = \"ER_FILE_CORRUPT\";\ncodes[3001] = \"ER_ERROR_ON_MASTER\";\ncodes[3002] = \"ER_INCONSISTENT_ERROR\";\ncodes[3003] = \"ER_STORAGE_ENGINE_NOT_LOADED\";\ncodes[3004] = \"ER_GET_STACKED_DA_WITHOUT_ACTIVE_HANDLER\";\ncodes[3005] = \"ER_WARN_LEGACY_SYNTAX_CONVERTED\";\ncodes[3006] = \"ER_BINLOG_UNSAFE_FULLTEXT_PLUGIN\";\ncodes[3007] = \"ER_CANNOT_DISCARD_TEMPORARY_TABLE\";\ncodes[3008] = \"ER_FK_DEPTH_EXCEEDED\";\ncodes[3009] = \"ER_COL_COUNT_DOESNT_MATCH_PLEASE_UPDATE_V2\";\ncodes[3010] = \"ER_WARN_TRIGGER_DOESNT_HAVE_CREATED\";\ncodes[3011] = \"ER_REFERENCED_TRG_DOES_NOT_EXIST_MYSQL\";\ncodes[3012] = \"ER_EXPLAIN_NOT_SUPPORTED\";\ncodes[3013] = \"ER_INVALID_FIELD_SIZE\";\ncodes[3014] = \"ER_MISSING_HA_CREATE_OPTION\";\ncodes[3015] = \"ER_ENGINE_OUT_OF_MEMORY\";\ncodes[3016] = \"ER_PASSWORD_EXPIRE_ANONYMOUS_USER\";\ncodes[3017] = \"ER_SLAVE_SQL_THREAD_MUST_STOP\";\ncodes[3018] = \"ER_NO_FT_MATERIALIZED_SUBQUERY\";\ncodes[3019] = \"ER_INNODB_UNDO_LOG_FULL\";\ncodes[3020] = \"ER_INVALID_ARGUMENT_FOR_LOGARITHM\";\ncodes[3021] = \"ER_SLAVE_CHANNEL_IO_THREAD_MUST_STOP\";\ncodes[3022] = \"ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO\";\ncodes[3023] = \"ER_WARN_ONLY_MASTER_LOG_FILE_NO_POS\";\ncodes[3024] = \"ER_QUERY_TIMEOUT\";\ncodes[3025] = \"ER_NON_RO_SELECT_DISABLE_TIMER\";\ncodes[3026] = \"ER_DUP_LIST_ENTRY\";\ncodes[3027] = \"ER_SQL_MODE_NO_EFFECT\";\ncodes[3028] = \"ER_AGGREGATE_ORDER_FOR_UNION\";\ncodes[3029] = \"ER_AGGREGATE_ORDER_NON_AGG_QUERY\";\ncodes[3030] = \"ER_SLAVE_WORKER_STOPPED_PREVIOUS_THD_ERROR\";\ncodes[3031] = \"ER_DONT_SUPPORT_SLAVE_PRESERVE_COMMIT_ORDER\";\ncodes[3032] = \"ER_SERVER_OFFLINE_MODE\";\ncodes[3033] = \"ER_GIS_DIFFERENT_SRIDS\";\ncodes[3034] = \"ER_GIS_UNSUPPORTED_ARGUMENT\";\ncodes[3035] = \"ER_GIS_UNKNOWN_ERROR\";\ncodes[3036] = \"ER_GIS_UNKNOWN_EXCEPTION\";\ncodes[3037] = \"ER_GIS_INVALID_DATA\";\ncodes[3038] = \"ER_BOOST_GEOMETRY_EMPTY_INPUT_EXCEPTION\";\ncodes[3039] = \"ER_BOOST_GEOMETRY_CENTROID_EXCEPTION\";\ncodes[3040] = \"ER_BOOST_GEOMETRY_OVERLAY_INVALID_INPUT_EXCEPTION\";\ncodes[3041] = \"ER_BOOST_GEOMETRY_TURN_INFO_EXCEPTION\";\ncodes[3042] = \"ER_BOOST_GEOMETRY_SELF_INTERSECTION_POINT_EXCEPTION\";\ncodes[3043] = \"ER_BOOST_GEOMETRY_UNKNOWN_EXCEPTION\";\ncodes[3044] = \"ER_STD_BAD_ALLOC_ERROR\";\ncodes[3045] = \"ER_STD_DOMAIN_ERROR\";\ncodes[3046] = \"ER_STD_LENGTH_ERROR\";\ncodes[3047] = \"ER_STD_INVALID_ARGUMENT\";\ncodes[3048] = \"ER_STD_OUT_OF_RANGE_ERROR\";\ncodes[3049] = \"ER_STD_OVERFLOW_ERROR\";\ncodes[3050] = \"ER_STD_RANGE_ERROR\";\ncodes[3051] = \"ER_STD_UNDERFLOW_ERROR\";\ncodes[3052] = \"ER_STD_LOGIC_ERROR\";\ncodes[3053] = \"ER_STD_RUNTIME_ERROR\";\ncodes[3054] = \"ER_STD_UNKNOWN_EXCEPTION\";\ncodes[3055] = \"ER_GIS_DATA_WRONG_ENDIANESS\";\ncodes[3056] = \"ER_CHANGE_MASTER_PASSWORD_LENGTH\";\ncodes[3057] = \"ER_USER_LOCK_WRONG_NAME\";\ncodes[3058] = \"ER_USER_LOCK_DEADLOCK\";\ncodes[3059] = \"ER_REPLACE_INACCESSIBLE_ROWS\";\ncodes[3060] = \"ER_ALTER_OPERATION_NOT_SUPPORTED_REASON_GIS\";\ncodes[4000] = \"ER_UNUSED_26\";\ncodes[4001] = \"ER_UNUSED_27\";\ncodes[4002] = \"ER_WITH_COL_WRONG_LIST\";\ncodes[4003] = \"ER_TOO_MANY_DEFINITIONS_IN_WITH_CLAUSE\";\ncodes[4004] = \"ER_DUP_QUERY_NAME\";\ncodes[4005] = \"ER_RECURSIVE_WITHOUT_ANCHORS\";\ncodes[4006] = \"ER_UNACCEPTABLE_MUTUAL_RECURSION\";\ncodes[4007] = \"ER_REF_TO_RECURSIVE_WITH_TABLE_IN_DERIVED\";\ncodes[4008] = \"ER_NOT_STANDARD_COMPLIANT_RECURSIVE\";\ncodes[4009] = \"ER_WRONG_WINDOW_SPEC_NAME\";\ncodes[4010] = \"ER_DUP_WINDOW_NAME\";\ncodes[4011] = \"ER_PARTITION_LIST_IN_REFERENCING_WINDOW_SPEC\";\ncodes[4012] = \"ER_ORDER_LIST_IN_REFERENCING_WINDOW_SPEC\";\ncodes[4013] = \"ER_WINDOW_FRAME_IN_REFERENCED_WINDOW_SPEC\";\ncodes[4014] = \"ER_BAD_COMBINATION_OF_WINDOW_FRAME_BOUND_SPECS\";\ncodes[4015] = \"ER_WRONG_PLACEMENT_OF_WINDOW_FUNCTION\";\ncodes[4016] = \"ER_WINDOW_FUNCTION_IN_WINDOW_SPEC\";\ncodes[4017] = \"ER_NOT_ALLOWED_WINDOW_FRAME\";\ncodes[4018] = \"ER_NO_ORDER_LIST_IN_WINDOW_SPEC\";\ncodes[4019] = \"ER_RANGE_FRAME_NEEDS_SIMPLE_ORDERBY\";\ncodes[4020] = \"ER_WRONG_TYPE_FOR_ROWS_FRAME\";\ncodes[4021] = \"ER_WRONG_TYPE_FOR_RANGE_FRAME\";\ncodes[4022] = \"ER_FRAME_EXCLUSION_NOT_SUPPORTED\";\ncodes[4023] = \"ER_WINDOW_FUNCTION_DONT_HAVE_FRAME\";\ncodes[4024] = \"ER_INVALID_NTILE_ARGUMENT\";\ncodes[4025] = \"ER_CONSTRAINT_FAILED\";\ncodes[4026] = \"ER_EXPRESSION_IS_TOO_BIG\";\ncodes[4027] = \"ER_ERROR_EVALUATING_EXPRESSION\";\ncodes[4028] = \"ER_CALCULATING_DEFAULT_VALUE\";\ncodes[4029] = \"ER_EXPRESSION_REFERS_TO_UNINIT_FIELD\";\ncodes[4030] = \"ER_PARTITION_DEFAULT_ERROR\";\ncodes[4031] = \"ER_REFERENCED_TRG_DOES_NOT_EXIST\";\ncodes[4032] = \"ER_INVALID_DEFAULT_PARAM\";\ncodes[4033] = \"ER_BINLOG_NON_SUPPORTED_BULK\";\ncodes[4034] = \"ER_BINLOG_UNCOMPRESS_ERROR\";\ncodes[4035] = \"ER_JSON_BAD_CHR\";\ncodes[4036] = \"ER_JSON_NOT_JSON_CHR\";\ncodes[4037] = \"ER_JSON_EOS\";\ncodes[4038] = \"ER_JSON_SYNTAX\";\ncodes[4039] = \"ER_JSON_ESCAPING\";\ncodes[4040] = \"ER_JSON_DEPTH\";\ncodes[4041] = \"ER_JSON_PATH_EOS\";\ncodes[4042] = \"ER_JSON_PATH_SYNTAX\";\ncodes[4043] = \"ER_JSON_PATH_DEPTH\";\ncodes[4044] = \"ER_JSON_PATH_NO_WILDCARD\";\ncodes[4045] = \"ER_JSON_PATH_ARRAY\";\ncodes[4046] = \"ER_JSON_ONE_OR_ALL\";\ncodes[4047] = \"ER_UNSUPPORTED_COMPRESSED_TABLE\";\ncodes[4048] = \"ER_GEOJSON_INCORRECT\";\ncodes[4049] = \"ER_GEOJSON_TOO_FEW_POINTS\";\ncodes[4050] = \"ER_GEOJSON_NOT_CLOSED\";\ncodes[4051] = \"ER_JSON_PATH_EMPTY\";\ncodes[4052] = \"ER_SLAVE_SAME_ID\";\ncodes[4053] = \"ER_FLASHBACK_NOT_SUPPORTED\";\ncodes[4054] = \"ER_KEYS_OUT_OF_ORDER\";\ncodes[4055] = \"ER_OVERLAPPING_KEYS\";\ncodes[4056] = \"ER_REQUIRE_ROW_BINLOG_FORMAT\";\ncodes[4057] = \"ER_ISOLATION_MODE_NOT_SUPPORTED\";\ncodes[4058] = \"ER_ON_DUPLICATE_DISABLED\";\ncodes[4059] = \"ER_UPDATES_WITH_CONSISTENT_SNAPSHOT\";\ncodes[4060] = \"ER_ROLLBACK_ONLY\";\ncodes[4061] = \"ER_ROLLBACK_TO_SAVEPOINT\";\ncodes[4062] = \"ER_ISOLATION_LEVEL_WITH_CONSISTENT_SNAPSHOT\";\ncodes[4063] = \"ER_UNSUPPORTED_COLLATION\";\ncodes[4064] = \"ER_METADATA_INCONSISTENCY\";\ncodes[4065] = \"ER_CF_DIFFERENT\";\ncodes[4066] = \"ER_RDB_TTL_DURATION_FORMAT\";\ncodes[4067] = \"ER_RDB_STATUS_GENERAL\";\ncodes[4068] = \"ER_RDB_STATUS_MSG\";\ncodes[4069] = \"ER_RDB_TTL_UNSUPPORTED\";\ncodes[4070] = \"ER_RDB_TTL_COL_FORMAT\";\ncodes[4071] = \"ER_PER_INDEX_CF_DEPRECATED\";\ncodes[4072] = \"ER_KEY_CREATE_DURING_ALTER\";\ncodes[4073] = \"ER_SK_POPULATE_DURING_ALTER\";\ncodes[4074] = \"ER_SUM_FUNC_WITH_WINDOW_FUNC_AS_ARG\";\ncodes[4075] = \"ER_NET_OK_PACKET_TOO_LARGE\";\ncodes[4076] = \"ER_GEOJSON_EMPTY_COORDINATES\";\ncodes[4077] = \"ER_MYROCKS_CANT_NOPAD_COLLATION\";\ncodes[4078] = \"ER_ILLEGAL_PARAMETER_DATA_TYPES2_FOR_OPERATION\";\ncodes[4079] = \"ER_ILLEGAL_PARAMETER_DATA_TYPE_FOR_OPERATION\";\ncodes[4080] = \"ER_WRONG_PARAMCOUNT_TO_CURSOR\";\ncodes[4081] = \"ER_UNKNOWN_STRUCTURED_VARIABLE\";\ncodes[4082] = \"ER_ROW_VARIABLE_DOES_NOT_HAVE_FIELD\";\ncodes[4083] = \"ER_END_IDENTIFIER_DOES_NOT_MATCH\";\ncodes[4084] = \"ER_SEQUENCE_RUN_OUT\";\ncodes[4085] = \"ER_SEQUENCE_INVALID_DATA\";\ncodes[4086] = \"ER_SEQUENCE_INVALID_TABLE_STRUCTURE\";\ncodes[4087] = \"ER_SEQUENCE_ACCESS_ERROR\";\ncodes[4088] = \"ER_SEQUENCE_BINLOG_FORMAT\";\ncodes[4089] = \"ER_NOT_SEQUENCE\";\ncodes[4090] = \"ER_NOT_SEQUENCE2\";\ncodes[4091] = \"ER_UNKNOWN_SEQUENCES\";\ncodes[4092] = \"ER_UNKNOWN_VIEW\";\ncodes[4093] = \"ER_WRONG_INSERT_INTO_SEQUENCE\";\ncodes[4094] = \"ER_SP_STACK_TRACE\";\ncodes[4095] = \"ER_PACKAGE_ROUTINE_IN_SPEC_NOT_DEFINED_IN_BODY\";\ncodes[4096] = \"ER_PACKAGE_ROUTINE_FORWARD_DECLARATION_NOT_DEFINED\";\ncodes[4097] = \"ER_COMPRESSED_COLUMN_USED_AS_KEY\";\ncodes[4098] = \"ER_UNKNOWN_COMPRESSION_METHOD\";\ncodes[4099] = \"ER_WRONG_NUMBER_OF_VALUES_IN_TVC\";\ncodes[4100] = \"ER_FIELD_REFERENCE_IN_TVC\";\ncodes[4101] = \"ER_WRONG_TYPE_FOR_PERCENTILE_FUNC\";\ncodes[4102] = \"ER_ARGUMENT_NOT_CONSTANT\";\ncodes[4103] = \"ER_ARGUMENT_OUT_OF_RANGE\";\ncodes[4104] = \"ER_WRONG_TYPE_OF_ARGUMENT\";\ncodes[4105] = \"ER_NOT_AGGREGATE_FUNCTION\";\ncodes[4106] = \"ER_INVALID_AGGREGATE_FUNCTION\";\ncodes[4107] = \"ER_INVALID_VALUE_TO_LIMIT\";\ncodes[4108] = \"ER_INVISIBLE_NOT_NULL_WITHOUT_DEFAULT\";\ncodes[4109] = \"ER_UPDATE_INFO_WITH_SYSTEM_VERSIONING\";\ncodes[4110] = \"ER_VERS_FIELD_WRONG_TYPE\";\ncodes[4111] = \"ER_VERS_ENGINE_UNSUPPORTED\";\ncodes[4112] = \"ER_UNUSED_23\";\ncodes[4113] = \"ER_PARTITION_WRONG_TYPE\";\ncodes[4114] = \"WARN_VERS_PART_FULL\";\ncodes[4115] = \"WARN_VERS_PARAMETERS\";\ncodes[4116] = \"ER_VERS_DROP_PARTITION_INTERVAL\";\ncodes[4117] = \"ER_UNUSED_25\";\ncodes[4118] = \"WARN_VERS_PART_NON_HISTORICAL\";\ncodes[4119] = \"ER_VERS_ALTER_NOT_ALLOWED\";\ncodes[4120] = \"ER_VERS_ALTER_ENGINE_PROHIBITED\";\ncodes[4121] = \"ER_VERS_RANGE_PROHIBITED\";\ncodes[4122] = \"ER_CONFLICTING_FOR_SYSTEM_TIME\";\ncodes[4123] = \"ER_VERS_TABLE_MUST_HAVE_COLUMNS\";\ncodes[4124] = \"ER_VERS_NOT_VERSIONED\";\ncodes[4125] = \"ER_MISSING\";\ncodes[4126] = \"ER_VERS_PERIOD_COLUMNS\";\ncodes[4127] = \"ER_PART_WRONG_VALUE\";\ncodes[4128] = \"ER_VERS_WRONG_PARTS\";\ncodes[4129] = \"ER_VERS_NO_TRX_ID\";\ncodes[4130] = \"ER_VERS_ALTER_SYSTEM_FIELD\";\ncodes[4131] = \"ER_DROP_VERSIONING_SYSTEM_TIME_PARTITION\";\ncodes[4132] = \"ER_VERS_DB_NOT_SUPPORTED\";\ncodes[4133] = \"ER_VERS_TRT_IS_DISABLED\";\ncodes[4134] = \"ER_VERS_DUPLICATE_ROW_START_END\";\ncodes[4135] = \"ER_VERS_ALREADY_VERSIONED\";\ncodes[4136] = \"ER_UNUSED_24\";\ncodes[4137] = \"ER_VERS_NOT_SUPPORTED\";\ncodes[4138] = \"ER_VERS_TRX_PART_HISTORIC_ROW_NOT_SUPPORTED\";\ncodes[4139] = \"ER_INDEX_FILE_FULL\";\ncodes[4140] = \"ER_UPDATED_COLUMN_ONLY_ONCE\";\ncodes[4141] = \"ER_EMPTY_ROW_IN_TVC\";\ncodes[4142] = \"ER_VERS_QUERY_IN_PARTITION\";\ncodes[4143] = \"ER_KEY_DOESNT_SUPPORT\";\ncodes[4144] = \"ER_ALTER_OPERATION_TABLE_OPTIONS_NEED_REBUILD\";\ncodes[4145] = \"ER_BACKUP_LOCK_IS_ACTIVE\";\ncodes[4146] = \"ER_BACKUP_NOT_RUNNING\";\ncodes[4147] = \"ER_BACKUP_WRONG_STAGE\";\ncodes[4148] = \"ER_BACKUP_STAGE_FAILED\";\ncodes[4149] = \"ER_BACKUP_UNKNOWN_STAGE\";\ncodes[4150] = \"ER_USER_IS_BLOCKED\";\ncodes[4151] = \"ER_ACCOUNT_HAS_BEEN_LOCKED\";\ncodes[4152] = \"ER_PERIOD_TEMPORARY_NOT_ALLOWED\";\ncodes[4153] = \"ER_PERIOD_TYPES_MISMATCH\";\ncodes[4154] = \"ER_MORE_THAN_ONE_PERIOD\";\ncodes[4155] = \"ER_PERIOD_FIELD_WRONG_ATTRIBUTES\";\ncodes[4156] = \"ER_PERIOD_NOT_FOUND\";\ncodes[4157] = \"ER_PERIOD_COLUMNS_UPDATED\";\ncodes[4158] = \"ER_PERIOD_CONSTRAINT_DROP\";\ncodes[4159] = \"ER_TOO_LONG_KEYPART\";\ncodes[4160] = \"ER_TOO_LONG_DATABASE_COMMENT\";\ncodes[4161] = \"ER_UNKNOWN_DATA_TYPE\";\ncodes[4162] = \"ER_UNKNOWN_OPERATOR\";\ncodes[4163] = \"ER_WARN_HISTORY_ROW_START_TIME\";\ncodes[4164] = \"ER_PART_STARTS_BEYOND_INTERVAL\";\ncodes[4165] = \"ER_GALERA_REPLICATION_NOT_SUPPORTED\";\ncodes[4166] = \"ER_LOAD_INFILE_CAPABILITY_DISABLED\";\ncodes[4167] = \"ER_NO_SECURE_TRANSPORTS_CONFIGURED\";\ncodes[4168] = \"ER_SLAVE_IGNORED_SHARED_TABLE\";\ncodes[4169] = \"ER_NO_AUTOINCREMENT_WITH_UNIQUE\";\ncodes[4170] = \"ER_KEY_CONTAINS_PERIOD_FIELDS\";\ncodes[4171] = \"ER_KEY_CANT_HAVE_WITHOUT_OVERLAPS\";\ncodes[4172] = \"ER_NOT_ALLOWED_IN_THIS_CONTEXT\";\ncodes[4173] = \"ER_DATA_WAS_COMMITED_UNDER_ROLLBACK\";\ncodes[4174] = \"ER_PK_INDEX_CANT_BE_IGNORED\";\ncodes[4175] = \"ER_BINLOG_UNSAFE_SKIP_LOCKED\";\ncodes[4176] = \"ER_JSON_TABLE_ERROR_ON_FIELD\";\ncodes[4177] = \"ER_JSON_TABLE_ALIAS_REQUIRED\";\ncodes[4178] = \"ER_JSON_TABLE_SCALAR_EXPECTED\";\ncodes[4179] = \"ER_JSON_TABLE_MULTIPLE_MATCHES\";\ncodes[4180] = \"ER_WITH_TIES_NEEDS_ORDER\";\ncodes[4181] = \"ER_REMOVED_ORPHAN_TRIGGER\";\ncodes[4182] = \"ER_STORAGE_ENGINE_DISABLED\";\ncodes[4183] = \"WARN_SFORMAT_ERROR\";\ncodes[4184] = \"ER_PARTITION_CONVERT_SUBPARTITIONED\";\ncodes[4185] = \"ER_PROVIDER_NOT_LOADED\";\ncodes[4186] = \"ER_JSON_HISTOGRAM_PARSE_FAILED\";\ncodes[4187] = \"ER_SF_OUT_INOUT_ARG_NOT_ALLOWED\";\ncodes[4188] = \"ER_INCONSISTENT_SLAVE_TEMP_TABLE\";\ncodes[4189] = \"ER_VERS_HIST_PART_FAILED\";\nmodule.exports.codes = codes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/const/error-code.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/const/field-detail.js":
/*!********************************************************!*\
  !*** ./node_modules/mariadb/lib/const/field-detail.js ***!
  \********************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n/**\n * Column definition packet \"Field detail\" flag value\n * see : https://mariadb.com/kb/en/library/resultset/#field-detail-flag\n */ //\tfield cannot be null\n\nmodule.exports.NOT_NULL = 1;\n//\tfield is a primary key\nmodule.exports.PRIMARY_KEY = 2;\n//field is unique\nmodule.exports.UNIQUE_KEY = 4;\n//field is in a multiple key\nmodule.exports.MULTIPLE_KEY = 8;\n//is this field a Blob\nmodule.exports.BLOB = 1 << 4;\n//\tis this field unsigned\nmodule.exports.UNSIGNED = 1 << 5;\n//is this field a zerofill\nmodule.exports.ZEROFILL_FLAG = 1 << 6;\n//whether this field has a binary collation\nmodule.exports.BINARY_COLLATION = 1 << 7;\n//Field is an enumeration\nmodule.exports.ENUM = 1 << 8;\n//field auto-increment\nmodule.exports.AUTO_INCREMENT = 1 << 9;\n//field is a timestamp value\nmodule.exports.TIMESTAMP = 1 << 10;\n//field is a SET\nmodule.exports.SET = 1 << 11;\n//field doesn't have default value\nmodule.exports.NO_DEFAULT_VALUE_FLAG = 1 << 12;\n//field is set to NOW on UPDATE\nmodule.exports.ON_UPDATE_NOW_FLAG = 1 << 13;\n//field is num\nmodule.exports.NUM_FLAG = 1 << 14;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29uc3QvZmllbGQtZGV0YWlsLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxrREFBa0Q7QUFFbEQ7OztDQUdDLEdBRUQsdUJBQXVCOztBQUN2QkEsdUJBQXVCLEdBQUc7QUFDMUIseUJBQXlCO0FBQ3pCQSwwQkFBMEIsR0FBRztBQUM3QixpQkFBaUI7QUFDakJBLHlCQUF5QixHQUFHO0FBQzVCLDRCQUE0QjtBQUM1QkEsMkJBQTJCLEdBQUc7QUFDOUIsc0JBQXNCO0FBQ3RCQSxtQkFBbUIsR0FBRyxLQUFLO0FBQzNCLHlCQUF5QjtBQUN6QkEsdUJBQXVCLEdBQUcsS0FBSztBQUMvQiwwQkFBMEI7QUFDMUJBLDRCQUE0QixHQUFHLEtBQUs7QUFDcEMsMkNBQTJDO0FBQzNDQSwrQkFBK0IsR0FBRyxLQUFLO0FBQ3ZDLHlCQUF5QjtBQUN6QkEsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixzQkFBc0I7QUFDdEJBLDZCQUE2QixHQUFHLEtBQUs7QUFDckMsNEJBQTRCO0FBQzVCQSx3QkFBd0IsR0FBRyxLQUFLO0FBQ2hDLGdCQUFnQjtBQUNoQkEsa0JBQWtCLEdBQUcsS0FBSztBQUMxQixrQ0FBa0M7QUFDbENBLG9DQUFvQyxHQUFHLEtBQUs7QUFDNUMsK0JBQStCO0FBQy9CQSxpQ0FBaUMsR0FBRyxLQUFLO0FBQ3pDLGNBQWM7QUFDZEEsdUJBQXVCLEdBQUcsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvbGliL2NvbnN0L2ZpZWxkLWRldGFpbC5qcz9lM2U4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbi8qKlxuICogQ29sdW1uIGRlZmluaXRpb24gcGFja2V0IFwiRmllbGQgZGV0YWlsXCIgZmxhZyB2YWx1ZVxuICogc2VlIDogaHR0cHM6Ly9tYXJpYWRiLmNvbS9rYi9lbi9saWJyYXJ5L3Jlc3VsdHNldC8jZmllbGQtZGV0YWlsLWZsYWdcbiAqL1xuXG4vL1x0ZmllbGQgY2Fubm90IGJlIG51bGxcbm1vZHVsZS5leHBvcnRzLk5PVF9OVUxMID0gMTtcbi8vXHRmaWVsZCBpcyBhIHByaW1hcnkga2V5XG5tb2R1bGUuZXhwb3J0cy5QUklNQVJZX0tFWSA9IDI7XG4vL2ZpZWxkIGlzIHVuaXF1ZVxubW9kdWxlLmV4cG9ydHMuVU5JUVVFX0tFWSA9IDQ7XG4vL2ZpZWxkIGlzIGluIGEgbXVsdGlwbGUga2V5XG5tb2R1bGUuZXhwb3J0cy5NVUxUSVBMRV9LRVkgPSA4O1xuLy9pcyB0aGlzIGZpZWxkIGEgQmxvYlxubW9kdWxlLmV4cG9ydHMuQkxPQiA9IDEgPDwgNDtcbi8vXHRpcyB0aGlzIGZpZWxkIHVuc2lnbmVkXG5tb2R1bGUuZXhwb3J0cy5VTlNJR05FRCA9IDEgPDwgNTtcbi8vaXMgdGhpcyBmaWVsZCBhIHplcm9maWxsXG5tb2R1bGUuZXhwb3J0cy5aRVJPRklMTF9GTEFHID0gMSA8PCA2O1xuLy93aGV0aGVyIHRoaXMgZmllbGQgaGFzIGEgYmluYXJ5IGNvbGxhdGlvblxubW9kdWxlLmV4cG9ydHMuQklOQVJZX0NPTExBVElPTiA9IDEgPDwgNztcbi8vRmllbGQgaXMgYW4gZW51bWVyYXRpb25cbm1vZHVsZS5leHBvcnRzLkVOVU0gPSAxIDw8IDg7XG4vL2ZpZWxkIGF1dG8taW5jcmVtZW50XG5tb2R1bGUuZXhwb3J0cy5BVVRPX0lOQ1JFTUVOVCA9IDEgPDwgOTtcbi8vZmllbGQgaXMgYSB0aW1lc3RhbXAgdmFsdWVcbm1vZHVsZS5leHBvcnRzLlRJTUVTVEFNUCA9IDEgPDwgMTA7XG4vL2ZpZWxkIGlzIGEgU0VUXG5tb2R1bGUuZXhwb3J0cy5TRVQgPSAxIDw8IDExO1xuLy9maWVsZCBkb2Vzbid0IGhhdmUgZGVmYXVsdCB2YWx1ZVxubW9kdWxlLmV4cG9ydHMuTk9fREVGQVVMVF9WQUxVRV9GTEFHID0gMSA8PCAxMjtcbi8vZmllbGQgaXMgc2V0IHRvIE5PVyBvbiBVUERBVEVcbm1vZHVsZS5leHBvcnRzLk9OX1VQREFURV9OT1dfRkxBRyA9IDEgPDwgMTM7XG4vL2ZpZWxkIGlzIG51bVxubW9kdWxlLmV4cG9ydHMuTlVNX0ZMQUcgPSAxIDw8IDE0O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJOT1RfTlVMTCIsIlBSSU1BUllfS0VZIiwiVU5JUVVFX0tFWSIsIk1VTFRJUExFX0tFWSIsIkJMT0IiLCJVTlNJR05FRCIsIlpFUk9GSUxMX0ZMQUciLCJCSU5BUllfQ09MTEFUSU9OIiwiRU5VTSIsIkFVVE9fSU5DUkVNRU5UIiwiVElNRVNUQU1QIiwiU0VUIiwiTk9fREVGQVVMVF9WQUxVRV9GTEFHIiwiT05fVVBEQVRFX05PV19GTEFHIiwiTlVNX0ZMQUciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/const/field-detail.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/const/field-type.js":
/*!******************************************************!*\
  !*** ./node_modules/mariadb/lib/const/field-type.js ***!
  \******************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n/**\n * Field types\n * see https://mariadb.com/kb/en/library/resultset/#field-types\n */ \nmodule.exports.DECIMAL = 0;\nmodule.exports.TINY = 1;\nmodule.exports.SHORT = 2;\nmodule.exports.INT = 3;\nmodule.exports.FLOAT = 4;\nmodule.exports.DOUBLE = 5;\nmodule.exports.NULL = 6;\nmodule.exports.TIMESTAMP = 7;\nmodule.exports.BIGINT = 8;\nmodule.exports.INT24 = 9;\nmodule.exports.DATE = 10;\nmodule.exports.TIME = 11;\nmodule.exports.DATETIME = 12;\nmodule.exports.YEAR = 13;\nmodule.exports.NEWDATE = 14;\nmodule.exports.VARCHAR = 15;\nmodule.exports.BIT = 16;\nmodule.exports.TIMESTAMP2 = 17;\nmodule.exports.DATETIME2 = 18;\nmodule.exports.TIME2 = 19;\nmodule.exports.JSON = 245; //only for MySQL\nmodule.exports.NEWDECIMAL = 246;\nmodule.exports.ENUM = 247;\nmodule.exports.SET = 248;\nmodule.exports.TINY_BLOB = 249;\nmodule.exports.MEDIUM_BLOB = 250;\nmodule.exports.LONG_BLOB = 251;\nmodule.exports.BLOB = 252;\nmodule.exports.VAR_STRING = 253;\nmodule.exports.STRING = 254;\nmodule.exports.GEOMETRY = 255;\nconst typeNames = [];\ntypeNames[0] = \"DECIMAL\";\ntypeNames[1] = \"TINY\";\ntypeNames[2] = \"SHORT\";\ntypeNames[3] = \"INT\";\ntypeNames[4] = \"FLOAT\";\ntypeNames[5] = \"DOUBLE\";\ntypeNames[6] = \"NULL\";\ntypeNames[7] = \"TIMESTAMP\";\ntypeNames[8] = \"BIGINT\";\ntypeNames[9] = \"INT24\";\ntypeNames[10] = \"DATE\";\ntypeNames[11] = \"TIME\";\ntypeNames[12] = \"DATETIME\";\ntypeNames[13] = \"YEAR\";\ntypeNames[14] = \"NEWDATE\";\ntypeNames[15] = \"VARCHAR\";\ntypeNames[16] = \"BIT\";\ntypeNames[17] = \"TIMESTAMP2\";\ntypeNames[18] = \"DATETIME2\";\ntypeNames[19] = \"TIME2\";\ntypeNames[245] = \"JSON\";\ntypeNames[246] = \"NEWDECIMAL\";\ntypeNames[247] = \"ENUM\";\ntypeNames[248] = \"SET\";\ntypeNames[249] = \"TINY_BLOB\";\ntypeNames[250] = \"MEDIUM_BLOB\";\ntypeNames[251] = \"LONG_BLOB\";\ntypeNames[252] = \"BLOB\";\ntypeNames[253] = \"VAR_STRING\";\ntypeNames[254] = \"STRING\";\ntypeNames[255] = \"GEOMETRY\";\nmodule.exports.TYPES = typeNames;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29uc3QvZmllbGQtdHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEOzs7Q0FHQztBQUVEQSxzQkFBc0IsR0FBRztBQUN6QkEsbUJBQW1CLEdBQUc7QUFDdEJBLG9CQUFvQixHQUFHO0FBQ3ZCQSxrQkFBa0IsR0FBRztBQUNyQkEsb0JBQW9CLEdBQUc7QUFDdkJBLHFCQUFxQixHQUFHO0FBQ3hCQSxtQkFBbUIsR0FBRztBQUN0QkEsd0JBQXdCLEdBQUc7QUFDM0JBLHFCQUFxQixHQUFHO0FBQ3hCQSxvQkFBb0IsR0FBRztBQUN2QkEsbUJBQW1CLEdBQUc7QUFDdEJBLG1CQUFtQixHQUFHO0FBQ3RCQSx1QkFBdUIsR0FBRztBQUMxQkEsbUJBQW1CLEdBQUc7QUFDdEJBLHNCQUFzQixHQUFHO0FBQ3pCQSxzQkFBc0IsR0FBRztBQUN6QkEsa0JBQWtCLEdBQUc7QUFDckJBLHlCQUF5QixHQUFHO0FBQzVCQSx3QkFBd0IsR0FBRztBQUMzQkEsb0JBQW9CLEdBQUc7QUFDdkJBLG1CQUFtQixHQUFHLEtBQUssZ0JBQWdCO0FBQzNDQSx5QkFBeUIsR0FBRztBQUM1QkEsbUJBQW1CLEdBQUc7QUFDdEJBLGtCQUFrQixHQUFHO0FBQ3JCQSx3QkFBd0IsR0FBRztBQUMzQkEsMEJBQTBCLEdBQUc7QUFDN0JBLHdCQUF3QixHQUFHO0FBQzNCQSxtQkFBbUIsR0FBRztBQUN0QkEseUJBQXlCLEdBQUc7QUFDNUJBLHFCQUFxQixHQUFHO0FBQ3hCQSx1QkFBdUIsR0FBRztBQUUxQixNQUFNaUMsWUFBWSxFQUFFO0FBQ3BCQSxTQUFTLENBQUMsRUFBRSxHQUFHO0FBQ2ZBLFNBQVMsQ0FBQyxFQUFFLEdBQUc7QUFDZkEsU0FBUyxDQUFDLEVBQUUsR0FBRztBQUNmQSxTQUFTLENBQUMsRUFBRSxHQUFHO0FBQ2ZBLFNBQVMsQ0FBQyxFQUFFLEdBQUc7QUFDZkEsU0FBUyxDQUFDLEVBQUUsR0FBRztBQUNmQSxTQUFTLENBQUMsRUFBRSxHQUFHO0FBQ2ZBLFNBQVMsQ0FBQyxFQUFFLEdBQUc7QUFDZkEsU0FBUyxDQUFDLEVBQUUsR0FBRztBQUNmQSxTQUFTLENBQUMsRUFBRSxHQUFHO0FBQ2ZBLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDaEJBLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDaEJBLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDaEJBLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDaEJBLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDaEJBLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDaEJBLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDaEJBLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDaEJBLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDaEJBLFNBQVMsQ0FBQyxHQUFHLEdBQUc7QUFDaEJBLFNBQVMsQ0FBQyxJQUFJLEdBQUc7QUFDakJBLFNBQVMsQ0FBQyxJQUFJLEdBQUc7QUFDakJBLFNBQVMsQ0FBQyxJQUFJLEdBQUc7QUFDakJBLFNBQVMsQ0FBQyxJQUFJLEdBQUc7QUFDakJBLFNBQVMsQ0FBQyxJQUFJLEdBQUc7QUFDakJBLFNBQVMsQ0FBQyxJQUFJLEdBQUc7QUFDakJBLFNBQVMsQ0FBQyxJQUFJLEdBQUc7QUFDakJBLFNBQVMsQ0FBQyxJQUFJLEdBQUc7QUFDakJBLFNBQVMsQ0FBQyxJQUFJLEdBQUc7QUFDakJBLFNBQVMsQ0FBQyxJQUFJLEdBQUc7QUFDakJBLFNBQVMsQ0FBQyxJQUFJLEdBQUc7QUFFakJqQyxvQkFBb0IsR0FBR2lDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGZuZXh0anMvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29uc3QvZmllbGQtdHlwZS5qcz8yNGQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbi8qKlxuICogRmllbGQgdHlwZXNcbiAqIHNlZSBodHRwczovL21hcmlhZGIuY29tL2tiL2VuL2xpYnJhcnkvcmVzdWx0c2V0LyNmaWVsZC10eXBlc1xuICovXG5cbm1vZHVsZS5leHBvcnRzLkRFQ0lNQUwgPSAwO1xubW9kdWxlLmV4cG9ydHMuVElOWSA9IDE7XG5tb2R1bGUuZXhwb3J0cy5TSE9SVCA9IDI7XG5tb2R1bGUuZXhwb3J0cy5JTlQgPSAzO1xubW9kdWxlLmV4cG9ydHMuRkxPQVQgPSA0O1xubW9kdWxlLmV4cG9ydHMuRE9VQkxFID0gNTtcbm1vZHVsZS5leHBvcnRzLk5VTEwgPSA2O1xubW9kdWxlLmV4cG9ydHMuVElNRVNUQU1QID0gNztcbm1vZHVsZS5leHBvcnRzLkJJR0lOVCA9IDg7XG5tb2R1bGUuZXhwb3J0cy5JTlQyNCA9IDk7XG5tb2R1bGUuZXhwb3J0cy5EQVRFID0gMTA7XG5tb2R1bGUuZXhwb3J0cy5USU1FID0gMTE7XG5tb2R1bGUuZXhwb3J0cy5EQVRFVElNRSA9IDEyO1xubW9kdWxlLmV4cG9ydHMuWUVBUiA9IDEzO1xubW9kdWxlLmV4cG9ydHMuTkVXREFURSA9IDE0O1xubW9kdWxlLmV4cG9ydHMuVkFSQ0hBUiA9IDE1O1xubW9kdWxlLmV4cG9ydHMuQklUID0gMTY7XG5tb2R1bGUuZXhwb3J0cy5USU1FU1RBTVAyID0gMTc7XG5tb2R1bGUuZXhwb3J0cy5EQVRFVElNRTIgPSAxODtcbm1vZHVsZS5leHBvcnRzLlRJTUUyID0gMTk7XG5tb2R1bGUuZXhwb3J0cy5KU09OID0gMjQ1OyAvL29ubHkgZm9yIE15U1FMXG5tb2R1bGUuZXhwb3J0cy5ORVdERUNJTUFMID0gMjQ2O1xubW9kdWxlLmV4cG9ydHMuRU5VTSA9IDI0Nztcbm1vZHVsZS5leHBvcnRzLlNFVCA9IDI0ODtcbm1vZHVsZS5leHBvcnRzLlRJTllfQkxPQiA9IDI0OTtcbm1vZHVsZS5leHBvcnRzLk1FRElVTV9CTE9CID0gMjUwO1xubW9kdWxlLmV4cG9ydHMuTE9OR19CTE9CID0gMjUxO1xubW9kdWxlLmV4cG9ydHMuQkxPQiA9IDI1Mjtcbm1vZHVsZS5leHBvcnRzLlZBUl9TVFJJTkcgPSAyNTM7XG5tb2R1bGUuZXhwb3J0cy5TVFJJTkcgPSAyNTQ7XG5tb2R1bGUuZXhwb3J0cy5HRU9NRVRSWSA9IDI1NTtcblxuY29uc3QgdHlwZU5hbWVzID0gW107XG50eXBlTmFtZXNbMF0gPSAnREVDSU1BTCc7XG50eXBlTmFtZXNbMV0gPSAnVElOWSc7XG50eXBlTmFtZXNbMl0gPSAnU0hPUlQnO1xudHlwZU5hbWVzWzNdID0gJ0lOVCc7XG50eXBlTmFtZXNbNF0gPSAnRkxPQVQnO1xudHlwZU5hbWVzWzVdID0gJ0RPVUJMRSc7XG50eXBlTmFtZXNbNl0gPSAnTlVMTCc7XG50eXBlTmFtZXNbN10gPSAnVElNRVNUQU1QJztcbnR5cGVOYW1lc1s4XSA9ICdCSUdJTlQnO1xudHlwZU5hbWVzWzldID0gJ0lOVDI0JztcbnR5cGVOYW1lc1sxMF0gPSAnREFURSc7XG50eXBlTmFtZXNbMTFdID0gJ1RJTUUnO1xudHlwZU5hbWVzWzEyXSA9ICdEQVRFVElNRSc7XG50eXBlTmFtZXNbMTNdID0gJ1lFQVInO1xudHlwZU5hbWVzWzE0XSA9ICdORVdEQVRFJztcbnR5cGVOYW1lc1sxNV0gPSAnVkFSQ0hBUic7XG50eXBlTmFtZXNbMTZdID0gJ0JJVCc7XG50eXBlTmFtZXNbMTddID0gJ1RJTUVTVEFNUDInO1xudHlwZU5hbWVzWzE4XSA9ICdEQVRFVElNRTInO1xudHlwZU5hbWVzWzE5XSA9ICdUSU1FMic7XG50eXBlTmFtZXNbMjQ1XSA9ICdKU09OJztcbnR5cGVOYW1lc1syNDZdID0gJ05FV0RFQ0lNQUwnO1xudHlwZU5hbWVzWzI0N10gPSAnRU5VTSc7XG50eXBlTmFtZXNbMjQ4XSA9ICdTRVQnO1xudHlwZU5hbWVzWzI0OV0gPSAnVElOWV9CTE9CJztcbnR5cGVOYW1lc1syNTBdID0gJ01FRElVTV9CTE9CJztcbnR5cGVOYW1lc1syNTFdID0gJ0xPTkdfQkxPQic7XG50eXBlTmFtZXNbMjUyXSA9ICdCTE9CJztcbnR5cGVOYW1lc1syNTNdID0gJ1ZBUl9TVFJJTkcnO1xudHlwZU5hbWVzWzI1NF0gPSAnU1RSSU5HJztcbnR5cGVOYW1lc1syNTVdID0gJ0dFT01FVFJZJztcblxubW9kdWxlLmV4cG9ydHMuVFlQRVMgPSB0eXBlTmFtZXM7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkRFQ0lNQUwiLCJUSU5ZIiwiU0hPUlQiLCJJTlQiLCJGTE9BVCIsIkRPVUJMRSIsIk5VTEwiLCJUSU1FU1RBTVAiLCJCSUdJTlQiLCJJTlQyNCIsIkRBVEUiLCJUSU1FIiwiREFURVRJTUUiLCJZRUFSIiwiTkVXREFURSIsIlZBUkNIQVIiLCJCSVQiLCJUSU1FU1RBTVAyIiwiREFURVRJTUUyIiwiVElNRTIiLCJKU09OIiwiTkVXREVDSU1BTCIsIkVOVU0iLCJTRVQiLCJUSU5ZX0JMT0IiLCJNRURJVU1fQkxPQiIsIkxPTkdfQkxPQiIsIkJMT0IiLCJWQVJfU1RSSU5HIiwiU1RSSU5HIiwiR0VPTUVUUlkiLCJ0eXBlTmFtZXMiLCJUWVBFUyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/const/field-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/const/server-status.js":
/*!*********************************************************!*\
  !*** ./node_modules/mariadb/lib/const/server-status.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n/**\n * possible server status flag value\n * see https://mariadb.com/kb/en/library/ok_packet/#server-status-flag\n * @type {number}\n */ //A transaction is currently active\n\nmodule.exports.STATUS_IN_TRANS = 1;\n//Autocommit mode is set\nmodule.exports.STATUS_AUTOCOMMIT = 2;\n//more results exists (more packet follow)\nmodule.exports.MORE_RESULTS_EXISTS = 8;\nmodule.exports.QUERY_NO_GOOD_INDEX_USED = 16;\nmodule.exports.QUERY_NO_INDEX_USED = 32;\n//when using COM_STMT_FETCH, indicate that current cursor still has result (deprecated)\nmodule.exports.STATUS_CURSOR_EXISTS = 64;\n//when using COM_STMT_FETCH, indicate that current cursor has finished to send results (deprecated)\nmodule.exports.STATUS_LAST_ROW_SENT = 128;\n//database has been dropped\nmodule.exports.STATUS_DB_DROPPED = 1 << 8;\n//current escape mode is \"no backslash escape\"\nmodule.exports.STATUS_NO_BACKSLASH_ESCAPES = 1 << 9;\n//A DDL change did have an impact on an existing PREPARE (an automatic re-prepare has been executed)\nmodule.exports.STATUS_METADATA_CHANGED = 1 << 10;\nmodule.exports.QUERY_WAS_SLOW = 1 << 11;\n//this result-set contain stored procedure output parameter\nmodule.exports.PS_OUT_PARAMS = 1 << 12;\n//current transaction is a read-only transaction\nmodule.exports.STATUS_IN_TRANS_READONLY = 1 << 13;\n//session state change. see Session change type for more information\nmodule.exports.SESSION_STATE_CHANGED = 1 << 14;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29uc3Qvc2VydmVyLXN0YXR1cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEOzs7O0NBSUMsR0FDRCxtQ0FBbUM7O0FBQ25DQSw4QkFBOEIsR0FBRztBQUNqQyx3QkFBd0I7QUFDeEJBLGdDQUFnQyxHQUFHO0FBQ25DLDBDQUEwQztBQUMxQ0Esa0NBQWtDLEdBQUc7QUFDckNBLHVDQUF1QyxHQUFHO0FBQzFDQSxrQ0FBa0MsR0FBRztBQUNyQyx1RkFBdUY7QUFDdkZBLG1DQUFtQyxHQUFHO0FBQ3RDLG1HQUFtRztBQUNuR0EsbUNBQW1DLEdBQUc7QUFDdEMsMkJBQTJCO0FBQzNCQSxnQ0FBZ0MsR0FBRyxLQUFLO0FBQ3hDLDhDQUE4QztBQUM5Q0EsMENBQTBDLEdBQUcsS0FBSztBQUNsRCxvR0FBb0c7QUFDcEdBLHNDQUFzQyxHQUFHLEtBQUs7QUFDOUNBLDZCQUE2QixHQUFHLEtBQUs7QUFDckMsMkRBQTJEO0FBQzNEQSw0QkFBNEIsR0FBRyxLQUFLO0FBQ3BDLGdEQUFnRDtBQUNoREEsdUNBQXVDLEdBQUcsS0FBSztBQUMvQyxvRUFBb0U7QUFDcEVBLG9DQUFvQyxHQUFHLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZm5leHRqcy8uL25vZGVfbW9kdWxlcy9tYXJpYWRiL2xpYi9jb25zdC9zZXJ2ZXItc3RhdHVzLmpzP2YzMmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuLyoqXG4gKiBwb3NzaWJsZSBzZXJ2ZXIgc3RhdHVzIGZsYWcgdmFsdWVcbiAqIHNlZSBodHRwczovL21hcmlhZGIuY29tL2tiL2VuL2xpYnJhcnkvb2tfcGFja2V0LyNzZXJ2ZXItc3RhdHVzLWZsYWdcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbi8vQSB0cmFuc2FjdGlvbiBpcyBjdXJyZW50bHkgYWN0aXZlXG5tb2R1bGUuZXhwb3J0cy5TVEFUVVNfSU5fVFJBTlMgPSAxO1xuLy9BdXRvY29tbWl0IG1vZGUgaXMgc2V0XG5tb2R1bGUuZXhwb3J0cy5TVEFUVVNfQVVUT0NPTU1JVCA9IDI7XG4vL21vcmUgcmVzdWx0cyBleGlzdHMgKG1vcmUgcGFja2V0IGZvbGxvdylcbm1vZHVsZS5leHBvcnRzLk1PUkVfUkVTVUxUU19FWElTVFMgPSA4O1xubW9kdWxlLmV4cG9ydHMuUVVFUllfTk9fR09PRF9JTkRFWF9VU0VEID0gMTY7XG5tb2R1bGUuZXhwb3J0cy5RVUVSWV9OT19JTkRFWF9VU0VEID0gMzI7XG4vL3doZW4gdXNpbmcgQ09NX1NUTVRfRkVUQ0gsIGluZGljYXRlIHRoYXQgY3VycmVudCBjdXJzb3Igc3RpbGwgaGFzIHJlc3VsdCAoZGVwcmVjYXRlZClcbm1vZHVsZS5leHBvcnRzLlNUQVRVU19DVVJTT1JfRVhJU1RTID0gNjQ7XG4vL3doZW4gdXNpbmcgQ09NX1NUTVRfRkVUQ0gsIGluZGljYXRlIHRoYXQgY3VycmVudCBjdXJzb3IgaGFzIGZpbmlzaGVkIHRvIHNlbmQgcmVzdWx0cyAoZGVwcmVjYXRlZClcbm1vZHVsZS5leHBvcnRzLlNUQVRVU19MQVNUX1JPV19TRU5UID0gMTI4O1xuLy9kYXRhYmFzZSBoYXMgYmVlbiBkcm9wcGVkXG5tb2R1bGUuZXhwb3J0cy5TVEFUVVNfREJfRFJPUFBFRCA9IDEgPDwgODtcbi8vY3VycmVudCBlc2NhcGUgbW9kZSBpcyBcIm5vIGJhY2tzbGFzaCBlc2NhcGVcIlxubW9kdWxlLmV4cG9ydHMuU1RBVFVTX05PX0JBQ0tTTEFTSF9FU0NBUEVTID0gMSA8PCA5O1xuLy9BIERETCBjaGFuZ2UgZGlkIGhhdmUgYW4gaW1wYWN0IG9uIGFuIGV4aXN0aW5nIFBSRVBBUkUgKGFuIGF1dG9tYXRpYyByZS1wcmVwYXJlIGhhcyBiZWVuIGV4ZWN1dGVkKVxubW9kdWxlLmV4cG9ydHMuU1RBVFVTX01FVEFEQVRBX0NIQU5HRUQgPSAxIDw8IDEwO1xubW9kdWxlLmV4cG9ydHMuUVVFUllfV0FTX1NMT1cgPSAxIDw8IDExO1xuLy90aGlzIHJlc3VsdC1zZXQgY29udGFpbiBzdG9yZWQgcHJvY2VkdXJlIG91dHB1dCBwYXJhbWV0ZXJcbm1vZHVsZS5leHBvcnRzLlBTX09VVF9QQVJBTVMgPSAxIDw8IDEyO1xuLy9jdXJyZW50IHRyYW5zYWN0aW9uIGlzIGEgcmVhZC1vbmx5IHRyYW5zYWN0aW9uXG5tb2R1bGUuZXhwb3J0cy5TVEFUVVNfSU5fVFJBTlNfUkVBRE9OTFkgPSAxIDw8IDEzO1xuLy9zZXNzaW9uIHN0YXRlIGNoYW5nZS4gc2VlIFNlc3Npb24gY2hhbmdlIHR5cGUgZm9yIG1vcmUgaW5mb3JtYXRpb25cbm1vZHVsZS5leHBvcnRzLlNFU1NJT05fU1RBVEVfQ0hBTkdFRCA9IDEgPDwgMTQ7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlNUQVRVU19JTl9UUkFOUyIsIlNUQVRVU19BVVRPQ09NTUlUIiwiTU9SRV9SRVNVTFRTX0VYSVNUUyIsIlFVRVJZX05PX0dPT0RfSU5ERVhfVVNFRCIsIlFVRVJZX05PX0lOREVYX1VTRUQiLCJTVEFUVVNfQ1VSU09SX0VYSVNUUyIsIlNUQVRVU19MQVNUX1JPV19TRU5UIiwiU1RBVFVTX0RCX0RST1BQRUQiLCJTVEFUVVNfTk9fQkFDS1NMQVNIX0VTQ0FQRVMiLCJTVEFUVVNfTUVUQURBVEFfQ0hBTkdFRCIsIlFVRVJZX1dBU19TTE9XIiwiUFNfT1VUX1BBUkFNUyIsIlNUQVRVU19JTl9UUkFOU19SRUFET05MWSIsIlNFU1NJT05fU1RBVEVfQ0hBTkdFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/const/server-status.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/const/state-change.js":
/*!********************************************************!*\
  !*** ./node_modules/mariadb/lib/const/state-change.js ***!
  \********************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n/**\n * Session change type.\n * see : https://mariadb.com/kb/en/library/ok_packet/#session-change-type\n * @type {number}\n */ \nmodule.exports.SESSION_TRACK_SYSTEM_VARIABLES = 0;\nmodule.exports.SESSION_TRACK_SCHEMA = 1;\nmodule.exports.SESSION_TRACK_STATE_CHANGE = 2;\nmodule.exports.SESSION_TRACK_GTIDS = 3;\nmodule.exports.SESSION_TRACK_TRANSACTION_CHARACTERISTICS = 4;\nmodule.exports.SESSION_TRACK_TRANSACTION_STATE = 5;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29uc3Qvc3RhdGUtY2hhbmdlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxrREFBa0Q7QUFFbEQ7Ozs7Q0FJQztBQUVEQSw2Q0FBNkMsR0FBRztBQUNoREEsbUNBQW1DLEdBQUc7QUFDdENBLHlDQUF5QyxHQUFHO0FBQzVDQSxrQ0FBa0MsR0FBRztBQUNyQ0Esd0RBQXdELEdBQUc7QUFDM0RBLDhDQUE4QyxHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGZuZXh0anMvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvY29uc3Qvc3RhdGUtY2hhbmdlLmpzPzc4OWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuLyoqXG4gKiBTZXNzaW9uIGNoYW5nZSB0eXBlLlxuICogc2VlIDogaHR0cHM6Ly9tYXJpYWRiLmNvbS9rYi9lbi9saWJyYXJ5L29rX3BhY2tldC8jc2Vzc2lvbi1jaGFuZ2UtdHlwZVxuICogQHR5cGUge251bWJlcn1cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cy5TRVNTSU9OX1RSQUNLX1NZU1RFTV9WQVJJQUJMRVMgPSAwO1xubW9kdWxlLmV4cG9ydHMuU0VTU0lPTl9UUkFDS19TQ0hFTUEgPSAxO1xubW9kdWxlLmV4cG9ydHMuU0VTU0lPTl9UUkFDS19TVEFURV9DSEFOR0UgPSAyO1xubW9kdWxlLmV4cG9ydHMuU0VTU0lPTl9UUkFDS19HVElEUyA9IDM7XG5tb2R1bGUuZXhwb3J0cy5TRVNTSU9OX1RSQUNLX1RSQU5TQUNUSU9OX0NIQVJBQ1RFUklTVElDUyA9IDQ7XG5tb2R1bGUuZXhwb3J0cy5TRVNTSU9OX1RSQUNLX1RSQU5TQUNUSU9OX1NUQVRFID0gNTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiU0VTU0lPTl9UUkFDS19TWVNURU1fVkFSSUFCTEVTIiwiU0VTU0lPTl9UUkFDS19TQ0hFTUEiLCJTRVNTSU9OX1RSQUNLX1NUQVRFX0NIQU5HRSIsIlNFU1NJT05fVFJBQ0tfR1RJRFMiLCJTRVNTSU9OX1RSQUNLX1RSQU5TQUNUSU9OX0NIQVJBQ1RFUklTVElDUyIsIlNFU1NJT05fVFJBQ0tfVFJBTlNBQ1RJT05fU1RBVEUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/const/state-change.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/filtered-cluster.js":
/*!******************************************************!*\
  !*** ./node_modules/mariadb/lib/filtered-cluster.js ***!
  \******************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n/**\n * Similar to pool cluster with pre-set pattern and selector.\n * Additional method query\n *\n * @param poolCluster    cluster\n * @param patternArg     pre-set pattern\n * @param selectorArg    pre-set selector\n * @constructor\n */ \nclass FilteredCluster {\n    #cluster;\n    #pattern;\n    #selector;\n    constructor(poolCluster, patternArg, selectorArg){\n        this.#cluster = poolCluster;\n        this.#pattern = patternArg;\n        this.#selector = selectorArg;\n    }\n    /**\n   * Get a connection according to previously indicated pattern and selector.\n   *\n   * @return {Promise}\n   */ getConnection() {\n        return this.#cluster.getConnection(this.#pattern, this.#selector);\n    }\n    /**\n   * Execute a text query on one connection from available pools matching pattern\n   * in cluster.\n   *\n   * @param sql   sql command\n   * @param value parameter value of sql command (not mandatory)\n   * @return {Promise}\n   */ query(sql, value) {\n        return this.#cluster.getConnection(this.#pattern, this.#selector).then((conn)=>{\n            return conn.query(sql, value).then((res)=>{\n                conn.release();\n                return res;\n            }).catch((err)=>{\n                conn.release();\n                return Promise.reject(err);\n            });\n        }).catch((err)=>{\n            return Promise.reject(err);\n        });\n    }\n    /**\n   * Execute a binary query on one connection from available pools matching pattern\n   * in cluster.\n   *\n   * @param sql   sql command\n   * @param value parameter value of sql command (not mandatory)\n   * @return {Promise}\n   */ execute(sql, value) {\n        return this.#cluster.getConnection(this.#pattern, this.#selector).then((conn)=>{\n            return conn.execute(sql, value).then((res)=>{\n                conn.release();\n                return res;\n            }).catch((err)=>{\n                conn.release();\n                return Promise.reject(err);\n            });\n        }).catch((err)=>{\n            return Promise.reject(err);\n        });\n    }\n    /**\n   * Execute a batch on one connection from available pools matching pattern\n   * in cluster.\n   *\n   * @param sql   sql command\n   * @param value parameter value of sql command\n   * @return {Promise}\n   */ batch(sql, value) {\n        return this.#cluster.getConnection(this.#pattern, this.#selector).then((conn)=>{\n            return conn.batch(sql, value).then((res)=>{\n                conn.release();\n                return res;\n            }).catch((err)=>{\n                conn.release();\n                return Promise.reject(err);\n            });\n        }).catch((err)=>{\n            return Promise.reject(err);\n        });\n    }\n}\nmodule.exports = FilteredCluster;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvZmlsdGVyZWQtY2x1c3Rlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEOzs7Ozs7OztDQVFDO0FBQ0QsTUFBTUE7SUFDSixDQUFDQyxPQUFPLENBQUM7SUFDVCxDQUFDQyxPQUFPLENBQUM7SUFDVCxDQUFDQyxRQUFRLENBQUM7SUFFVkMsWUFBWUMsV0FBVyxFQUFFQyxVQUFVLEVBQUVDLFdBQVcsQ0FBRTtRQUNoRCxJQUFJLENBQUMsQ0FBQ04sT0FBTyxHQUFHSTtRQUNoQixJQUFJLENBQUMsQ0FBQ0gsT0FBTyxHQUFHSTtRQUNoQixJQUFJLENBQUMsQ0FBQ0gsUUFBUSxHQUFHSTtJQUNuQjtJQUVBOzs7O0dBSUMsR0FDREMsZ0JBQWdCO1FBQ2QsT0FBTyxJQUFJLENBQUMsQ0FBQ1AsT0FBTyxDQUFDTyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUNOLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQ0MsUUFBUTtJQUNsRTtJQUVBOzs7Ozs7O0dBT0MsR0FDRE0sTUFBTUMsR0FBRyxFQUFFQyxLQUFLLEVBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUMsQ0FBQ1YsT0FBTyxDQUNqQk8sYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDTixPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUNDLFFBQVEsRUFDM0NTLElBQUksQ0FBQyxDQUFDQztZQUNMLE9BQU9BLEtBQ0pKLEtBQUssQ0FBQ0MsS0FBS0MsT0FDWEMsSUFBSSxDQUFDLENBQUNFO2dCQUNMRCxLQUFLRSxPQUFPO2dCQUNaLE9BQU9EO1lBQ1QsR0FDQ0UsS0FBSyxDQUFDLENBQUNDO2dCQUNOSixLQUFLRSxPQUFPO2dCQUNaLE9BQU9HLFFBQVFDLE1BQU0sQ0FBQ0Y7WUFDeEI7UUFDSixHQUNDRCxLQUFLLENBQUMsQ0FBQ0M7WUFDTixPQUFPQyxRQUFRQyxNQUFNLENBQUNGO1FBQ3hCO0lBQ0o7SUFFQTs7Ozs7OztHQU9DLEdBQ0RHLFFBQVFWLEdBQUcsRUFBRUMsS0FBSyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLENBQUNWLE9BQU8sQ0FDakJPLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQ04sT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDQyxRQUFRLEVBQzNDUyxJQUFJLENBQUMsQ0FBQ0M7WUFDTCxPQUFPQSxLQUNKTyxPQUFPLENBQUNWLEtBQUtDLE9BQ2JDLElBQUksQ0FBQyxDQUFDRTtnQkFDTEQsS0FBS0UsT0FBTztnQkFDWixPQUFPRDtZQUNULEdBQ0NFLEtBQUssQ0FBQyxDQUFDQztnQkFDTkosS0FBS0UsT0FBTztnQkFDWixPQUFPRyxRQUFRQyxNQUFNLENBQUNGO1lBQ3hCO1FBQ0osR0FDQ0QsS0FBSyxDQUFDLENBQUNDO1lBQ04sT0FBT0MsUUFBUUMsTUFBTSxDQUFDRjtRQUN4QjtJQUNKO0lBRUE7Ozs7Ozs7R0FPQyxHQUNESSxNQUFNWCxHQUFHLEVBQUVDLEtBQUssRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQyxDQUFDVixPQUFPLENBQ2pCTyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUNOLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQ0MsUUFBUSxFQUMzQ1MsSUFBSSxDQUFDLENBQUNDO1lBQ0wsT0FBT0EsS0FDSlEsS0FBSyxDQUFDWCxLQUFLQyxPQUNYQyxJQUFJLENBQUMsQ0FBQ0U7Z0JBQ0xELEtBQUtFLE9BQU87Z0JBQ1osT0FBT0Q7WUFDVCxHQUNDRSxLQUFLLENBQUMsQ0FBQ0M7Z0JBQ05KLEtBQUtFLE9BQU87Z0JBQ1osT0FBT0csUUFBUUMsTUFBTSxDQUFDRjtZQUN4QjtRQUNKLEdBQ0NELEtBQUssQ0FBQyxDQUFDQztZQUNOLE9BQU9DLFFBQVFDLE1BQU0sQ0FBQ0Y7UUFDeEI7SUFDSjtBQUNGO0FBRUFLLE9BQU9DLE9BQU8sR0FBR3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGZuZXh0anMvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvZmlsdGVyZWQtY2x1c3Rlci5qcz81ZjZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbi8qKlxuICogU2ltaWxhciB0byBwb29sIGNsdXN0ZXIgd2l0aCBwcmUtc2V0IHBhdHRlcm4gYW5kIHNlbGVjdG9yLlxuICogQWRkaXRpb25hbCBtZXRob2QgcXVlcnlcbiAqXG4gKiBAcGFyYW0gcG9vbENsdXN0ZXIgICAgY2x1c3RlclxuICogQHBhcmFtIHBhdHRlcm5BcmcgICAgIHByZS1zZXQgcGF0dGVyblxuICogQHBhcmFtIHNlbGVjdG9yQXJnICAgIHByZS1zZXQgc2VsZWN0b3JcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBGaWx0ZXJlZENsdXN0ZXIge1xuICAjY2x1c3RlcjtcbiAgI3BhdHRlcm47XG4gICNzZWxlY3RvcjtcblxuICBjb25zdHJ1Y3Rvcihwb29sQ2x1c3RlciwgcGF0dGVybkFyZywgc2VsZWN0b3JBcmcpIHtcbiAgICB0aGlzLiNjbHVzdGVyID0gcG9vbENsdXN0ZXI7XG4gICAgdGhpcy4jcGF0dGVybiA9IHBhdHRlcm5Bcmc7XG4gICAgdGhpcy4jc2VsZWN0b3IgPSBzZWxlY3RvckFyZztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBjb25uZWN0aW9uIGFjY29yZGluZyB0byBwcmV2aW91c2x5IGluZGljYXRlZCBwYXR0ZXJuIGFuZCBzZWxlY3Rvci5cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGdldENvbm5lY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuI2NsdXN0ZXIuZ2V0Q29ubmVjdGlvbih0aGlzLiNwYXR0ZXJuLCB0aGlzLiNzZWxlY3Rvcik7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSBhIHRleHQgcXVlcnkgb24gb25lIGNvbm5lY3Rpb24gZnJvbSBhdmFpbGFibGUgcG9vbHMgbWF0Y2hpbmcgcGF0dGVyblxuICAgKiBpbiBjbHVzdGVyLlxuICAgKlxuICAgKiBAcGFyYW0gc3FsICAgc3FsIGNvbW1hbmRcbiAgICogQHBhcmFtIHZhbHVlIHBhcmFtZXRlciB2YWx1ZSBvZiBzcWwgY29tbWFuZCAobm90IG1hbmRhdG9yeSlcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIHF1ZXJ5KHNxbCwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy4jY2x1c3RlclxuICAgICAgLmdldENvbm5lY3Rpb24odGhpcy4jcGF0dGVybiwgdGhpcy4jc2VsZWN0b3IpXG4gICAgICAudGhlbigoY29ubikgPT4ge1xuICAgICAgICByZXR1cm4gY29ublxuICAgICAgICAgIC5xdWVyeShzcWwsIHZhbHVlKVxuICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGNvbm4ucmVsZWFzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25uLnJlbGVhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSBhIGJpbmFyeSBxdWVyeSBvbiBvbmUgY29ubmVjdGlvbiBmcm9tIGF2YWlsYWJsZSBwb29scyBtYXRjaGluZyBwYXR0ZXJuXG4gICAqIGluIGNsdXN0ZXIuXG4gICAqXG4gICAqIEBwYXJhbSBzcWwgICBzcWwgY29tbWFuZFxuICAgKiBAcGFyYW0gdmFsdWUgcGFyYW1ldGVyIHZhbHVlIG9mIHNxbCBjb21tYW5kIChub3QgbWFuZGF0b3J5KVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgKi9cbiAgZXhlY3V0ZShzcWwsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuI2NsdXN0ZXJcbiAgICAgIC5nZXRDb25uZWN0aW9uKHRoaXMuI3BhdHRlcm4sIHRoaXMuI3NlbGVjdG9yKVxuICAgICAgLnRoZW4oKGNvbm4pID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbm5cbiAgICAgICAgICAuZXhlY3V0ZShzcWwsIHZhbHVlKVxuICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGNvbm4ucmVsZWFzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25uLnJlbGVhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSBhIGJhdGNoIG9uIG9uZSBjb25uZWN0aW9uIGZyb20gYXZhaWxhYmxlIHBvb2xzIG1hdGNoaW5nIHBhdHRlcm5cbiAgICogaW4gY2x1c3Rlci5cbiAgICpcbiAgICogQHBhcmFtIHNxbCAgIHNxbCBjb21tYW5kXG4gICAqIEBwYXJhbSB2YWx1ZSBwYXJhbWV0ZXIgdmFsdWUgb2Ygc3FsIGNvbW1hbmRcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGJhdGNoKHNxbCwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy4jY2x1c3RlclxuICAgICAgLmdldENvbm5lY3Rpb24odGhpcy4jcGF0dGVybiwgdGhpcy4jc2VsZWN0b3IpXG4gICAgICAudGhlbigoY29ubikgPT4ge1xuICAgICAgICByZXR1cm4gY29ublxuICAgICAgICAgIC5iYXRjaChzcWwsIHZhbHVlKVxuICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGNvbm4ucmVsZWFzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25uLnJlbGVhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGaWx0ZXJlZENsdXN0ZXI7XG4iXSwibmFtZXMiOlsiRmlsdGVyZWRDbHVzdGVyIiwiY2x1c3RlciIsInBhdHRlcm4iLCJzZWxlY3RvciIsImNvbnN0cnVjdG9yIiwicG9vbENsdXN0ZXIiLCJwYXR0ZXJuQXJnIiwic2VsZWN0b3JBcmciLCJnZXRDb25uZWN0aW9uIiwicXVlcnkiLCJzcWwiLCJ2YWx1ZSIsInRoZW4iLCJjb25uIiwicmVzIiwicmVsZWFzZSIsImNhdGNoIiwiZXJyIiwiUHJvbWlzZSIsInJlamVjdCIsImV4ZWN1dGUiLCJiYXRjaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/filtered-cluster.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/io/compression-input-stream.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mariadb/lib/io/compression-input-stream.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst ZLib = __webpack_require__(/*! zlib */ \"zlib\");\nconst Utils = __webpack_require__(/*! ../misc/utils */ \"(rsc)/./node_modules/mariadb/lib/misc/utils.js\");\n/**\n * MySQL packet parser\n * see : https://mariadb.com/kb/en/library/0-packet/\n */ class CompressionInputStream {\n    constructor(reader, receiveQueue, opts, info){\n        this.reader = reader;\n        this.receiveQueue = receiveQueue;\n        this.info = info;\n        this.opts = opts;\n        this.header = Buffer.allocUnsafe(7);\n        this.headerLen = 0;\n        this.compressPacketLen = null;\n        this.packetLen = null;\n        this.remainingLen = null;\n        this.parts = null;\n        this.partsTotalLen = 0;\n    }\n    receivePacket(chunk) {\n        let cmd = this.currentCmd();\n        if (this.opts.debugCompress) {\n            this.opts.logger.network(`<== conn:${this.info.threadId ? this.info.threadId : -1} ${cmd ? cmd.onPacketReceive ? cmd.constructor.name + \".\" + cmd.onPacketReceive.name : cmd.constructor.name : \"no command\"} (compress)\\n${Utils.log(this.opts, chunk, 0, chunk.length, this.header)}`);\n        }\n        if (cmd) cmd.compressSequenceNo = this.header[3];\n        const unCompressLen = this.header[4] | this.header[5] << 8 | this.header[6] << 16;\n        if (unCompressLen === 0) {\n            this.reader.onData(chunk);\n        } else {\n            //use synchronous inflating, to ensure FIFO packet order\n            const unCompressChunk = ZLib.inflateSync(chunk);\n            this.reader.onData(unCompressChunk);\n        }\n    }\n    currentCmd() {\n        let cmd;\n        while(cmd = this.receiveQueue.peek()){\n            if (cmd.onPacketReceive) return cmd;\n            this.receiveQueue.shift();\n        }\n        return null;\n    }\n    resetHeader() {\n        this.remainingLen = null;\n        this.headerLen = 0;\n    }\n    onData(chunk) {\n        let pos = 0;\n        let length;\n        const chunkLen = chunk.length;\n        do {\n            if (this.remainingLen) {\n                length = this.remainingLen;\n            } else if (this.headerLen === 0 && chunkLen - pos >= 7) {\n                this.header[0] = chunk[pos];\n                this.header[1] = chunk[pos + 1];\n                this.header[2] = chunk[pos + 2];\n                this.header[3] = chunk[pos + 3];\n                this.header[4] = chunk[pos + 4];\n                this.header[5] = chunk[pos + 5];\n                this.header[6] = chunk[pos + 6];\n                this.headerLen = 7;\n                pos += 7;\n                this.compressPacketLen = this.header[0] + (this.header[1] << 8) + (this.header[2] << 16);\n                this.packetLen = this.header[4] | this.header[5] << 8 | this.header[6] << 16;\n                if (this.packetLen === 0) this.packetLen = this.compressPacketLen;\n                length = this.compressPacketLen;\n            } else {\n                length = null;\n                while(chunkLen - pos > 0){\n                    this.header[this.headerLen++] = chunk[pos++];\n                    if (this.headerLen === 7) {\n                        this.compressPacketLen = this.header[0] + (this.header[1] << 8) + (this.header[2] << 16);\n                        this.packetLen = this.header[4] | this.header[5] << 8 | this.header[6] << 16;\n                        if (this.packetLen === 0) this.packetLen = this.compressPacketLen;\n                        length = this.compressPacketLen;\n                        break;\n                    }\n                }\n            }\n            if (length) {\n                if (chunkLen - pos >= length) {\n                    const buf = chunk.subarray(pos, pos + length);\n                    pos += length;\n                    if (this.parts) {\n                        this.parts.push(buf);\n                        this.partsTotalLen += length;\n                        if (this.compressPacketLen < 0xffffff) {\n                            let buf = Buffer.concat(this.parts, this.partsTotalLen);\n                            this.parts = null;\n                            this.receivePacket(buf);\n                        }\n                    } else {\n                        if (this.compressPacketLen < 0xffffff) {\n                            this.receivePacket(buf);\n                        } else {\n                            this.parts = [\n                                buf\n                            ];\n                            this.partsTotalLen = length;\n                        }\n                    }\n                    this.resetHeader();\n                } else {\n                    const buf = chunk.subarray(pos, chunkLen);\n                    if (!this.parts) {\n                        this.parts = [\n                            buf\n                        ];\n                        this.partsTotalLen = chunkLen - pos;\n                    } else {\n                        this.parts.push(buf);\n                        this.partsTotalLen += chunkLen - pos;\n                    }\n                    this.remainingLen = length - (chunkLen - pos);\n                    return;\n                }\n            }\n        }while (pos < chunkLen);\n    }\n}\nmodule.exports = CompressionInputStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/io/compression-input-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/io/compression-output-stream.js":
/*!******************************************************************!*\
  !*** ./node_modules/mariadb/lib/io/compression-output-stream.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Utils = __webpack_require__(/*! ../misc/utils */ \"(rsc)/./node_modules/mariadb/lib/misc/utils.js\");\nconst ZLib = __webpack_require__(/*! zlib */ \"zlib\");\n//increase by level to avoid buffer copy.\nconst SMALL_BUFFER_SIZE = 2048;\nconst MEDIUM_BUFFER_SIZE = 131072; //128k\nconst LARGE_BUFFER_SIZE = 1048576; //1M\nconst MAX_BUFFER_SIZE = 16777222; //16M + 7\n/**\n/**\n * MySQL compression filter.\n * see https://mariadb.com/kb/en/library/0-packet/#compressed-packet\n */ class CompressionOutputStream {\n    /**\n   * Constructor\n   *\n   * @param socket    current socket\n   * @param opts      current connection options\n   * @param info      current connection information\n   * @constructor\n   */ constructor(socket, opts, info){\n        this.info = info;\n        this.opts = opts;\n        this.pos = 7;\n        this.header = Buffer.allocUnsafe(7);\n        this.buf = Buffer.allocUnsafe(SMALL_BUFFER_SIZE);\n        this.writer = (buffer)=>{\n            socket.write(buffer);\n        };\n    }\n    growBuffer(len) {\n        let newCapacity;\n        if (len + this.pos < MEDIUM_BUFFER_SIZE) {\n            newCapacity = MEDIUM_BUFFER_SIZE;\n        } else if (len + this.pos < LARGE_BUFFER_SIZE) {\n            newCapacity = LARGE_BUFFER_SIZE;\n        } else newCapacity = MAX_BUFFER_SIZE;\n        let newBuf = Buffer.allocUnsafe(newCapacity);\n        this.buf.copy(newBuf, 0, 0, this.pos);\n        this.buf = newBuf;\n    }\n    writeBuf(arr, cmd) {\n        let off = 0, len = arr.length;\n        if (arr instanceof Uint8Array) {\n            arr = Buffer.from(arr);\n        }\n        if (len > this.buf.length - this.pos) {\n            if (this.buf.length !== MAX_BUFFER_SIZE) {\n                this.growBuffer(len);\n            }\n            //max buffer size\n            if (len > this.buf.length - this.pos) {\n                //not enough space in buffer, will stream :\n                // fill buffer and flush until all data are snd\n                let remainingLen = len;\n                while(true){\n                    //filling buffer\n                    let lenToFillBuffer = Math.min(MAX_BUFFER_SIZE - this.pos, remainingLen);\n                    arr.copy(this.buf, this.pos, off, off + lenToFillBuffer);\n                    remainingLen -= lenToFillBuffer;\n                    off += lenToFillBuffer;\n                    this.pos += lenToFillBuffer;\n                    if (remainingLen === 0) return;\n                    this.flush(false, cmd, remainingLen);\n                }\n            }\n        }\n        arr.copy(this.buf, this.pos, off, off + len);\n        this.pos += len;\n    }\n    /**\n   * Flush the internal buffer.\n   */ flush(cmdEnd, cmd, remainingLen) {\n        if (this.pos < 1536) {\n            //*******************************************************************************\n            // small packet, no compression\n            //*******************************************************************************\n            this.buf[0] = this.pos - 7;\n            this.buf[1] = this.pos - 7 >>> 8;\n            this.buf[2] = this.pos - 7 >>> 16;\n            this.buf[3] = ++cmd.compressSequenceNo;\n            this.buf[4] = 0;\n            this.buf[5] = 0;\n            this.buf[6] = 0;\n            if (this.opts.debugCompress) {\n                this.opts.logger.network(`==> conn:${this.info.threadId ? this.info.threadId : -1} ${cmd ? cmd.constructor.name + \"(0,\" + this.pos + \")\" : \"unknown\"} (compress)\\n${Utils.log(this.opts, this.buf, 0, this.pos)}`);\n            }\n            this.writer(this.buf.subarray(0, this.pos));\n        } else {\n            //*******************************************************************************\n            // compressing packet\n            //*******************************************************************************\n            //use synchronous inflating, to ensure FIFO packet order\n            const compressChunk = ZLib.deflateSync(this.buf.subarray(7, this.pos));\n            const compressChunkLen = compressChunk.length;\n            this.header[0] = compressChunkLen;\n            this.header[1] = compressChunkLen >>> 8;\n            this.header[2] = compressChunkLen >>> 16;\n            this.header[3] = ++cmd.compressSequenceNo;\n            this.header[4] = this.pos - 7;\n            this.header[5] = this.pos - 7 >>> 8;\n            this.header[6] = this.pos - 7 >>> 16;\n            if (this.opts.debugCompress) {\n                this.opts.logger.network(`==> conn:${this.info.threadId ? this.info.threadId : -1} ${cmd ? cmd.constructor.name + \"(0,\" + this.pos + \"=>\" + compressChunkLen + \")\" : \"unknown\"} (compress)\\n${Utils.log(this.opts, compressChunk, 0, compressChunkLen, this.header)}`);\n            }\n            this.writer(this.header);\n            this.writer(compressChunk);\n            if (cmdEnd && compressChunkLen === MAX_BUFFER_SIZE) this.writeEmptyPacket(cmd);\n            this.header = Buffer.allocUnsafe(7);\n        }\n        this.buf = remainingLen ? CompressionOutputStream.allocateBuffer(remainingLen) : Buffer.allocUnsafe(SMALL_BUFFER_SIZE);\n        this.pos = 7;\n    }\n    static allocateBuffer(len) {\n        if (len + 4 < SMALL_BUFFER_SIZE) {\n            return Buffer.allocUnsafe(SMALL_BUFFER_SIZE);\n        } else if (len + 4 < MEDIUM_BUFFER_SIZE) {\n            return Buffer.allocUnsafe(MEDIUM_BUFFER_SIZE);\n        } else if (len + 4 < LARGE_BUFFER_SIZE) {\n            return Buffer.allocUnsafe(LARGE_BUFFER_SIZE);\n        }\n        return Buffer.allocUnsafe(MAX_BUFFER_SIZE);\n    }\n    writeEmptyPacket(cmd) {\n        const emptyBuf = Buffer.from([\n            0x00,\n            0x00,\n            0x00,\n            cmd.compressSequenceNo,\n            0x00,\n            0x00,\n            0x00\n        ]);\n        if (this.opts.debugCompress) {\n            this.opts.logger.network(`==> conn:${this.info.threadId ? this.info.threadId : -1} ${cmd ? cmd.constructor.name + \"(0,\" + this.pos + \")\" : \"unknown\"} (compress)\\n${Utils.log(this.opts, emptyBuf, 0, 7)}`);\n        }\n        this.writer(emptyBuf);\n    }\n}\nmodule.exports = CompressionOutputStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/io/compression-output-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/io/packet-input-stream.js":
/*!************************************************************!*\
  !*** ./node_modules/mariadb/lib/io/packet-input-stream.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst PacketNodeEncoded = __webpack_require__(/*! ./packet-node-encoded */ \"(rsc)/./node_modules/mariadb/lib/io/packet-node-encoded.js\");\nconst PacketIconvEncoded = __webpack_require__(/*! ./packet-node-iconv */ \"(rsc)/./node_modules/mariadb/lib/io/packet-node-iconv.js\");\nconst Collations = __webpack_require__(/*! ../const/collations */ \"(rsc)/./node_modules/mariadb/lib/const/collations.js\");\nconst Utils = __webpack_require__(/*! ../misc/utils */ \"(rsc)/./node_modules/mariadb/lib/misc/utils.js\");\n/**\n * MySQL packet parser\n * see : https://mariadb.com/kb/en/library/0-packet/\n */ class PacketInputStream {\n    constructor(unexpectedPacket, receiveQueue, out, opts, info){\n        this.unexpectedPacket = unexpectedPacket;\n        this.opts = opts;\n        this.receiveQueue = receiveQueue;\n        this.info = info;\n        this.out = out;\n        //in case packet is not complete\n        this.header = Buffer.allocUnsafe(4);\n        this.headerLen = 0;\n        this.packetLen = null;\n        this.remainingLen = null;\n        this.parts = null;\n        this.partsTotalLen = 0;\n        this.changeEncoding(this.opts.collation ? this.opts.collation : Collations.fromIndex(224));\n        this.changeDebug(this.opts.debug);\n        this.opts.on(\"collation\", this.changeEncoding.bind(this));\n        this.opts.on(\"debug\", this.changeDebug.bind(this));\n    }\n    changeEncoding(collation) {\n        this.encoding = collation.charset;\n        this.packet = Buffer.isEncoding(this.encoding) ? new PacketNodeEncoded(this.encoding) : new PacketIconvEncoded(this.encoding);\n    }\n    changeDebug(debug) {\n        this.receivePacket = debug ? this.receivePacketDebug : this.receivePacketBasic;\n    }\n    receivePacketDebug(packet) {\n        let cmd = this.currentCmd();\n        this.header[0] = this.packetLen & 0xff;\n        this.header[1] = this.packetLen >> 8 & 0xff;\n        this.header[2] = this.packetLen >> 16 & 0xff;\n        this.header[3] = this.sequenceNo;\n        if (packet) {\n            this.opts.logger.network(`<== conn:${this.info.threadId ? this.info.threadId : -1} ${cmd ? cmd.onPacketReceive ? cmd.constructor.name + \".\" + cmd.onPacketReceive.name : cmd.constructor.name : \"no command\"} (${packet.pos},${packet.end})\\n${Utils.log(this.opts, packet.buf, packet.pos, packet.end, this.header)}`);\n        }\n        if (!cmd) {\n            this.unexpectedPacket(packet);\n            return;\n        }\n        cmd.sequenceNo = this.sequenceNo;\n        cmd.onPacketReceive(packet, this.out, this.opts, this.info);\n        if (!cmd.onPacketReceive) {\n            this.receiveQueue.shift();\n        }\n    }\n    receivePacketBasic(packet) {\n        let cmd = this.currentCmd();\n        if (!cmd) {\n            this.unexpectedPacket(packet);\n            return;\n        }\n        cmd.sequenceNo = this.sequenceNo;\n        cmd.onPacketReceive(packet, this.out, this.opts, this.info);\n        if (!cmd.onPacketReceive) this.receiveQueue.shift();\n    }\n    resetHeader() {\n        this.remainingLen = null;\n        this.headerLen = 0;\n    }\n    currentCmd() {\n        let cmd;\n        while(cmd = this.receiveQueue.peek()){\n            if (cmd.onPacketReceive) return cmd;\n            this.receiveQueue.shift();\n        }\n        return null;\n    }\n    onData(chunk) {\n        let pos = 0;\n        let length;\n        const chunkLen = chunk.length;\n        do {\n            //read header\n            if (this.remainingLen) {\n                length = this.remainingLen;\n            } else if (this.headerLen === 0 && chunkLen - pos >= 4) {\n                this.packetLen = chunk[pos] + (chunk[pos + 1] << 8) + (chunk[pos + 2] << 16);\n                this.sequenceNo = chunk[pos + 3];\n                pos += 4;\n                length = this.packetLen;\n            } else {\n                length = null;\n                while(chunkLen - pos > 0){\n                    this.header[this.headerLen++] = chunk[pos++];\n                    if (this.headerLen === 4) {\n                        this.packetLen = this.header[0] + (this.header[1] << 8) + (this.header[2] << 16);\n                        this.sequenceNo = this.header[3];\n                        length = this.packetLen;\n                        break;\n                    }\n                }\n            }\n            if (length) {\n                if (chunkLen - pos >= length) {\n                    pos += length;\n                    if (!this.parts) {\n                        if (this.packetLen < 0xffffff) {\n                            this.receivePacket(this.packet.update(chunk, pos - length, pos));\n                            // fast path, knowing there is no parts\n                            // loop can be simplified until reaching the end of the packet.\n                            while(pos + 4 < chunkLen){\n                                this.packetLen = chunk[pos] + (chunk[pos + 1] << 8) + (chunk[pos + 2] << 16);\n                                this.sequenceNo = chunk[pos + 3];\n                                pos += 4;\n                                if (chunkLen - pos >= this.packetLen) {\n                                    pos += this.packetLen;\n                                    if (this.packetLen < 0xffffff) {\n                                        this.receivePacket(this.packet.update(chunk, pos - this.packetLen, pos));\n                                    } else {\n                                        this.parts = [\n                                            chunk.subarray(pos - this.packetLen, pos)\n                                        ];\n                                        this.partsTotalLen = this.packetLen;\n                                        break;\n                                    }\n                                } else {\n                                    const buf = chunk.subarray(pos, chunkLen);\n                                    if (!this.parts) {\n                                        this.parts = [\n                                            buf\n                                        ];\n                                        this.partsTotalLen = chunkLen - pos;\n                                    } else {\n                                        this.parts.push(buf);\n                                        this.partsTotalLen += chunkLen - pos;\n                                    }\n                                    this.remainingLen = this.packetLen - (chunkLen - pos);\n                                    return;\n                                }\n                            }\n                        } else {\n                            this.parts = [\n                                chunk.subarray(pos - length, pos)\n                            ];\n                            this.partsTotalLen = length;\n                        }\n                    } else {\n                        this.parts.push(chunk.subarray(pos - length, pos));\n                        this.partsTotalLen += length;\n                        if (this.packetLen < 0xffffff) {\n                            let buf = Buffer.concat(this.parts, this.partsTotalLen);\n                            this.parts = null;\n                            this.receivePacket(this.packet.update(buf, 0, this.partsTotalLen));\n                        }\n                    }\n                    this.resetHeader();\n                } else {\n                    const buf = chunk.subarray(pos, chunkLen);\n                    if (!this.parts) {\n                        this.parts = [\n                            buf\n                        ];\n                        this.partsTotalLen = chunkLen - pos;\n                    } else {\n                        this.parts.push(buf);\n                        this.partsTotalLen += chunkLen - pos;\n                    }\n                    this.remainingLen = length - (chunkLen - pos);\n                    return;\n                }\n            }\n        }while (pos < chunkLen);\n    }\n}\nmodule.exports = PacketInputStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/io/packet-input-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/io/packet-node-encoded.js":
/*!************************************************************!*\
  !*** ./node_modules/mariadb/lib/io/packet-node-encoded.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Packet = __webpack_require__(/*! ./packet */ \"(rsc)/./node_modules/mariadb/lib/io/packet.js\");\nclass PacketNodeEncoded extends Packet {\n    constructor(encoding){\n        super();\n        // using undefined for utf8 permit to avoid node.js searching\n        // for charset, using directly utf8 default one.\n        this.encoding = encoding === \"utf8\" ? undefined : encoding;\n    }\n    readStringLengthEncoded() {\n        const len = this.readUnsignedLength();\n        if (len === null) return null;\n        this.pos += len;\n        return this.buf.toString(this.encoding, this.pos - len, this.pos);\n    }\n    readString(buf, beg, len) {\n        return buf.toString(this.encoding, beg, beg + len);\n    }\n    subPacketLengthEncoded(len) {\n        this.skip(len);\n        return new PacketNodeEncoded(this.encoding).update(this.buf, this.pos - len, this.pos);\n    }\n    readStringRemaining() {\n        const str = this.buf.toString(this.encoding, this.pos, this.end);\n        this.pos = this.end;\n        return str;\n    }\n}\nmodule.exports = PacketNodeEncoded;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvaW8vcGFja2V0LW5vZGUtZW5jb2RlZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEO0FBRUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFFdkIsTUFBTUMsMEJBQTBCRjtJQUM5QkcsWUFBWUMsUUFBUSxDQUFFO1FBQ3BCLEtBQUs7UUFDTCw2REFBNkQ7UUFDN0QsZ0RBQWdEO1FBQ2hELElBQUksQ0FBQ0EsUUFBUSxHQUFHQSxhQUFhLFNBQVNDLFlBQVlEO0lBQ3BEO0lBRUFFLDBCQUEwQjtRQUN4QixNQUFNQyxNQUFNLElBQUksQ0FBQ0Msa0JBQWtCO1FBQ25DLElBQUlELFFBQVEsTUFBTSxPQUFPO1FBRXpCLElBQUksQ0FBQ0UsR0FBRyxJQUFJRjtRQUNaLE9BQU8sSUFBSSxDQUFDRyxHQUFHLENBQUNDLFFBQVEsQ0FBQyxJQUFJLENBQUNQLFFBQVEsRUFBRSxJQUFJLENBQUNLLEdBQUcsR0FBR0YsS0FBSyxJQUFJLENBQUNFLEdBQUc7SUFDbEU7SUFFQUcsV0FBV0YsR0FBRyxFQUFFRyxHQUFHLEVBQUVOLEdBQUcsRUFBRTtRQUN4QixPQUFPRyxJQUFJQyxRQUFRLENBQUMsSUFBSSxDQUFDUCxRQUFRLEVBQUVTLEtBQUtBLE1BQU1OO0lBQ2hEO0lBRUFPLHVCQUF1QlAsR0FBRyxFQUFFO1FBQzFCLElBQUksQ0FBQ1EsSUFBSSxDQUFDUjtRQUNWLE9BQU8sSUFBSUwsa0JBQWtCLElBQUksQ0FBQ0UsUUFBUSxFQUFFWSxNQUFNLENBQUMsSUFBSSxDQUFDTixHQUFHLEVBQUUsSUFBSSxDQUFDRCxHQUFHLEdBQUdGLEtBQUssSUFBSSxDQUFDRSxHQUFHO0lBQ3ZGO0lBRUFRLHNCQUFzQjtRQUNwQixNQUFNQyxNQUFNLElBQUksQ0FBQ1IsR0FBRyxDQUFDQyxRQUFRLENBQUMsSUFBSSxDQUFDUCxRQUFRLEVBQUUsSUFBSSxDQUFDSyxHQUFHLEVBQUUsSUFBSSxDQUFDVSxHQUFHO1FBQy9ELElBQUksQ0FBQ1YsR0FBRyxHQUFHLElBQUksQ0FBQ1UsR0FBRztRQUNuQixPQUFPRDtJQUNUO0FBQ0Y7QUFFQUUsT0FBT0MsT0FBTyxHQUFHbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZm5leHRqcy8uL25vZGVfbW9kdWxlcy9tYXJpYWRiL2xpYi9pby9wYWNrZXQtbm9kZS1lbmNvZGVkLmpzP2U4OTciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQYWNrZXQgPSByZXF1aXJlKCcuL3BhY2tldCcpO1xuXG5jbGFzcyBQYWNrZXROb2RlRW5jb2RlZCBleHRlbmRzIFBhY2tldCB7XG4gIGNvbnN0cnVjdG9yKGVuY29kaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvLyB1c2luZyB1bmRlZmluZWQgZm9yIHV0ZjggcGVybWl0IHRvIGF2b2lkIG5vZGUuanMgc2VhcmNoaW5nXG4gICAgLy8gZm9yIGNoYXJzZXQsIHVzaW5nIGRpcmVjdGx5IHV0ZjggZGVmYXVsdCBvbmUuXG4gICAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nID09PSAndXRmOCcgPyB1bmRlZmluZWQgOiBlbmNvZGluZztcbiAgfVxuXG4gIHJlYWRTdHJpbmdMZW5ndGhFbmNvZGVkKCkge1xuICAgIGNvbnN0IGxlbiA9IHRoaXMucmVhZFVuc2lnbmVkTGVuZ3RoKCk7XG4gICAgaWYgKGxlbiA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cbiAgICB0aGlzLnBvcyArPSBsZW47XG4gICAgcmV0dXJuIHRoaXMuYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIHRoaXMucG9zIC0gbGVuLCB0aGlzLnBvcyk7XG4gIH1cblxuICByZWFkU3RyaW5nKGJ1ZiwgYmVnLCBsZW4pIHtcbiAgICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIGJlZywgYmVnICsgbGVuKTtcbiAgfVxuXG4gIHN1YlBhY2tldExlbmd0aEVuY29kZWQobGVuKSB7XG4gICAgdGhpcy5za2lwKGxlbik7XG4gICAgcmV0dXJuIG5ldyBQYWNrZXROb2RlRW5jb2RlZCh0aGlzLmVuY29kaW5nKS51cGRhdGUodGhpcy5idWYsIHRoaXMucG9zIC0gbGVuLCB0aGlzLnBvcyk7XG4gIH1cblxuICByZWFkU3RyaW5nUmVtYWluaW5nKCkge1xuICAgIGNvbnN0IHN0ciA9IHRoaXMuYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIHRoaXMucG9zLCB0aGlzLmVuZCk7XG4gICAgdGhpcy5wb3MgPSB0aGlzLmVuZDtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGFja2V0Tm9kZUVuY29kZWQ7XG4iXSwibmFtZXMiOlsiUGFja2V0IiwicmVxdWlyZSIsIlBhY2tldE5vZGVFbmNvZGVkIiwiY29uc3RydWN0b3IiLCJlbmNvZGluZyIsInVuZGVmaW5lZCIsInJlYWRTdHJpbmdMZW5ndGhFbmNvZGVkIiwibGVuIiwicmVhZFVuc2lnbmVkTGVuZ3RoIiwicG9zIiwiYnVmIiwidG9TdHJpbmciLCJyZWFkU3RyaW5nIiwiYmVnIiwic3ViUGFja2V0TGVuZ3RoRW5jb2RlZCIsInNraXAiLCJ1cGRhdGUiLCJyZWFkU3RyaW5nUmVtYWluaW5nIiwic3RyIiwiZW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/io/packet-node-encoded.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/io/packet-node-iconv.js":
/*!**********************************************************!*\
  !*** ./node_modules/mariadb/lib/io/packet-node-iconv.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Packet = __webpack_require__(/*! ./packet */ \"(rsc)/./node_modules/mariadb/lib/io/packet.js\");\nconst Iconv = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\");\nclass PacketIconvEncoded extends Packet {\n    constructor(encoding){\n        super();\n        this.encoding = encoding;\n    }\n    readStringLengthEncoded() {\n        const len = this.readUnsignedLength();\n        if (len === null) return null;\n        this.pos += len;\n        return Iconv.decode(this.buf.subarray(this.pos - len, this.pos), this.encoding);\n    }\n    readString(buf, beg, len) {\n        return Iconv.decode(buf.subarray(beg, beg + len), this.encoding);\n    }\n    subPacketLengthEncoded(len) {\n        this.skip(len);\n        return new PacketIconvEncoded(this.encoding).update(this.buf, this.pos - len, this.pos);\n    }\n    readStringRemaining() {\n        const str = Iconv.decode(this.buf.subarray(this.pos, this.end), this.encoding);\n        this.pos = this.end;\n        return str;\n    }\n}\nmodule.exports = PacketIconvEncoded;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvaW8vcGFja2V0LW5vZGUtaWNvbnYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUV0QixNQUFNRSwyQkFBMkJIO0lBQy9CSSxZQUFZQyxRQUFRLENBQUU7UUFDcEIsS0FBSztRQUNMLElBQUksQ0FBQ0EsUUFBUSxHQUFHQTtJQUNsQjtJQUVBQywwQkFBMEI7UUFDeEIsTUFBTUMsTUFBTSxJQUFJLENBQUNDLGtCQUFrQjtRQUNuQyxJQUFJRCxRQUFRLE1BQU0sT0FBTztRQUV6QixJQUFJLENBQUNFLEdBQUcsSUFBSUY7UUFDWixPQUFPTCxNQUFNUSxNQUFNLENBQUMsSUFBSSxDQUFDQyxHQUFHLENBQUNDLFFBQVEsQ0FBQyxJQUFJLENBQUNILEdBQUcsR0FBR0YsS0FBSyxJQUFJLENBQUNFLEdBQUcsR0FBRyxJQUFJLENBQUNKLFFBQVE7SUFDaEY7SUFFQVEsV0FBV0YsR0FBRyxFQUFFRyxHQUFHLEVBQUVQLEdBQUcsRUFBRTtRQUN4QixPQUFPTCxNQUFNUSxNQUFNLENBQUNDLElBQUlDLFFBQVEsQ0FBQ0UsS0FBS0EsTUFBTVAsTUFBTSxJQUFJLENBQUNGLFFBQVE7SUFDakU7SUFFQVUsdUJBQXVCUixHQUFHLEVBQUU7UUFDMUIsSUFBSSxDQUFDUyxJQUFJLENBQUNUO1FBQ1YsT0FBTyxJQUFJSixtQkFBbUIsSUFBSSxDQUFDRSxRQUFRLEVBQUVZLE1BQU0sQ0FBQyxJQUFJLENBQUNOLEdBQUcsRUFBRSxJQUFJLENBQUNGLEdBQUcsR0FBR0YsS0FBSyxJQUFJLENBQUNFLEdBQUc7SUFDeEY7SUFFQVMsc0JBQXNCO1FBQ3BCLE1BQU1DLE1BQU1qQixNQUFNUSxNQUFNLENBQUMsSUFBSSxDQUFDQyxHQUFHLENBQUNDLFFBQVEsQ0FBQyxJQUFJLENBQUNILEdBQUcsRUFBRSxJQUFJLENBQUNXLEdBQUcsR0FBRyxJQUFJLENBQUNmLFFBQVE7UUFDN0UsSUFBSSxDQUFDSSxHQUFHLEdBQUcsSUFBSSxDQUFDVyxHQUFHO1FBQ25CLE9BQU9EO0lBQ1Q7QUFDRjtBQUVBRSxPQUFPQyxPQUFPLEdBQUduQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvbGliL2lvL3BhY2tldC1ub2RlLWljb252LmpzP2ZjMDUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQYWNrZXQgPSByZXF1aXJlKCcuL3BhY2tldCcpO1xuY29uc3QgSWNvbnYgPSByZXF1aXJlKCdpY29udi1saXRlJyk7XG5cbmNsYXNzIFBhY2tldEljb252RW5jb2RlZCBleHRlbmRzIFBhY2tldCB7XG4gIGNvbnN0cnVjdG9yKGVuY29kaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIH1cblxuICByZWFkU3RyaW5nTGVuZ3RoRW5jb2RlZCgpIHtcbiAgICBjb25zdCBsZW4gPSB0aGlzLnJlYWRVbnNpZ25lZExlbmd0aCgpO1xuICAgIGlmIChsZW4gPT09IG51bGwpIHJldHVybiBudWxsO1xuXG4gICAgdGhpcy5wb3MgKz0gbGVuO1xuICAgIHJldHVybiBJY29udi5kZWNvZGUodGhpcy5idWYuc3ViYXJyYXkodGhpcy5wb3MgLSBsZW4sIHRoaXMucG9zKSwgdGhpcy5lbmNvZGluZyk7XG4gIH1cblxuICByZWFkU3RyaW5nKGJ1ZiwgYmVnLCBsZW4pIHtcbiAgICByZXR1cm4gSWNvbnYuZGVjb2RlKGJ1Zi5zdWJhcnJheShiZWcsIGJlZyArIGxlbiksIHRoaXMuZW5jb2RpbmcpO1xuICB9XG5cbiAgc3ViUGFja2V0TGVuZ3RoRW5jb2RlZChsZW4pIHtcbiAgICB0aGlzLnNraXAobGVuKTtcbiAgICByZXR1cm4gbmV3IFBhY2tldEljb252RW5jb2RlZCh0aGlzLmVuY29kaW5nKS51cGRhdGUodGhpcy5idWYsIHRoaXMucG9zIC0gbGVuLCB0aGlzLnBvcyk7XG4gIH1cblxuICByZWFkU3RyaW5nUmVtYWluaW5nKCkge1xuICAgIGNvbnN0IHN0ciA9IEljb252LmRlY29kZSh0aGlzLmJ1Zi5zdWJhcnJheSh0aGlzLnBvcywgdGhpcy5lbmQpLCB0aGlzLmVuY29kaW5nKTtcbiAgICB0aGlzLnBvcyA9IHRoaXMuZW5kO1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYWNrZXRJY29udkVuY29kZWQ7XG4iXSwibmFtZXMiOlsiUGFja2V0IiwicmVxdWlyZSIsIkljb252IiwiUGFja2V0SWNvbnZFbmNvZGVkIiwiY29uc3RydWN0b3IiLCJlbmNvZGluZyIsInJlYWRTdHJpbmdMZW5ndGhFbmNvZGVkIiwibGVuIiwicmVhZFVuc2lnbmVkTGVuZ3RoIiwicG9zIiwiZGVjb2RlIiwiYnVmIiwic3ViYXJyYXkiLCJyZWFkU3RyaW5nIiwiYmVnIiwic3ViUGFja2V0TGVuZ3RoRW5jb2RlZCIsInNraXAiLCJ1cGRhdGUiLCJyZWFkU3RyaW5nUmVtYWluaW5nIiwic3RyIiwiZW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/io/packet-node-iconv.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/io/packet-output-stream.js":
/*!*************************************************************!*\
  !*** ./node_modules/mariadb/lib/io/packet-output-stream.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Iconv = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\");\nconst Utils = __webpack_require__(/*! ../misc/utils */ \"(rsc)/./node_modules/mariadb/lib/misc/utils.js\");\nconst Errors = __webpack_require__(/*! ../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst Collations = __webpack_require__(/*! ../const/collations */ \"(rsc)/./node_modules/mariadb/lib/const/collations.js\");\nconst QUOTE = 0x27;\nconst DBL_QUOTE = 0x22;\nconst ZERO_BYTE = 0x00;\nconst SLASH = 0x5c;\n//increase by level to avoid buffer copy.\nconst SMALL_BUFFER_SIZE = 256;\nconst MEDIUM_BUFFER_SIZE = 16384; //16k\nconst LARGE_BUFFER_SIZE = 131072; //128k\nconst BIG_BUFFER_SIZE = 1048576; //1M\nconst MAX_BUFFER_SIZE = 16777219; //16M + 4\nconst CHARS_GLOBAL_REGEXP = /[\\0\\\"\\'\\\\\\b\\n\\r\\t\\u001A]/g; // eslint-disable-line no-control-regex\n/**\n * MySQL packet builder.\n *\n * @param opts    options\n * @param info    connection info\n * @constructor\n */ class PacketOutputStream {\n    constructor(opts, info){\n        this.opts = opts;\n        this.info = info;\n        this.pos = 4;\n        this.markPos = -1;\n        this.bufContainDataAfterMark = false;\n        this.cmdLength = 0;\n        this.buf = Buffer.allocUnsafe(SMALL_BUFFER_SIZE);\n        this.maxAllowedPacket = opts.maxAllowedPacket || 4194304;\n        this.maxPacketLength = Math.min(MAX_BUFFER_SIZE, this.maxAllowedPacket + 4);\n        this.changeEncoding(this.opts.collation ? this.opts.collation : Collations.fromIndex(224));\n        this.changeDebug(this.opts.debug);\n        this.opts.on(\"collation\", this.changeEncoding.bind(this));\n        this.opts.on(\"debug\", this.changeDebug.bind(this));\n    }\n    changeEncoding(collation) {\n        this.encoding = collation.charset;\n        if (this.encoding === \"utf8\") {\n            this.writeString = this.writeDefaultBufferString;\n            this.encodeString = this.encodeNodeString;\n            this.writeLengthEncodedString = this.writeDefaultBufferLengthEncodedString;\n            this.writeStringEscapeQuote = this.writeUtf8StringEscapeQuote;\n        } else if (Buffer.isEncoding(this.encoding)) {\n            this.writeString = this.writeDefaultBufferString;\n            this.encodeString = this.encodeNodeString;\n            this.writeLengthEncodedString = this.writeDefaultBufferLengthEncodedString;\n            this.writeStringEscapeQuote = this.writeDefaultStringEscapeQuote;\n        } else {\n            this.writeString = this.writeDefaultIconvString;\n            this.encodeString = this.encodeIconvString;\n            this.writeLengthEncodedString = this.writeDefaultIconvLengthEncodedString;\n            this.writeStringEscapeQuote = this.writeDefaultStringEscapeQuote;\n        }\n    }\n    changeDebug(debug) {\n        this.debug = debug;\n        this.flushBuffer = debug ? this.flushBufferDebug : this.flushBufferBasic;\n        this.fastFlush = debug ? this.fastFlushDebug : this.fastFlushBasic;\n    }\n    setStream(stream) {\n        this.stream = stream;\n    }\n    growBuffer(len) {\n        let newCapacity;\n        if (len + this.pos < MEDIUM_BUFFER_SIZE) {\n            newCapacity = MEDIUM_BUFFER_SIZE;\n        } else if (len + this.pos < LARGE_BUFFER_SIZE) {\n            newCapacity = LARGE_BUFFER_SIZE;\n        } else if (len + this.pos < BIG_BUFFER_SIZE) {\n            newCapacity = BIG_BUFFER_SIZE;\n        } else {\n            newCapacity = MAX_BUFFER_SIZE;\n        }\n        if (len + this.pos > newCapacity) {\n            if (this.markPos !== -1) {\n                // buf is > 16M with mark.\n                // flush until mark, reset pos at beginning\n                this.flushBufferStopAtMark();\n                if (len + this.pos <= this.buf.length) {\n                    return;\n                }\n                this.growBuffer(len);\n            }\n        }\n        let newBuf = Buffer.allocUnsafe(newCapacity);\n        this.buf.copy(newBuf, 0, 0, this.pos);\n        this.buf = newBuf;\n    }\n    mark() {\n        this.markPos = this.pos;\n    }\n    isMarked() {\n        return this.markPos !== -1;\n    }\n    hasFlushed() {\n        return this.cmd.sequenceNo !== -1;\n    }\n    bufIsDataAfterMark() {\n        return this.bufContainDataAfterMark;\n    }\n    bufIsAfterMaxPacketLength() {\n        return this.pos > this.maxPacketLength;\n    }\n    /**\n   * Reset mark flag and send bytes after mark flag.\n   *\n   * @return buffer after mark flag\n   */ resetMark() {\n        this.pos = this.markPos;\n        this.markPos = -1;\n        if (this.bufContainDataAfterMark) {\n            const data = Buffer.allocUnsafe(this.pos - 4);\n            this.buf.copy(data, 0, 4, this.pos);\n            this.cmd.sequenceNo = -1;\n            this.cmd.compressSequenceNo = -1;\n            this.bufContainDataAfterMark = false;\n            return data;\n        }\n        return null;\n    }\n    /**\n   * Send packet to socket.\n   *\n   * @throws IOException if socket error occur.\n   */ flush() {\n        this.flushBuffer(true, 0);\n        this.buf = Buffer.allocUnsafe(SMALL_BUFFER_SIZE);\n        this.cmd.sequenceNo = -1;\n        this.cmd.compressSequenceNo = -1;\n        this.cmdLength = 0;\n        this.markPos = -1;\n    }\n    flushPacket() {\n        this.flushBuffer(false, 0);\n        this.buf = Buffer.allocUnsafe(SMALL_BUFFER_SIZE);\n        this.cmdLength = 0;\n        this.markPos = -1;\n    }\n    startPacket(cmd) {\n        this.cmd = cmd;\n        this.pos = 4;\n    }\n    writeInt8(value) {\n        if (this.pos + 1 >= this.buf.length) {\n            if (this.pos >= MAX_BUFFER_SIZE && !this.bufContainDataAfterMark) {\n                //buffer is more than a Packet, must flushBuffer()\n                this.flushBuffer(false, 1);\n            } else this.growBuffer(1);\n        }\n        this.buf[this.pos++] = value;\n    }\n    writeInt16(value) {\n        if (this.pos + 2 >= this.buf.length) {\n            let b = Buffer.allocUnsafe(2);\n            b[0] = value;\n            b[1] = value >>> 8;\n            this.writeBuffer(b, 0, 2);\n            return;\n        }\n        this.buf[this.pos] = value;\n        this.buf[this.pos + 1] = value >> 8;\n        this.pos += 2;\n    }\n    writeInt16AtPos(initPos) {\n        this.buf[initPos] = this.pos - initPos - 2;\n        this.buf[initPos + 1] = this.pos - initPos - 2 >> 8;\n    }\n    writeInt24(value) {\n        if (this.pos + 3 >= this.buf.length) {\n            //not enough space remaining\n            let arr = Buffer.allocUnsafe(3);\n            arr[0] = value;\n            arr[1] = value >> 8;\n            arr[2] = value >> 16;\n            this.writeBuffer(arr, 0, 3);\n            return;\n        }\n        this.buf[this.pos] = value;\n        this.buf[this.pos + 1] = value >> 8;\n        this.buf[this.pos + 2] = value >> 16;\n        this.pos += 3;\n    }\n    writeInt32(value) {\n        if (this.pos + 4 >= this.buf.length) {\n            //not enough space remaining\n            let arr = Buffer.allocUnsafe(4);\n            arr.writeInt32LE(value, 0);\n            this.writeBuffer(arr, 0, 4);\n            return;\n        }\n        this.buf[this.pos] = value;\n        this.buf[this.pos + 1] = value >> 8;\n        this.buf[this.pos + 2] = value >> 16;\n        this.buf[this.pos + 3] = value >> 24;\n        this.pos += 4;\n    }\n    writeBigInt(value) {\n        if (this.pos + 8 >= this.buf.length) {\n            //not enough space remaining\n            let arr = Buffer.allocUnsafe(8);\n            arr.writeBigInt64LE(value, 0);\n            this.writeBuffer(arr, 0, 8);\n            return;\n        }\n        this.buf.writeBigInt64LE(value, this.pos);\n        this.pos += 8;\n    }\n    writeDouble(value) {\n        if (this.pos + 8 >= this.buf.length) {\n            //not enough space remaining\n            let arr = Buffer.allocUnsafe(8);\n            arr.writeDoubleLE(value, 0);\n            this.writeBuffer(arr, 0, 8);\n            return;\n        }\n        this.buf.writeDoubleLE(value, this.pos);\n        this.pos += 8;\n    }\n    writeLengthCoded(len) {\n        if (len < 0xfb) {\n            this.writeInt8(len);\n            return;\n        }\n        if (len < 65536) {\n            //max length is len < 0xffff\n            this.writeInt8(0xfc);\n            this.writeInt16(len);\n        } else if (len < 16777216) {\n            this.writeInt8(0xfd);\n            this.writeInt24(len);\n        } else {\n            this.writeInt8(0xfe);\n            this.writeBigInt(BigInt(len));\n        }\n    }\n    writeBuffer(arr, off, len) {\n        if (len > this.buf.length - this.pos) {\n            if (this.buf.length !== MAX_BUFFER_SIZE) {\n                this.growBuffer(len);\n            }\n            //max buffer size\n            if (len > this.buf.length - this.pos) {\n                if (this.markPos !== -1) {\n                    this.growBuffer(len);\n                    if (this.markPos !== -1) {\n                        this.flushBufferStopAtMark();\n                    }\n                }\n                if (len > this.buf.length - this.pos) {\n                    //not enough space in buffer, will stream :\n                    // fill buffer and flush until all data are snd\n                    let remainingLen = len;\n                    while(true){\n                        //filling buffer\n                        let lenToFillBuffer = Math.min(MAX_BUFFER_SIZE - this.pos, remainingLen);\n                        arr.copy(this.buf, this.pos, off, off + lenToFillBuffer);\n                        remainingLen -= lenToFillBuffer;\n                        off += lenToFillBuffer;\n                        this.pos += lenToFillBuffer;\n                        if (remainingLen === 0) return;\n                        this.flushBuffer(false, remainingLen);\n                    }\n                }\n            }\n        }\n        // node.js copy is fast only when copying big buffer.\n        // quick array copy is multiple time faster for small copy\n        if (len > 50) {\n            arr.copy(this.buf, this.pos, off, off + len);\n            this.pos += len;\n        } else {\n            for(let i = 0; i < len; i++){\n                this.buf[this.pos++] = arr[off + i];\n            }\n        }\n    }\n    /**\n   * Write ascii string to socket (no escaping)\n   *\n   * @param str                string\n   */ writeStringAscii(str) {\n        let len = str.length;\n        //not enough space remaining\n        if (len >= this.buf.length - this.pos) {\n            let strBuf = Buffer.from(str, \"ascii\");\n            this.writeBuffer(strBuf, 0, strBuf.length);\n            return;\n        }\n        for(let off = 0; off < len;){\n            this.buf[this.pos++] = str.charCodeAt(off++);\n        }\n    }\n    writeLengthEncodedBuffer(buffer) {\n        const len = buffer.length;\n        this.writeLengthCoded(len);\n        this.writeBuffer(buffer, 0, len);\n    }\n    writeUtf8StringEscapeQuote(str) {\n        const charsLength = str.length;\n        //not enough space remaining\n        if (charsLength * 3 + 2 >= this.buf.length - this.pos) {\n            const arr = Buffer.from(str, \"utf8\");\n            this.writeInt8(QUOTE);\n            this.writeBufferEscape(arr);\n            this.writeInt8(QUOTE);\n            return;\n        }\n        //create UTF-8 byte array\n        //since javascript char are internally using UTF-16 using surrogate's pattern, 4 bytes unicode characters will\n        //represent 2 characters : example \"\\uD83C\\uDFA4\" = 🎤 unicode 8 \"no microphones\"\n        //so max size is 3 * charLength\n        //(escape characters are 1 byte encoded, so length might only be 2 when escaped)\n        // + 2 for the quotes for text protocol\n        let charsOffset = 0;\n        let currChar;\n        this.buf[this.pos++] = QUOTE;\n        //quick loop if only ASCII chars for faster escape\n        for(; charsOffset < charsLength && (currChar = str.charCodeAt(charsOffset)) < 0x80; charsOffset++){\n            if (currChar === SLASH || currChar === QUOTE || currChar === ZERO_BYTE || currChar === DBL_QUOTE) {\n                this.buf[this.pos++] = SLASH;\n            }\n            this.buf[this.pos++] = currChar;\n        }\n        //if quick loop not finished\n        while(charsOffset < charsLength){\n            currChar = str.charCodeAt(charsOffset++);\n            if (currChar < 0x80) {\n                if (currChar === SLASH || currChar === QUOTE || currChar === ZERO_BYTE || currChar === DBL_QUOTE) {\n                    this.buf[this.pos++] = SLASH;\n                }\n                this.buf[this.pos++] = currChar;\n            } else if (currChar < 0x800) {\n                this.buf[this.pos++] = 0xc0 | currChar >> 6;\n                this.buf[this.pos++] = 0x80 | currChar & 0x3f;\n            } else if (currChar >= 0xd800 && currChar < 0xe000) {\n                //reserved for surrogate - see https://en.wikipedia.org/wiki/UTF-16\n                if (currChar < 0xdc00) {\n                    //is high surrogate\n                    if (charsOffset + 1 > charsLength) {\n                        this.buf[this.pos++] = 0x3f;\n                    } else {\n                        const nextChar = str.charCodeAt(charsOffset);\n                        if (nextChar >= 0xdc00 && nextChar < 0xe000) {\n                            //is low surrogate\n                            const surrogatePairs = (currChar << 10) + nextChar + (0x010000 - (0xd800 << 10) - 0xdc00);\n                            this.buf[this.pos++] = 0xf0 | surrogatePairs >> 18;\n                            this.buf[this.pos++] = 0x80 | surrogatePairs >> 12 & 0x3f;\n                            this.buf[this.pos++] = 0x80 | surrogatePairs >> 6 & 0x3f;\n                            this.buf[this.pos++] = 0x80 | surrogatePairs & 0x3f;\n                            charsOffset++;\n                        } else {\n                            //must have low surrogate\n                            this.buf[this.pos++] = 0x3f;\n                        }\n                    }\n                } else {\n                    //low surrogate without high surrogate before\n                    this.buf[this.pos++] = 0x3f;\n                }\n            } else {\n                this.buf[this.pos++] = 0xe0 | currChar >> 12;\n                this.buf[this.pos++] = 0x80 | currChar >> 6 & 0x3f;\n                this.buf[this.pos++] = 0x80 | currChar & 0x3f;\n            }\n        }\n        this.buf[this.pos++] = QUOTE;\n    }\n    encodeIconvString(str) {\n        return Iconv.encode(str, this.encoding);\n    }\n    encodeNodeString(str) {\n        return Buffer.from(str, this.encoding);\n    }\n    writeDefaultBufferString(str) {\n        //javascript use UCS-2 or UTF-16 string internal representation\n        //that means that string to byte will be a maximum of * 3\n        // (4 bytes utf-8 are represented on 2 UTF-16 characters)\n        if (str.length * 3 < this.buf.length - this.pos) {\n            this.pos += this.buf.write(str, this.pos, this.encoding);\n            return;\n        }\n        //checking real length\n        let byteLength = Buffer.byteLength(str, this.encoding);\n        if (byteLength > this.buf.length - this.pos) {\n            if (this.buf.length < MAX_BUFFER_SIZE) {\n                this.growBuffer(byteLength);\n            }\n            if (byteLength > this.buf.length - this.pos) {\n                //not enough space in buffer, will stream :\n                let strBuf = Buffer.from(str, this.encoding);\n                this.writeBuffer(strBuf, 0, strBuf.length);\n                return;\n            }\n        }\n        this.pos += this.buf.write(str, this.pos, this.encoding);\n    }\n    writeDefaultBufferLengthEncodedString(str) {\n        //javascript use UCS-2 or UTF-16 string internal representation\n        //that means that string to byte will be a maximum of * 3\n        // (4 bytes utf-8 are represented on 2 UTF-16 characters)\n        //checking real length\n        let byteLength = Buffer.byteLength(str, this.encoding);\n        this.writeLengthCoded(byteLength);\n        if (byteLength > this.buf.length - this.pos) {\n            if (this.buf.length < MAX_BUFFER_SIZE) {\n                this.growBuffer(byteLength);\n            }\n            if (byteLength > this.buf.length - this.pos) {\n                //not enough space in buffer, will stream :\n                let strBuf = Buffer.from(str, this.encoding);\n                this.writeBuffer(strBuf, 0, strBuf.length);\n                return;\n            }\n        }\n        this.pos += this.buf.write(str, this.pos, this.encoding);\n    }\n    writeDefaultIconvString(str) {\n        let buf = Iconv.encode(str, this.encoding);\n        this.writeBuffer(buf, 0, buf.length);\n    }\n    writeDefaultIconvLengthEncodedString(str) {\n        let buf = Iconv.encode(str, this.encoding);\n        this.writeLengthCoded(buf.length);\n        this.writeBuffer(buf, 0, buf.length);\n    }\n    /**\n   * Parameters need to be properly escaped :\n   * following characters are to be escaped by \"\\\" :\n   * - \\0\n   * - \\\\\n   * - \\'\n   * - \\\"\n   * regex split part of string writing part, and escaping special char.\n   * Those chars are <= 7f meaning that this will work even with multi-byte encoding\n   *\n   * @param str string to escape.\n   */ writeDefaultStringEscapeQuote(str) {\n        this.writeInt8(QUOTE);\n        let match;\n        let lastIndex = 0;\n        while((match = CHARS_GLOBAL_REGEXP.exec(str)) !== null){\n            this.writeString(str.slice(lastIndex, match.index));\n            this.writeInt8(SLASH);\n            this.writeInt8(match[0].charCodeAt(0));\n            lastIndex = CHARS_GLOBAL_REGEXP.lastIndex;\n        }\n        if (lastIndex === 0) {\n            // Nothing was escaped\n            this.writeString(str);\n            this.writeInt8(QUOTE);\n            return;\n        }\n        if (lastIndex < str.length) {\n            this.writeString(str.slice(lastIndex));\n        }\n        this.writeInt8(QUOTE);\n    }\n    writeBinaryDate(date) {\n        const year = date.getFullYear();\n        const mon = date.getMonth() + 1;\n        const day = date.getDate();\n        const hour = date.getHours();\n        const min = date.getMinutes();\n        const sec = date.getSeconds();\n        const ms = date.getMilliseconds();\n        let len = ms === 0 ? 7 : 11;\n        //not enough space remaining\n        if (len + 1 > this.buf.length - this.pos) {\n            let tmpBuf = Buffer.allocUnsafe(len + 1);\n            tmpBuf[0] = len;\n            tmpBuf[1] = year;\n            tmpBuf[2] = year >>> 8;\n            tmpBuf[3] = mon;\n            tmpBuf[4] = day;\n            tmpBuf[5] = hour;\n            tmpBuf[6] = min;\n            tmpBuf[7] = sec;\n            if (ms !== 0) {\n                const micro = ms * 1000;\n                tmpBuf[8] = micro;\n                tmpBuf[9] = micro >>> 8;\n                tmpBuf[10] = micro >>> 16;\n                tmpBuf[11] = micro >>> 24;\n            }\n            this.writeBuffer(tmpBuf, 0, len + 1);\n            return;\n        }\n        this.buf[this.pos] = len;\n        this.buf[this.pos + 1] = year;\n        this.buf[this.pos + 2] = year >>> 8;\n        this.buf[this.pos + 3] = mon;\n        this.buf[this.pos + 4] = day;\n        this.buf[this.pos + 5] = hour;\n        this.buf[this.pos + 6] = min;\n        this.buf[this.pos + 7] = sec;\n        if (ms !== 0) {\n            const micro = ms * 1000;\n            this.buf[this.pos + 8] = micro;\n            this.buf[this.pos + 9] = micro >>> 8;\n            this.buf[this.pos + 10] = micro >>> 16;\n            this.buf[this.pos + 11] = micro >>> 24;\n        }\n        this.pos += len + 1;\n    }\n    writeBufferEscape(val) {\n        let valLen = val.length;\n        if (valLen * 2 > this.buf.length - this.pos) {\n            //makes buffer bigger (up to 16M)\n            if (this.buf.length !== MAX_BUFFER_SIZE) this.growBuffer(valLen * 2);\n            //data may still be bigger than buffer.\n            //must flush buffer when full (and reset position to 4)\n            if (valLen * 2 > this.buf.length - this.pos) {\n                //not enough space in buffer, will fill buffer\n                for(let i = 0; i < valLen; i++){\n                    switch(val[i]){\n                        case QUOTE:\n                        case SLASH:\n                        case DBL_QUOTE:\n                        case ZERO_BYTE:\n                            if (this.pos >= this.buf.length) this.flushBuffer(false, (valLen - i) * 2);\n                            this.buf[this.pos++] = SLASH; //add escape slash\n                    }\n                    if (this.pos >= this.buf.length) this.flushBuffer(false, (valLen - i) * 2);\n                    this.buf[this.pos++] = val[i];\n                }\n                return;\n            }\n        }\n        //sure to have enough place to use buffer directly\n        for(let i = 0; i < valLen; i++){\n            switch(val[i]){\n                case QUOTE:\n                case SLASH:\n                case DBL_QUOTE:\n                case ZERO_BYTE:\n                    this.buf[this.pos++] = SLASH; //add escape slash\n            }\n            this.buf[this.pos++] = val[i];\n        }\n    }\n    /**\n   * Count query size. If query size is greater than max_allowed_packet and nothing has been already\n   * send, throw an exception to avoid having the connection closed.\n   *\n   * @param length additional length to query size\n   * @param info current connection information\n   * @throws Error if query has not to be send.\n   */ checkMaxAllowedLength(length, info) {\n        if (this.cmdLength + length >= this.maxAllowedPacket) {\n            // launch exception only if no packet has been send.\n            return Errors.createFatalError(`query size (${this.cmdLength + length}) is >= to max_allowed_packet (${this.maxAllowedPacket})`, Errors.ER_MAX_ALLOWED_PACKET, info);\n        }\n        return null;\n    }\n    /**\n   * Indicate if buffer contain any data.\n   * @returns {boolean}\n   */ isEmpty() {\n        return this.pos <= 4;\n    }\n    /**\n   * Flush the internal buffer.\n   */ flushBufferDebug(commandEnd, remainingLen) {\n        if (this.pos > 4) {\n            this.buf[0] = this.pos - 4;\n            this.buf[1] = this.pos - 4 >>> 8;\n            this.buf[2] = this.pos - 4 >>> 16;\n            this.buf[3] = ++this.cmd.sequenceNo;\n            this.stream.writeBuf(this.buf.subarray(0, this.pos), this.cmd);\n            this.stream.flush(true, this.cmd);\n            this.cmdLength += this.pos - 4;\n            this.opts.logger.network(`==> conn:${this.info.threadId ? this.info.threadId : -1} ${this.cmd.constructor.name + \"(0,\" + this.pos + \")\"}\\n${Utils.log(this.opts, this.buf, 0, this.pos)}`);\n            if (commandEnd && this.pos === MAX_BUFFER_SIZE) {\n                //if last packet fill the max size, must send an empty com to indicate that command end.\n                this.writeEmptyPacket();\n            }\n            this.pos = 4;\n        }\n    }\n    /**\n   * Flush to last mark.\n   */ flushBufferStopAtMark() {\n        const end = this.pos;\n        this.pos = this.markPos;\n        const tmpBuf = Buffer.allocUnsafe(Math.max(SMALL_BUFFER_SIZE, end + 4 - this.pos));\n        this.buf.copy(tmpBuf, 4, this.markPos, end);\n        this.flushBuffer(true, end - this.pos);\n        this.cmdLength = 0;\n        this.buf = tmpBuf;\n        this.pos = 4 + end - this.markPos;\n        this.markPos = -1;\n        this.bufContainDataAfterMark = true;\n    }\n    flushBufferBasic(commandEnd, remainingLen) {\n        this.buf[0] = this.pos - 4;\n        this.buf[1] = this.pos - 4 >>> 8;\n        this.buf[2] = this.pos - 4 >>> 16;\n        this.buf[3] = ++this.cmd.sequenceNo;\n        this.stream.writeBuf(this.buf.subarray(0, this.pos), this.cmd);\n        this.stream.flush(true, this.cmd);\n        this.cmdLength += this.pos - 4;\n        if (commandEnd && this.pos === MAX_BUFFER_SIZE) {\n            //if last packet fill the max size, must send an empty com to indicate that command end.\n            this.writeEmptyPacket();\n        }\n        this.pos = 4;\n    }\n    fastFlushDebug(cmd, packet) {\n        this.stream.writeBuf(packet, cmd);\n        this.stream.flush(true, cmd);\n        this.cmdLength += packet.length;\n        this.opts.logger.network(`==> conn:${this.info.threadId ? this.info.threadId : -1} ${cmd.constructor.name + \"(0,\" + packet.length + \")\"}\\n${Utils.log(this.opts, packet, 0, packet.length)}`);\n        this.cmdLength = 0;\n        this.markPos = -1;\n    }\n    fastFlushBasic(cmd, packet) {\n        this.stream.writeBuf(packet, cmd);\n        this.stream.flush(true, cmd);\n        this.cmdLength = 0;\n        this.markPos = -1;\n    }\n    writeEmptyPacket() {\n        const emptyBuf = Buffer.from([\n            0x00,\n            0x00,\n            0x00,\n            ++this.cmd.sequenceNo\n        ]);\n        if (this.debug) {\n            this.opts.logger.network(`==> conn:${this.info.threadId ? this.info.threadId : -1} ${this.cmd.constructor.name}(0,4)\\n${Utils.log(this.opts, emptyBuf, 0, 4)}`);\n        }\n        this.stream.writeBuf(emptyBuf, this.cmd);\n        this.stream.flush(true, this.cmd);\n        this.cmdLength = 0;\n    }\n}\nmodule.exports = PacketOutputStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/io/packet-output-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/io/packet.js":
/*!***********************************************!*\
  !*** ./node_modules/mariadb/lib/io/packet.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Errors = __webpack_require__(/*! ../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\n/**\n * Object to easily parse buffer.\n * Packet are MUTABLE (buffer are changed, to avoid massive packet object creation).\n * Use clone() in case immutability is required\n *\n */ class Packet {\n    update(buf, pos, end) {\n        this.buf = buf;\n        this.pos = pos;\n        this.end = end;\n        return this;\n    }\n    skip(n) {\n        this.pos += n;\n    }\n    readGeometry(defaultVal) {\n        const geoBuf = this.readBufferLengthEncoded();\n        if (geoBuf === null || geoBuf.length === 0) {\n            return defaultVal;\n        }\n        let geoPos = 4;\n        return readGeometryObject(false);\n        function parseCoordinates(byteOrder) {\n            geoPos += 16;\n            const x = byteOrder ? geoBuf.readDoubleLE(geoPos - 16) : geoBuf.readDoubleBE(geoPos - 16);\n            const y = byteOrder ? geoBuf.readDoubleLE(geoPos - 8) : geoBuf.readDoubleBE(geoPos - 8);\n            return [\n                x,\n                y\n            ];\n        }\n        function readGeometryObject(inner) {\n            const byteOrder = geoBuf[geoPos++];\n            const wkbType = byteOrder ? geoBuf.readInt32LE(geoPos) : geoBuf.readInt32BE(geoPos);\n            geoPos += 4;\n            switch(wkbType){\n                case 1:\n                    const coords = parseCoordinates(byteOrder);\n                    if (inner) return coords;\n                    return {\n                        type: \"Point\",\n                        coordinates: coords\n                    };\n                case 2:\n                    const pointNumber = byteOrder ? geoBuf.readInt32LE(geoPos) : geoBuf.readInt32BE(geoPos);\n                    geoPos += 4;\n                    let coordinates = [];\n                    for(let i = 0; i < pointNumber; i++){\n                        coordinates.push(parseCoordinates(byteOrder));\n                    }\n                    if (inner) return coordinates;\n                    return {\n                        type: \"LineString\",\n                        coordinates: coordinates\n                    };\n                case 3:\n                    let polygonCoordinates = [];\n                    const numRings = byteOrder ? geoBuf.readInt32LE(geoPos) : geoBuf.readInt32BE(geoPos);\n                    geoPos += 4;\n                    for(let ring = 0; ring < numRings; ring++){\n                        const pointNumber = byteOrder ? geoBuf.readInt32LE(geoPos) : geoBuf.readInt32BE(geoPos);\n                        geoPos += 4;\n                        let linesCoordinates = [];\n                        for(let i = 0; i < pointNumber; i++){\n                            linesCoordinates.push(parseCoordinates(byteOrder));\n                        }\n                        polygonCoordinates.push(linesCoordinates);\n                    }\n                    if (inner) return polygonCoordinates;\n                    return {\n                        type: \"Polygon\",\n                        coordinates: polygonCoordinates\n                    };\n                case 4:\n                    return {\n                        type: \"MultiPoint\",\n                        coordinates: parseGeomArray(byteOrder, true)\n                    };\n                case 5:\n                    return {\n                        type: \"MultiLineString\",\n                        coordinates: parseGeomArray(byteOrder, true)\n                    };\n                case 6:\n                    return {\n                        type: \"MultiPolygon\",\n                        coordinates: parseGeomArray(byteOrder, true)\n                    };\n                case 7:\n                    return {\n                        type: \"GeometryCollection\",\n                        geometries: parseGeomArray(byteOrder, false)\n                    };\n            }\n            return null;\n        }\n        function parseGeomArray(byteOrder, inner) {\n            let coordinates = [];\n            const number = byteOrder ? geoBuf.readInt32LE(geoPos) : geoBuf.readInt32BE(geoPos);\n            geoPos += 4;\n            for(let i = 0; i < number; i++){\n                coordinates.push(readGeometryObject(inner));\n            }\n            return coordinates;\n        }\n    }\n    peek() {\n        return this.buf[this.pos];\n    }\n    remaining() {\n        return this.end - this.pos > 0;\n    }\n    readInt8() {\n        const val = this.buf[this.pos++];\n        return val | (val & 2 ** 7) * 0x1fffffe;\n    }\n    readUInt8() {\n        return this.buf[this.pos++];\n    }\n    readInt16() {\n        const first = this.buf[this.pos++];\n        const last = this.buf[this.pos++];\n        const val = first + last * 2 ** 8;\n        return val | (val & 2 ** 15) * 0x1fffe;\n    }\n    readUInt16() {\n        return this.buf[this.pos++] + this.buf[this.pos++] * 2 ** 8;\n    }\n    readInt24() {\n        const first = this.buf[this.pos];\n        const last = this.buf[this.pos + 2];\n        const val = first + this.buf[this.pos + 1] * 2 ** 8 + last * 2 ** 16;\n        this.pos += 3;\n        return val | (val & 2 ** 23) * 0x1fe;\n    }\n    readUInt24() {\n        return this.buf[this.pos++] + this.buf[this.pos++] * 2 ** 8 + this.buf[this.pos++] * 2 ** 16;\n    }\n    readUInt32() {\n        return this.buf[this.pos++] + this.buf[this.pos++] * 2 ** 8 + this.buf[this.pos++] * 2 ** 16 + this.buf[this.pos++] * 2 ** 24;\n    }\n    readInt32() {\n        return this.buf[this.pos++] + this.buf[this.pos++] * 2 ** 8 + this.buf[this.pos++] * 2 ** 16 + (this.buf[this.pos++] << 24);\n    }\n    readBigInt64() {\n        const val = this.buf.readBigInt64LE(this.pos);\n        this.pos += 8;\n        return val;\n    }\n    readBigUInt64() {\n        const val = this.buf.readBigUInt64LE(this.pos);\n        this.pos += 8;\n        return val;\n    }\n    /**\n   * Metadata are length encoded, but cannot have length > 256, so simplified readUnsignedLength\n   * @returns {number}\n   */ readMetadataLength() {\n        const type = this.buf[this.pos++] & 0xff;\n        if (type < 0xfb) return type;\n        return this.readUInt16();\n    }\n    readUnsignedLength() {\n        const type = this.buf[this.pos++] & 0xff;\n        if (type < 0xfb) return type;\n        switch(type){\n            case 0xfb:\n                return null;\n            case 0xfc:\n                return this.readUInt16();\n            case 0xfd:\n                return this.readUInt24();\n            case 0xfe:\n                // limitation to BigInt signed value\n                return Number(this.readBigInt64());\n        }\n    }\n    readBuffer(len) {\n        this.pos += len;\n        return this.buf.subarray(this.pos - len, this.pos);\n    }\n    readBufferRemaining() {\n        let b = this.buf.subarray(this.pos, this.end);\n        this.pos = this.end;\n        return b;\n    }\n    readBufferLengthEncoded() {\n        const len = this.readUnsignedLength();\n        if (len === null) return null;\n        this.pos += len;\n        return this.buf.subarray(this.pos - len, this.pos);\n    }\n    readStringNullEnded() {\n        let initialPosition = this.pos;\n        let cnt = 0;\n        while(this.remaining() > 0 && this.buf[this.pos++] !== 0){\n            cnt++;\n        }\n        return this.buf.toString(undefined, initialPosition, initialPosition + cnt);\n    }\n    readSignedLengthBigInt() {\n        const type = this.buf[this.pos++];\n        switch(type){\n            // null test is not used for now, since only used for reading insertId\n            // case 0xfb:\n            //   return null;\n            case 0xfc:\n                return BigInt(this.readUInt16());\n            case 0xfd:\n                return BigInt(this.readUInt24());\n            case 0xfe:\n                return this.readBigInt64();\n            default:\n                return BigInt(type);\n        }\n    }\n    readAsciiStringLengthEncoded() {\n        const len = this.readUnsignedLength();\n        if (len === null) return null;\n        this.pos += len;\n        return this.buf.toString(\"ascii\", this.pos - len, this.pos);\n    }\n    readStringLengthEncoded() {\n        throw new Error(\"code is normally superseded by Node encoder or Iconv depending on charset used\");\n    }\n    readBigIntLengthEncoded() {\n        const len = this.readUnsignedLength();\n        if (len === null) return null;\n        return this.readBigIntFromLen(len);\n    }\n    readBigIntFromLen(len) {\n        // fast-path: if length encoded is < to 16, value is in safe integer range\n        // atoi\n        if (len < 16) {\n            return BigInt(this._atoi(len));\n        }\n        // atoll\n        let result = 0n;\n        let negate = false;\n        let begin = this.pos;\n        if (len > 0 && this.buf[begin] === 45) {\n            //minus sign\n            negate = true;\n            begin++;\n        }\n        for(; begin < this.pos + len; begin++){\n            result = result * 10n + BigInt(this.buf[begin] - 48);\n        }\n        this.pos += len;\n        return negate ? -1n * result : result;\n    }\n    readDecimalLengthEncoded() {\n        const len = this.readUnsignedLength();\n        if (len === null) return null;\n        this.pos += len;\n        return this.buf.toString(\"ascii\", this.pos - len, this.pos);\n    }\n    readDate() {\n        const len = this.readUnsignedLength();\n        if (len === null) return null;\n        let res = [];\n        let value = 0;\n        let initPos = this.pos;\n        this.pos += len;\n        while(initPos < this.pos){\n            const char = this.buf[initPos++];\n            if (char === 45) {\n                //minus separator\n                res.push(value);\n                value = 0;\n            } else {\n                value = value * 10 + char - 48;\n            }\n        }\n        res.push(value);\n        //handle zero-date as null\n        if (res[0] === 0 && res[1] === 0 && res[2] === 0) return null;\n        return new Date(res[0], res[1] - 1, res[2]);\n    }\n    readBinaryDate(opts) {\n        const len = this.buf[this.pos++];\n        let year = 0;\n        let month = 0;\n        let day = 0;\n        if (len > 0) {\n            year = this.readInt16();\n            if (len > 2) {\n                month = this.readUInt8() - 1;\n                if (len > 3) {\n                    day = this.readUInt8();\n                }\n            }\n        }\n        if (year === 0 && month === 0 && day === 0) return opts.dateStrings ? \"0000-00-00\" : null;\n        if (opts.dateStrings) {\n            return `${appendZero(year, 4)}-${appendZero(month + 1, 2)}-${appendZero(day, 2)}`;\n        }\n        //handle zero-date as null\n        return new Date(year, month, day);\n    }\n    readDateTime() {\n        const len = this.readUnsignedLength();\n        if (len === null) return null;\n        this.pos += len;\n        const str = this.buf.toString(\"ascii\", this.pos - len, this.pos);\n        if (str.startsWith(\"0000-00-00 00:00:00\")) return null;\n        return new Date(str);\n    }\n    readBinaryDateTime() {\n        const len = this.buf[this.pos++];\n        let year = 0;\n        let month = 0;\n        let day = 0;\n        let hour = 0;\n        let min = 0;\n        let sec = 0;\n        let microSec = 0;\n        if (len > 0) {\n            year = this.readInt16();\n            if (len > 2) {\n                month = this.readUInt8();\n                if (len > 3) {\n                    day = this.readUInt8();\n                    if (len > 4) {\n                        hour = this.readUInt8();\n                        min = this.readUInt8();\n                        sec = this.readUInt8();\n                        if (len > 7) {\n                            microSec = this.readUInt32();\n                        }\n                    }\n                }\n            }\n        }\n        //handle zero-date as null\n        if (year === 0 && month === 0 && day === 0 && hour === 0 && min === 0 && sec === 0 && microSec === 0) return null;\n        return new Date(year, month - 1, day, hour, min, sec, microSec / 1000);\n    }\n    readBinaryDateTimeAsString(scale) {\n        const len = this.buf[this.pos++];\n        let year = 0;\n        let month = 0;\n        let day = 0;\n        let hour = 0;\n        let min = 0;\n        let sec = 0;\n        let microSec = 0;\n        if (len > 0) {\n            year = this.readInt16();\n            if (len > 2) {\n                month = this.readUInt8();\n                if (len > 3) {\n                    day = this.readUInt8();\n                    if (len > 4) {\n                        hour = this.readUInt8();\n                        min = this.readUInt8();\n                        sec = this.readUInt8();\n                        if (len > 7) {\n                            microSec = this.readUInt32();\n                        }\n                    }\n                }\n            }\n        }\n        //handle zero-date as null\n        if (year === 0 && month === 0 && day === 0 && hour === 0 && min === 0 && sec === 0 && microSec === 0) return \"0000-00-00 00:00:00\" + (scale > 0 ? \".000000\".substring(0, scale + 1) : \"\");\n        return appendZero(year, 4) + \"-\" + appendZero(month, 2) + \"-\" + appendZero(day, 2) + \" \" + appendZero(hour, 2) + \":\" + appendZero(min, 2) + \":\" + appendZero(sec, 2) + (microSec > 0 ? scale > 0 ? \".\" + appendZero(microSec, 6).substring(0, scale) : \".\" + appendZero(microSec, 6) : scale > 0 ? \".\" + appendZero(microSec, 6).substring(0, scale) : \"\");\n    }\n    readBinaryTime() {\n        const len = this.buf[this.pos++];\n        const negate = this.buf[this.pos++] === 1;\n        const hour = this.readUInt32() * 24 + this.readUInt8();\n        const min = this.readUInt8();\n        const sec = this.readUInt8();\n        let microSec = 0;\n        if (len > 8) {\n            microSec = this.readUInt32();\n        }\n        let val = appendZero(hour, 2) + \":\" + appendZero(min, 2) + \":\" + appendZero(sec, 2);\n        if (microSec > 0) {\n            val += \".\" + appendZero(microSec, 6);\n        }\n        if (negate) return \"-\" + val;\n        return val;\n    }\n    readFloat() {\n        const val = this.buf.readFloatLE(this.pos);\n        this.pos += 4;\n        return val;\n    }\n    readDouble() {\n        const val = this.buf.readDoubleLE(this.pos);\n        this.pos += 8;\n        return val;\n    }\n    readIntLengthEncoded() {\n        const len = this.buf[this.pos++] & 0xff;\n        if (len < 0xfb) return this._atoi(len);\n        switch(len){\n            case 0xfb:\n                return null;\n            case 0xfc:\n                return this._atoi(this.readUInt16());\n            case 0xfd:\n                return this._atoi(this.readUInt24());\n            case 0xfe:\n                // limitation to BigInt signed value\n                return this._atoi(Number(this.readBigInt64()));\n        }\n    }\n    _atoi(len) {\n        let result = 0;\n        let negate = false;\n        let begin = this.pos;\n        if (len > 0 && this.buf[begin] === 45) {\n            //minus sign\n            negate = true;\n            begin++;\n        }\n        for(; begin < this.pos + len; begin++){\n            result = result * 10 + (this.buf[begin] - 48);\n        }\n        this.pos += len;\n        return negate ? -1 * result : result;\n    }\n    readFloatLengthCoded() {\n        const len = this.readUnsignedLength();\n        if (len === null) return null;\n        this.pos += len;\n        return +this.buf.toString(\"ascii\", this.pos - len, this.pos);\n    }\n    skipLengthCodedNumber() {\n        const type = this.buf[this.pos++] & 0xff;\n        switch(type){\n            case 251:\n                return;\n            case 252:\n                this.pos += 2 + (0xffff & (this.buf[this.pos] & 0xff) + ((this.buf[this.pos + 1] & 0xff) << 8));\n                return;\n            case 253:\n                this.pos += 3 + (0xffffff & (this.buf[this.pos] & 0xff) + ((this.buf[this.pos + 1] & 0xff) << 8) + ((this.buf[this.pos + 2] & 0xff) << 16));\n                return;\n            case 254:\n                this.pos += 8 + Number(this.buf.readBigUInt64LE(this.pos));\n                return;\n            default:\n                this.pos += type;\n                return;\n        }\n    }\n    length() {\n        return this.end - this.pos;\n    }\n    subPacketLengthEncoded(len) {}\n    /**\n   * Parse ERR_Packet : https://mariadb.com/kb/en/library/err_packet/\n   *\n   * @param info              current connection info\n   * @param sql               command sql\n   * @param stack             additional stack trace\n   * @returns {Error}\n   */ readError(info, sql, stack) {\n        this.skip(1);\n        let errno = this.readUInt16();\n        let sqlState;\n        let msg;\n        // check '#'\n        if (this.peek() === 0x23) {\n            // skip '#'\n            this.skip(6);\n            sqlState = this.buf.toString(undefined, this.pos - 5, this.pos);\n            msg = this.readStringNullEnded();\n        } else {\n            // pre 4.1 format\n            sqlState = \"HY000\";\n            msg = this.buf.toString(undefined, this.pos, this.end);\n        }\n        let fatal = sqlState.startsWith(\"08\") || sqlState === \"70100\";\n        return Errors.createError(msg, errno, info, sqlState, sql, fatal, stack);\n    }\n}\nconst appendZero = (val, len)=>{\n    let st = val.toString();\n    while(st.length < len){\n        st = \"0\" + st;\n    }\n    return st;\n};\nmodule.exports = Packet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/io/packet.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/lru-prepare-cache.js":
/*!*******************************************************!*\
  !*** ./node_modules/mariadb/lib/lru-prepare-cache.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst LRU = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/lru-cache/dist/cjs/index.js\");\n/**\n * LRU prepare cache\n *\n */ class LruPrepareCache {\n    #lruCache;\n    #info;\n    constructor(info, prepareCacheLength){\n        this.#info = info;\n        this.#lruCache = new LRU.LRUCache({\n            max: prepareCacheLength,\n            dispose: (value, key)=>value.unCache()\n        });\n    }\n    get(sql) {\n        const key = this.#info.database + \"|\" + sql;\n        const cachedItem = this.#lruCache.get(key);\n        if (cachedItem) {\n            return cachedItem.incrementUse();\n        }\n        return null;\n    }\n    set(sql, cache) {\n        const key = this.#info.database + \"|\" + sql;\n        this.#lruCache.set(key, cache);\n    }\n    toString() {\n        let keyStr = \"\";\n        for (const value of this.#lruCache.keys()){\n            keyStr += \"[\" + value + \"],\";\n        }\n        if (keyStr.length > 1) keyStr = keyStr.substring(0, keyStr.length - 1);\n        return \"info{cache:\" + keyStr + \"}\";\n    }\n    reset() {\n        this.#lruCache.clear();\n    }\n}\nmodule.exports = LruPrepareCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvbHJ1LXByZXBhcmUtY2FjaGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsOENBQThDO0FBQzlDLGtEQUFrRDtBQUVsRDtBQUNBLE1BQU1BLE1BQU1DLG1CQUFPQSxDQUFDO0FBRXBCOzs7Q0FHQyxHQUNELE1BQU1DO0lBQ0osQ0FBQ0MsUUFBUSxDQUFDO0lBQ1YsQ0FBQ0MsSUFBSSxDQUFDO0lBQ05DLFlBQVlELElBQUksRUFBRUUsa0JBQWtCLENBQUU7UUFDcEMsSUFBSSxDQUFDLENBQUNGLElBQUksR0FBR0E7UUFDYixJQUFJLENBQUMsQ0FBQ0QsUUFBUSxHQUFHLElBQUlILElBQUlPLFFBQVEsQ0FBQztZQUNoQ0MsS0FBS0Y7WUFDTEcsU0FBUyxDQUFDQyxPQUFPQyxNQUFRRCxNQUFNRSxPQUFPO1FBQ3hDO0lBQ0Y7SUFFQUMsSUFBSUMsR0FBRyxFQUFFO1FBQ1AsTUFBTUgsTUFBTSxJQUFJLENBQUMsQ0FBQ1AsSUFBSSxDQUFDVyxRQUFRLEdBQUcsTUFBTUQ7UUFDeEMsTUFBTUUsYUFBYSxJQUFJLENBQUMsQ0FBQ2IsUUFBUSxDQUFDVSxHQUFHLENBQUNGO1FBQ3RDLElBQUlLLFlBQVk7WUFDZCxPQUFPQSxXQUFXQyxZQUFZO1FBQ2hDO1FBQ0EsT0FBTztJQUNUO0lBRUFDLElBQUlKLEdBQUcsRUFBRUssS0FBSyxFQUFFO1FBQ2QsTUFBTVIsTUFBTSxJQUFJLENBQUMsQ0FBQ1AsSUFBSSxDQUFDVyxRQUFRLEdBQUcsTUFBTUQ7UUFDeEMsSUFBSSxDQUFDLENBQUNYLFFBQVEsQ0FBQ2UsR0FBRyxDQUFDUCxLQUFLUTtJQUMxQjtJQUVBQyxXQUFXO1FBQ1QsSUFBSUMsU0FBUztRQUNiLEtBQUssTUFBTVgsU0FBUyxJQUFJLENBQUMsQ0FBQ1AsUUFBUSxDQUFDbUIsSUFBSSxHQUFJO1lBQ3pDRCxVQUFVLE1BQU1YLFFBQVE7UUFDMUI7UUFDQSxJQUFJVyxPQUFPRSxNQUFNLEdBQUcsR0FBR0YsU0FBU0EsT0FBT0csU0FBUyxDQUFDLEdBQUdILE9BQU9FLE1BQU0sR0FBRztRQUNwRSxPQUFPLGdCQUFnQkYsU0FBUztJQUNsQztJQUVBSSxRQUFRO1FBQ04sSUFBSSxDQUFDLENBQUN0QixRQUFRLENBQUN1QixLQUFLO0lBQ3RCO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZm5leHRqcy8uL25vZGVfbW9kdWxlcy9tYXJpYWRiL2xpYi9scnUtcHJlcGFyZS1jYWNoZS5qcz9lYzdhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbid1c2Ugc3RyaWN0JztcbmNvbnN0IExSVSA9IHJlcXVpcmUoJ2xydS1jYWNoZScpO1xuXG4vKipcbiAqIExSVSBwcmVwYXJlIGNhY2hlXG4gKlxuICovXG5jbGFzcyBMcnVQcmVwYXJlQ2FjaGUge1xuICAjbHJ1Q2FjaGU7XG4gICNpbmZvO1xuICBjb25zdHJ1Y3RvcihpbmZvLCBwcmVwYXJlQ2FjaGVMZW5ndGgpIHtcbiAgICB0aGlzLiNpbmZvID0gaW5mbztcbiAgICB0aGlzLiNscnVDYWNoZSA9IG5ldyBMUlUuTFJVQ2FjaGUoe1xuICAgICAgbWF4OiBwcmVwYXJlQ2FjaGVMZW5ndGgsXG4gICAgICBkaXNwb3NlOiAodmFsdWUsIGtleSkgPT4gdmFsdWUudW5DYWNoZSgpXG4gICAgfSk7XG4gIH1cblxuICBnZXQoc3FsKSB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy4jaW5mby5kYXRhYmFzZSArICd8JyArIHNxbDtcbiAgICBjb25zdCBjYWNoZWRJdGVtID0gdGhpcy4jbHJ1Q2FjaGUuZ2V0KGtleSk7XG4gICAgaWYgKGNhY2hlZEl0ZW0pIHtcbiAgICAgIHJldHVybiBjYWNoZWRJdGVtLmluY3JlbWVudFVzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHNldChzcWwsIGNhY2hlKSB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy4jaW5mby5kYXRhYmFzZSArICd8JyArIHNxbDtcbiAgICB0aGlzLiNscnVDYWNoZS5zZXQoa2V5LCBjYWNoZSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQga2V5U3RyID0gJyc7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLiNscnVDYWNoZS5rZXlzKCkpIHtcbiAgICAgIGtleVN0ciArPSAnWycgKyB2YWx1ZSArICddLCc7XG4gICAgfVxuICAgIGlmIChrZXlTdHIubGVuZ3RoID4gMSkga2V5U3RyID0ga2V5U3RyLnN1YnN0cmluZygwLCBrZXlTdHIubGVuZ3RoIC0gMSk7XG4gICAgcmV0dXJuICdpbmZve2NhY2hlOicgKyBrZXlTdHIgKyAnfSc7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLiNscnVDYWNoZS5jbGVhcigpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTHJ1UHJlcGFyZUNhY2hlO1xuIl0sIm5hbWVzIjpbIkxSVSIsInJlcXVpcmUiLCJMcnVQcmVwYXJlQ2FjaGUiLCJscnVDYWNoZSIsImluZm8iLCJjb25zdHJ1Y3RvciIsInByZXBhcmVDYWNoZUxlbmd0aCIsIkxSVUNhY2hlIiwibWF4IiwiZGlzcG9zZSIsInZhbHVlIiwia2V5IiwidW5DYWNoZSIsImdldCIsInNxbCIsImRhdGFiYXNlIiwiY2FjaGVkSXRlbSIsImluY3JlbWVudFVzZSIsInNldCIsImNhY2hlIiwidG9TdHJpbmciLCJrZXlTdHIiLCJrZXlzIiwibGVuZ3RoIiwic3Vic3RyaW5nIiwicmVzZXQiLCJjbGVhciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/lru-prepare-cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/misc/connection-information.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mariadb/lib/misc/connection-information.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nclass ConnectionInformation {\n    constructor(opts){\n        this.threadId = -1;\n        this.status = null;\n        this.serverVersion = null;\n        this.serverCapabilities = null;\n        this.database = opts.database;\n    }\n    hasMinVersion(major, minor, patch) {\n        if (!this.serverVersion) throw new Error(\"cannot know if server version until connection is established\");\n        if (!major) throw new Error(\"a major version must be set\");\n        if (!minor) minor = 0;\n        if (!patch) patch = 0;\n        let ver = this.serverVersion;\n        return ver.major > major || ver.major === major && ver.minor > minor || ver.major === major && ver.minor === minor && ver.patch >= patch;\n    }\n    isMariaDB() {\n        if (!this.serverVersion) throw new Error(\"cannot know if server is MariaDB until connection is established\");\n        return this.serverVersion.mariaDb;\n    }\n    /**\n   * Parse raw info to set server major/minor/patch values\n   * @param info\n   */ static parseVersionString(info) {\n        let car;\n        let offset = 0;\n        let type = 0;\n        let val = 0;\n        for(; offset < info.serverVersion.raw.length; offset++){\n            car = info.serverVersion.raw.charCodeAt(offset);\n            if (car < 48 || car > 57) {\n                switch(type){\n                    case 0:\n                        info.serverVersion.major = val;\n                        break;\n                    case 1:\n                        info.serverVersion.minor = val;\n                        break;\n                    case 2:\n                        info.serverVersion.patch = val;\n                        return;\n                }\n                type++;\n                val = 0;\n            } else {\n                val = val * 10 + car - 48;\n            }\n        }\n        //serverVersion finished by number like \"5.5.57\", assign patchVersion\n        if (type === 2) info.serverVersion.patch = val;\n    }\n}\nmodule.exports = ConnectionInformation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvbWlzYy9jb25uZWN0aW9uLWluZm9ybWF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxrREFBa0Q7QUFFbEQ7QUFFQSxNQUFNQTtJQUNKQyxZQUFZQyxJQUFJLENBQUU7UUFDaEIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsQ0FBQztRQUNqQixJQUFJLENBQUNDLE1BQU0sR0FBRztRQUNkLElBQUksQ0FBQ0MsYUFBYSxHQUFHO1FBQ3JCLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUc7UUFDMUIsSUFBSSxDQUFDQyxRQUFRLEdBQUdMLEtBQUtLLFFBQVE7SUFDL0I7SUFFQUMsY0FBY0MsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRTtRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDTixhQUFhLEVBQUUsTUFBTSxJQUFJTyxNQUFNO1FBRXpDLElBQUksQ0FBQ0gsT0FBTyxNQUFNLElBQUlHLE1BQU07UUFFNUIsSUFBSSxDQUFDRixPQUFPQSxRQUFRO1FBQ3BCLElBQUksQ0FBQ0MsT0FBT0EsUUFBUTtRQUVwQixJQUFJRSxNQUFNLElBQUksQ0FBQ1IsYUFBYTtRQUM1QixPQUNFUSxJQUFJSixLQUFLLEdBQUdBLFNBQ1hJLElBQUlKLEtBQUssS0FBS0EsU0FBU0ksSUFBSUgsS0FBSyxHQUFHQSxTQUNuQ0csSUFBSUosS0FBSyxLQUFLQSxTQUFTSSxJQUFJSCxLQUFLLEtBQUtBLFNBQVNHLElBQUlGLEtBQUssSUFBSUE7SUFFaEU7SUFFQUcsWUFBWTtRQUNWLElBQUksQ0FBQyxJQUFJLENBQUNULGFBQWEsRUFBRSxNQUFNLElBQUlPLE1BQU07UUFDekMsT0FBTyxJQUFJLENBQUNQLGFBQWEsQ0FBQ1UsT0FBTztJQUNuQztJQUVBOzs7R0FHQyxHQUNELE9BQU9DLG1CQUFtQkMsSUFBSSxFQUFFO1FBQzlCLElBQUlDO1FBQ0osSUFBSUMsU0FBUztRQUNiLElBQUlDLE9BQU87UUFDWCxJQUFJQyxNQUFNO1FBRVYsTUFBT0YsU0FBU0YsS0FBS1osYUFBYSxDQUFDaUIsR0FBRyxDQUFDQyxNQUFNLEVBQUVKLFNBQVU7WUFDdkRELE1BQU1ELEtBQUtaLGFBQWEsQ0FBQ2lCLEdBQUcsQ0FBQ0UsVUFBVSxDQUFDTDtZQUN4QyxJQUFJRCxNQUFNLE1BQU1BLE1BQU0sSUFBSTtnQkFDeEIsT0FBUUU7b0JBQ04sS0FBSzt3QkFDSEgsS0FBS1osYUFBYSxDQUFDSSxLQUFLLEdBQUdZO3dCQUMzQjtvQkFDRixLQUFLO3dCQUNISixLQUFLWixhQUFhLENBQUNLLEtBQUssR0FBR1c7d0JBQzNCO29CQUNGLEtBQUs7d0JBQ0hKLEtBQUtaLGFBQWEsQ0FBQ00sS0FBSyxHQUFHVTt3QkFDM0I7Z0JBQ0o7Z0JBQ0FEO2dCQUNBQyxNQUFNO1lBQ1IsT0FBTztnQkFDTEEsTUFBTUEsTUFBTSxLQUFLSCxNQUFNO1lBQ3pCO1FBQ0Y7UUFDQSxxRUFBcUU7UUFDckUsSUFBSUUsU0FBUyxHQUFHSCxLQUFLWixhQUFhLENBQUNNLEtBQUssR0FBR1U7SUFDN0M7QUFDRjtBQUVBSSxPQUFPQyxPQUFPLEdBQUcxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BmbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21hcmlhZGIvbGliL21pc2MvY29ubmVjdGlvbi1pbmZvcm1hdGlvbi5qcz8zMDJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTEdQTC0yLjEtb3ItbGF0ZXJcbi8vICBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMyBNYXJpYURCIENvcnBvcmF0aW9uIEFiXG5cbid1c2Ugc3RyaWN0JztcblxuY2xhc3MgQ29ubmVjdGlvbkluZm9ybWF0aW9uIHtcbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHRoaXMudGhyZWFkSWQgPSAtMTtcbiAgICB0aGlzLnN0YXR1cyA9IG51bGw7XG4gICAgdGhpcy5zZXJ2ZXJWZXJzaW9uID0gbnVsbDtcbiAgICB0aGlzLnNlcnZlckNhcGFiaWxpdGllcyA9IG51bGw7XG4gICAgdGhpcy5kYXRhYmFzZSA9IG9wdHMuZGF0YWJhc2U7XG4gIH1cblxuICBoYXNNaW5WZXJzaW9uKG1ham9yLCBtaW5vciwgcGF0Y2gpIHtcbiAgICBpZiAoIXRoaXMuc2VydmVyVmVyc2lvbikgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3Qga25vdyBpZiBzZXJ2ZXIgdmVyc2lvbiB1bnRpbCBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkJyk7XG5cbiAgICBpZiAoIW1ham9yKSB0aHJvdyBuZXcgRXJyb3IoJ2EgbWFqb3IgdmVyc2lvbiBtdXN0IGJlIHNldCcpO1xuXG4gICAgaWYgKCFtaW5vcikgbWlub3IgPSAwO1xuICAgIGlmICghcGF0Y2gpIHBhdGNoID0gMDtcblxuICAgIGxldCB2ZXIgPSB0aGlzLnNlcnZlclZlcnNpb247XG4gICAgcmV0dXJuIChcbiAgICAgIHZlci5tYWpvciA+IG1ham9yIHx8XG4gICAgICAodmVyLm1ham9yID09PSBtYWpvciAmJiB2ZXIubWlub3IgPiBtaW5vcikgfHxcbiAgICAgICh2ZXIubWFqb3IgPT09IG1ham9yICYmIHZlci5taW5vciA9PT0gbWlub3IgJiYgdmVyLnBhdGNoID49IHBhdGNoKVxuICAgICk7XG4gIH1cblxuICBpc01hcmlhREIoKSB7XG4gICAgaWYgKCF0aGlzLnNlcnZlclZlcnNpb24pIHRocm93IG5ldyBFcnJvcignY2Fubm90IGtub3cgaWYgc2VydmVyIGlzIE1hcmlhREIgdW50aWwgY29ubmVjdGlvbiBpcyBlc3RhYmxpc2hlZCcpO1xuICAgIHJldHVybiB0aGlzLnNlcnZlclZlcnNpb24ubWFyaWFEYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSByYXcgaW5mbyB0byBzZXQgc2VydmVyIG1ham9yL21pbm9yL3BhdGNoIHZhbHVlc1xuICAgKiBAcGFyYW0gaW5mb1xuICAgKi9cbiAgc3RhdGljIHBhcnNlVmVyc2lvblN0cmluZyhpbmZvKSB7XG4gICAgbGV0IGNhcjtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBsZXQgdHlwZSA9IDA7XG4gICAgbGV0IHZhbCA9IDA7XG5cbiAgICBmb3IgKDsgb2Zmc2V0IDwgaW5mby5zZXJ2ZXJWZXJzaW9uLnJhdy5sZW5ndGg7IG9mZnNldCsrKSB7XG4gICAgICBjYXIgPSBpbmZvLnNlcnZlclZlcnNpb24ucmF3LmNoYXJDb2RlQXQob2Zmc2V0KTtcbiAgICAgIGlmIChjYXIgPCA0OCB8fCBjYXIgPiA1Nykge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBpbmZvLnNlcnZlclZlcnNpb24ubWFqb3IgPSB2YWw7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBpbmZvLnNlcnZlclZlcnNpb24ubWlub3IgPSB2YWw7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBpbmZvLnNlcnZlclZlcnNpb24ucGF0Y2ggPSB2YWw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHlwZSsrO1xuICAgICAgICB2YWwgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gdmFsICogMTAgKyBjYXIgLSA0ODtcbiAgICAgIH1cbiAgICB9XG4gICAgLy9zZXJ2ZXJWZXJzaW9uIGZpbmlzaGVkIGJ5IG51bWJlciBsaWtlIFwiNS41LjU3XCIsIGFzc2lnbiBwYXRjaFZlcnNpb25cbiAgICBpZiAodHlwZSA9PT0gMikgaW5mby5zZXJ2ZXJWZXJzaW9uLnBhdGNoID0gdmFsO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29ubmVjdGlvbkluZm9ybWF0aW9uO1xuIl0sIm5hbWVzIjpbIkNvbm5lY3Rpb25JbmZvcm1hdGlvbiIsImNvbnN0cnVjdG9yIiwib3B0cyIsInRocmVhZElkIiwic3RhdHVzIiwic2VydmVyVmVyc2lvbiIsInNlcnZlckNhcGFiaWxpdGllcyIsImRhdGFiYXNlIiwiaGFzTWluVmVyc2lvbiIsIm1ham9yIiwibWlub3IiLCJwYXRjaCIsIkVycm9yIiwidmVyIiwiaXNNYXJpYURCIiwibWFyaWFEYiIsInBhcnNlVmVyc2lvblN0cmluZyIsImluZm8iLCJjYXIiLCJvZmZzZXQiLCJ0eXBlIiwidmFsIiwicmF3IiwibGVuZ3RoIiwiY2hhckNvZGVBdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/misc/connection-information.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/misc/errors.js":
/*!*************************************************!*\
  !*** ./node_modules/mariadb/lib/misc/errors.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst ErrorCodes = __webpack_require__(/*! ../const/error-code */ \"(rsc)/./node_modules/mariadb/lib/const/error-code.js\");\nclass SqlError extends Error {\n    constructor(msg, sql, fatal, info, sqlState, errno, additionalStack, addHeader = undefined){\n        super((addHeader === undefined || addHeader ? `(conn=${info ? info.threadId ? info.threadId : -1 : -1}, no: ${errno ? errno : -1}, SQLState: ${sqlState ? sqlState : \"HY000\"}) ` : \"\") + msg + (sql ? \"\\nsql: \" + sql : \"\"));\n        this.name = \"SqlError\";\n        this.sqlMessage = msg;\n        this.sql = sql;\n        this.fatal = fatal;\n        this.errno = errno;\n        this.sqlState = sqlState;\n        if (errno > 45000 && errno < 46000) {\n            //driver error\n            this.code = errByNo[errno] || \"UNKNOWN\";\n        } else {\n            this.code = ErrorCodes.codes[this.errno] || \"UNKNOWN\";\n        }\n        if (additionalStack) {\n            //adding caller stack, removing initial \"Error:\\n\"\n            this.stack += \"\\n From event:\\n\" + additionalStack.substring(additionalStack.indexOf(\"\\n\") + 1);\n        }\n    }\n    get text() {\n        return this.sqlMessage;\n    }\n}\n/**\n * Error factory, so error get connection information.\n *\n * @param msg               current error message\n * @param errno             error number\n * @param info              connection information\n * @param sqlState          sql state\n * @param sql               sql command\n * @param fatal             is error fatal\n * @param additionalStack   additional stack trace to see\n * @param addHeader         add connection information\n * @returns {Error} the error\n */ module.exports.createError = function(msg, errno, info = null, sqlState = \"HY000\", sql = null, fatal = false, additionalStack = undefined, addHeader = undefined) {\n    return new SqlError(msg, sql, fatal, info, sqlState, errno, additionalStack, addHeader);\n};\n/**\n * Fatal error factory, so error get connection information.\n *\n * @param msg               current error message\n * @param errno             error number\n * @param info              connection information\n * @param sqlState          sql state\n * @param sql               sql command\n * @param additionalStack   additional stack trace to see\n * @param addHeader         add connection information\n * @returns {Error} the error\n */ module.exports.createFatalError = function(msg, errno, info = null, sqlState = \"08S01\", sql = null, additionalStack = undefined, addHeader = undefined) {\n    return new SqlError(msg, sql, true, info, sqlState, errno, additionalStack, addHeader);\n};\n/********************************************************************************\n * Driver specific errors\n ********************************************************************************/ module.exports.ER_CONNECTION_ALREADY_CLOSED = 45001;\nmodule.exports.ER_MYSQL_CHANGE_USER_BUG = 45003;\nmodule.exports.ER_CMD_NOT_EXECUTED_DESTROYED = 45004;\nmodule.exports.ER_NULL_CHAR_ESCAPEID = 45005;\nmodule.exports.ER_NULL_ESCAPEID = 45006;\nmodule.exports.ER_NOT_IMPLEMENTED_FORMAT = 45007;\nmodule.exports.ER_NODE_NOT_SUPPORTED_TLS = 45008;\nmodule.exports.ER_SOCKET_UNEXPECTED_CLOSE = 45009;\nmodule.exports.ER_UNEXPECTED_PACKET = 45011;\nmodule.exports.ER_CONNECTION_TIMEOUT = 45012;\nmodule.exports.ER_CMD_CONNECTION_CLOSED = 45013;\nmodule.exports.ER_CHANGE_USER_BAD_PACKET = 45014;\nmodule.exports.ER_PING_BAD_PACKET = 45015;\nmodule.exports.ER_MISSING_PARAMETER = 45016;\nmodule.exports.ER_PARAMETER_UNDEFINED = 45017;\nmodule.exports.ER_PLACEHOLDER_UNDEFINED = 45018;\nmodule.exports.ER_SOCKET = 45019;\nmodule.exports.ER_EOF_EXPECTED = 45020;\nmodule.exports.ER_LOCAL_INFILE_DISABLED = 45021;\nmodule.exports.ER_LOCAL_INFILE_NOT_READABLE = 45022;\nmodule.exports.ER_SERVER_SSL_DISABLED = 45023;\nmodule.exports.ER_AUTHENTICATION_BAD_PACKET = 45024;\nmodule.exports.ER_AUTHENTICATION_PLUGIN_NOT_SUPPORTED = 45025;\nmodule.exports.ER_SOCKET_TIMEOUT = 45026;\nmodule.exports.ER_POOL_ALREADY_CLOSED = 45027;\nmodule.exports.ER_GET_CONNECTION_TIMEOUT = 45028;\nmodule.exports.ER_SETTING_SESSION_ERROR = 45029;\nmodule.exports.ER_INITIAL_SQL_ERROR = 45030;\nmodule.exports.ER_BATCH_WITH_NO_VALUES = 45031;\nmodule.exports.ER_RESET_BAD_PACKET = 45032;\nmodule.exports.ER_WRONG_IANA_TIMEZONE = 45033;\nmodule.exports.ER_LOCAL_INFILE_WRONG_FILENAME = 45034;\nmodule.exports.ER_ADD_CONNECTION_CLOSED_POOL = 45035;\nmodule.exports.ER_WRONG_AUTO_TIMEZONE = 45036;\nmodule.exports.ER_CLOSING_POOL = 45037;\nmodule.exports.ER_TIMEOUT_NOT_SUPPORTED = 45038;\nmodule.exports.ER_INITIAL_TIMEOUT_ERROR = 45039;\nmodule.exports.ER_DUPLICATE_FIELD = 45040;\nmodule.exports.ER_PING_TIMEOUT = 45042;\nmodule.exports.ER_BAD_PARAMETER_VALUE = 45043;\nmodule.exports.ER_CANNOT_RETRIEVE_RSA_KEY = 45044;\nmodule.exports.ER_MINIMUM_NODE_VERSION_REQUIRED = 45045;\nmodule.exports.ER_MAX_ALLOWED_PACKET = 45046;\nmodule.exports.ER_NOT_SUPPORTED_AUTH_PLUGIN = 45047;\nmodule.exports.ER_COMPRESSION_NOT_SUPPORTED = 45048;\nmodule.exports.ER_UNDEFINED_SQL = 45049;\nmodule.exports.ER_PARSING_PRECISION = 45050;\nmodule.exports.ER_PREPARE_CLOSED = 45051;\nmodule.exports.ER_MISSING_SQL_PARAMETER = 45052;\nmodule.exports.ER_MISSING_SQL_FILE = 45053;\nmodule.exports.ER_SQL_FILE_ERROR = 45054;\nmodule.exports.ER_MISSING_DATABASE_PARAMETER = 45055;\nconst keys = Object.keys(module.exports);\nconst errByNo = {};\nfor(let i = 0; i < keys.length; i++){\n    const keyName = keys[i];\n    if (keyName !== \"createError\") {\n        errByNo[module.exports[keyName]] = keyName;\n    }\n}\nmodule.exports.SqlError = SqlError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/misc/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/misc/parse.js":
/*!************************************************!*\
  !*** ./node_modules/mariadb/lib/misc/parse.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst Errors = __webpack_require__(/*! ../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst State = {\n    Normal: 1 /* inside  query */ ,\n    String: 2 /* inside string */ ,\n    SlashStarComment: 3 /* inside slash-star comment */ ,\n    Escape: 4 /* found backslash */ ,\n    EOLComment: 5 /* # comment, or // comment, or -- comment */ ,\n    Backtick: 6 /* found backtick */ ,\n    Placeholder: 7 /* found placeholder */ \n};\nconst SLASH_BYTE = \"/\".charCodeAt(0);\nconst STAR_BYTE = \"*\".charCodeAt(0);\nconst BACKSLASH_BYTE = \"\\\\\".charCodeAt(0);\nconst HASH_BYTE = \"#\".charCodeAt(0);\nconst MINUS_BYTE = \"-\".charCodeAt(0);\nconst LINE_FEED_BYTE = \"\\n\".charCodeAt(0);\nconst DBL_QUOTE_BYTE = '\"'.charCodeAt(0);\nconst QUOTE_BYTE = \"'\".charCodeAt(0);\nconst RADICAL_BYTE = \"`\".charCodeAt(0);\nconst QUESTION_MARK_BYTE = \"?\".charCodeAt(0);\nconst COLON_BYTE = \":\".charCodeAt(0);\nconst SEMICOLON_BYTE = \";\".charCodeAt(0);\n/**\n * Set question mark position (question mark).\n * Question mark in comment are not taken in account\n *\n * @returns {Array} question mark position\n */ module.exports.splitQuery = function(query) {\n    let paramPositions = [];\n    let state = State.Normal;\n    let lastChar = 0x00;\n    let singleQuotes = false;\n    const len = query.length;\n    for(let i = 0; i < len; i++){\n        if (state === State.Escape && !(query[i] === QUOTE_BYTE && singleQuotes || query[i] === DBL_QUOTE_BYTE && !singleQuotes)) {\n            state = State.String;\n            lastChar = query[i];\n            continue;\n        }\n        switch(query[i]){\n            case STAR_BYTE:\n                if (state === State.Normal && lastChar === SLASH_BYTE) {\n                    state = State.SlashStarComment;\n                }\n                break;\n            case SLASH_BYTE:\n                if (state === State.SlashStarComment && lastChar === STAR_BYTE) {\n                    state = State.Normal;\n                } else if (state === State.Normal && lastChar === SLASH_BYTE) {\n                    state = State.EOLComment;\n                }\n                break;\n            case HASH_BYTE:\n                if (state === State.Normal) {\n                    state = State.EOLComment;\n                }\n                break;\n            case MINUS_BYTE:\n                if (state === State.Normal && lastChar === MINUS_BYTE) {\n                    state = State.EOLComment;\n                }\n                break;\n            case LINE_FEED_BYTE:\n                if (state === State.EOLComment) {\n                    state = State.Normal;\n                }\n                break;\n            case DBL_QUOTE_BYTE:\n                if (state === State.Normal) {\n                    state = State.String;\n                    singleQuotes = false;\n                } else if (state === State.String && !singleQuotes) {\n                    state = State.Normal;\n                } else if (state === State.Escape) {\n                    state = State.String;\n                }\n                break;\n            case QUOTE_BYTE:\n                if (state === State.Normal) {\n                    state = State.String;\n                    singleQuotes = true;\n                } else if (state === State.String && singleQuotes) {\n                    state = State.Normal;\n                } else if (state === State.Escape) {\n                    state = State.String;\n                }\n                break;\n            case BACKSLASH_BYTE:\n                if (state === State.String) {\n                    state = State.Escape;\n                }\n                break;\n            case QUESTION_MARK_BYTE:\n                if (state === State.Normal) {\n                    paramPositions.push(i, ++i);\n                }\n                break;\n            case RADICAL_BYTE:\n                if (state === State.Backtick) {\n                    state = State.Normal;\n                } else if (state === State.Normal) {\n                    state = State.Backtick;\n                }\n                break;\n        }\n        lastChar = query[i];\n    }\n    return paramPositions;\n};\n/**\n * Split query according to parameters using placeholder.\n *\n * @param query           query bytes\n * @param info            connection information\n * @param initialValues   placeholder object\n * @param displaySql      display sql function\n * @returns {{paramPositions: Array, values: Array}}\n */ module.exports.splitQueryPlaceholder = function(query, info, initialValues, displaySql) {\n    let paramPositions = [];\n    let values = [];\n    let state = State.Normal;\n    let lastChar = 0x00;\n    let singleQuotes = false;\n    let car;\n    const len = query.length;\n    for(let i = 0; i < len; i++){\n        car = query[i];\n        if (state === State.Escape && !(car === QUOTE_BYTE && singleQuotes || car === DBL_QUOTE_BYTE && !singleQuotes)) {\n            state = State.String;\n            lastChar = car;\n            continue;\n        }\n        switch(car){\n            case STAR_BYTE:\n                if (state === State.Normal && lastChar === SLASH_BYTE) {\n                    state = State.SlashStarComment;\n                }\n                break;\n            case SLASH_BYTE:\n                if (state === State.SlashStarComment && lastChar === STAR_BYTE) {\n                    state = State.Normal;\n                } else if (state === State.Normal && lastChar === SLASH_BYTE) {\n                    state = State.EOLComment;\n                }\n                break;\n            case HASH_BYTE:\n                if (state === State.Normal) {\n                    state = State.EOLComment;\n                }\n                break;\n            case MINUS_BYTE:\n                if (state === State.Normal && lastChar === MINUS_BYTE) {\n                    state = State.EOLComment;\n                }\n                break;\n            case LINE_FEED_BYTE:\n                if (state === State.EOLComment) {\n                    state = State.Normal;\n                }\n                break;\n            case DBL_QUOTE_BYTE:\n                if (state === State.Normal) {\n                    state = State.String;\n                    singleQuotes = false;\n                } else if (state === State.String && !singleQuotes) {\n                    state = State.Normal;\n                } else if (state === State.Escape) {\n                    state = State.String;\n                }\n                break;\n            case QUOTE_BYTE:\n                if (state === State.Normal) {\n                    state = State.String;\n                    singleQuotes = true;\n                } else if (state === State.String && singleQuotes) {\n                    state = State.Normal;\n                } else if (state === State.Escape) {\n                    state = State.String;\n                }\n                break;\n            case BACKSLASH_BYTE:\n                if (state === State.String) {\n                    state = State.Escape;\n                }\n                break;\n            case QUESTION_MARK_BYTE:\n                if (state === State.Normal) {\n                    paramPositions.push(i);\n                    paramPositions.push(++i);\n                }\n                break;\n            case COLON_BYTE:\n                if (state === State.Normal) {\n                    let j = 1;\n                    while(i + j < len && query[i + j] >= \"0\".charCodeAt(0) && query[i + j] <= \"9\".charCodeAt(0) || query[i + j] >= \"A\".charCodeAt(0) && query[i + j] <= \"Z\".charCodeAt(0) || query[i + j] >= \"a\".charCodeAt(0) && query[i + j] <= \"z\".charCodeAt(0) || query[i + j] === \"-\".charCodeAt(0) || query[i + j] === \"_\".charCodeAt(0)){\n                        j++;\n                    }\n                    paramPositions.push(i, i + j);\n                    const placeholderName = query.toString(\"utf8\", i + 1, i + j);\n                    i += j;\n                    const val = initialValues[placeholderName];\n                    if (val === undefined) {\n                        throw Errors.createError(`Placeholder '${placeholderName}' is not defined`, Errors.ER_PLACEHOLDER_UNDEFINED, info, \"HY000\", displaySql.call());\n                    }\n                    values.push(val);\n                }\n                break;\n            case RADICAL_BYTE:\n                if (state === State.Backtick) {\n                    state = State.Normal;\n                } else if (state === State.Normal) {\n                    state = State.Backtick;\n                }\n                break;\n        }\n        lastChar = car;\n    }\n    return {\n        paramPositions: paramPositions,\n        values: values\n    };\n};\nmodule.exports.searchPlaceholder = function(sql) {\n    let sqlPlaceHolder = \"\";\n    let placeHolderIndex = [];\n    let state = State.Normal;\n    let lastChar = \"\\x00\";\n    let singleQuotes = false;\n    let lastParameterPosition = 0;\n    let idx = 0;\n    let car = sql.charAt(idx++);\n    let placeholderName;\n    while(car !== \"\"){\n        if (state === State.Escape && !(car === \"'\" && singleQuotes || car === '\"' && !singleQuotes)) {\n            state = State.String;\n            lastChar = car;\n            car = sql.charAt(idx++);\n            continue;\n        }\n        switch(car){\n            case \"*\":\n                if (state === State.Normal && lastChar === \"/\") state = State.SlashStarComment;\n                break;\n            case \"/\":\n                if (state === State.SlashStarComment && lastChar === \"*\") state = State.Normal;\n                break;\n            case \"#\":\n                if (state === State.Normal) state = State.EOLComment;\n                break;\n            case \"-\":\n                if (state === State.Normal && lastChar === \"-\") {\n                    state = State.EOLComment;\n                }\n                break;\n            case \"\\n\":\n                if (state === State.EOLComment) {\n                    state = State.Normal;\n                }\n                break;\n            case '\"':\n                if (state === State.Normal) {\n                    state = State.String;\n                    singleQuotes = false;\n                } else if (state === State.String && !singleQuotes) {\n                    state = State.Normal;\n                } else if (state === State.Escape && !singleQuotes) {\n                    state = State.String;\n                }\n                break;\n            case \"'\":\n                if (state === State.Normal) {\n                    state = State.String;\n                    singleQuotes = true;\n                } else if (state === State.String && singleQuotes) {\n                    state = State.Normal;\n                    singleQuotes = false;\n                } else if (state === State.Escape && singleQuotes) {\n                    state = State.String;\n                }\n                break;\n            case \"\\\\\":\n                if (state === State.String) state = State.Escape;\n                break;\n            case \":\":\n                if (state === State.Normal) {\n                    sqlPlaceHolder += sql.substring(lastParameterPosition, idx - 1) + \"?\";\n                    placeholderName = \"\";\n                    while((car = sql.charAt(idx++)) !== \"\" && car >= \"0\" && car <= \"9\" || car >= \"A\" && car <= \"Z\" || car >= \"a\" && car <= \"z\" || car === \"-\" || car === \"_\"){\n                        placeholderName += car;\n                    }\n                    idx--;\n                    placeHolderIndex.push(placeholderName);\n                    lastParameterPosition = idx;\n                }\n                break;\n            case \"`\":\n                if (state === State.Backtick) {\n                    state = State.Normal;\n                } else if (state === State.Normal) {\n                    state = State.Backtick;\n                }\n        }\n        lastChar = car;\n        car = sql.charAt(idx++);\n    }\n    if (lastParameterPosition === 0) {\n        sqlPlaceHolder = sql;\n    } else {\n        sqlPlaceHolder += sql.substring(lastParameterPosition);\n    }\n    return {\n        sql: sqlPlaceHolder,\n        placeHolderIndex: placeHolderIndex\n    };\n};\n/**\n * Ensure that filename requested by server corresponds to query\n * protocol : https://mariadb.com/kb/en/library/local_infile-packet/\n *\n * @param sql         query\n * @param parameters  parameters if any\n * @param fileName    server requested file\n * @returns {boolean} is filename corresponding to query\n */ module.exports.validateFileName = function(sql, parameters, fileName) {\n    // in case of windows, file name in query are escaped\n    // so for example LOAD DATA LOCAL INFILE 'C:\\\\Temp\\\\myFile.txt' ...\n    // but server return 'C:\\Temp\\myFile.txt'\n    // so with regex escaped, must test LOAD DATA LOCAL INFILE 'C:\\\\\\\\Temp\\\\\\\\myFile.txt'\n    let queryValidator = new RegExp(\"^(\\\\s*\\\\/\\\\*([^\\\\*]|\\\\*[^\\\\/])*\\\\*\\\\/)*\\\\s*LOAD\\\\s+DATA\\\\s+((LOW_PRIORITY|CONCURRENT)\\\\s+)?LOCAL\\\\s+INFILE\\\\s+'\" + fileName.replace(/\\\\/g, \"\\\\\\\\\\\\\\\\\").replace(\".\", \"\\\\.\") + \"'\", \"i\");\n    if (queryValidator.test(sql)) return true;\n    if (parameters != null) {\n        queryValidator = new RegExp(\"^(\\\\s*\\\\/\\\\*([^\\\\*]|\\\\*[^\\\\/])*\\\\*\\\\/)*\\\\s*LOAD\\\\s+DATA\\\\s+((LOW_PRIORITY|CONCURRENT)\\\\s+)?LOCAL\\\\s+INFILE\\\\s+\\\\?\", \"i\");\n        if (queryValidator.test(sql) && parameters.length > 0) {\n            if (Array.isArray(parameters)) {\n                return parameters[0].toLowerCase() === fileName.toLowerCase();\n            }\n            return parameters.toLowerCase() === fileName.toLowerCase();\n        }\n    }\n    return false;\n};\n/**\n * Parse commands from buffer, returns queries separated by ';'\n * (last one is not parsed)\n *\n * @param bufState buffer\n * @returns {*[]} array of queries contained in buffer\n */ module.exports.parseQueries = function(bufState) {\n    let state = State.Normal;\n    let lastChar = 0x00;\n    let currByte;\n    let queries = [];\n    let singleQuotes = false;\n    for(let i = bufState.offset; i < bufState.end; i++){\n        currByte = bufState.buffer[i];\n        if (state === State.Escape && !(currByte === QUOTE_BYTE && singleQuotes || currByte === DBL_QUOTE_BYTE && !singleQuotes)) {\n            state = State.String;\n            lastChar = currByte;\n            continue;\n        }\n        switch(currByte){\n            case STAR_BYTE:\n                if (state === State.Normal && lastChar === SLASH_BYTE) {\n                    state = State.SlashStarComment;\n                }\n                break;\n            case SLASH_BYTE:\n                if (state === State.SlashStarComment && lastChar === STAR_BYTE) {\n                    state = State.Normal;\n                } else if (state === State.Normal && lastChar === SLASH_BYTE) {\n                    state = State.EOLComment;\n                }\n                break;\n            case HASH_BYTE:\n                if (state === State.Normal) {\n                    state = State.EOLComment;\n                }\n                break;\n            case MINUS_BYTE:\n                if (state === State.Normal && lastChar === MINUS_BYTE) {\n                    state = State.EOLComment;\n                }\n                break;\n            case LINE_FEED_BYTE:\n                if (state === State.EOLComment) {\n                    state = State.Normal;\n                }\n                break;\n            case DBL_QUOTE_BYTE:\n                if (state === State.Normal) {\n                    state = State.String;\n                    singleQuotes = false;\n                } else if (state === State.String && !singleQuotes) {\n                    state = State.Normal;\n                } else if (state === State.Escape) {\n                    state = State.String;\n                }\n                break;\n            case QUOTE_BYTE:\n                if (state === State.Normal) {\n                    state = State.String;\n                    singleQuotes = true;\n                } else if (state === State.String && singleQuotes) {\n                    state = State.Normal;\n                } else if (state === State.Escape) {\n                    state = State.String;\n                }\n                break;\n            case BACKSLASH_BYTE:\n                if (state === State.String) {\n                    state = State.Escape;\n                }\n                break;\n            case SEMICOLON_BYTE:\n                if (state === State.Normal) {\n                    queries.push(bufState.buffer.toString(\"utf8\", bufState.offset, i));\n                    bufState.offset = i + 1;\n                }\n                break;\n            case RADICAL_BYTE:\n                if (state === State.Backtick) {\n                    state = State.Normal;\n                } else if (state === State.Normal) {\n                    state = State.Backtick;\n                }\n                break;\n        }\n        lastChar = currByte;\n    }\n    return queries;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/misc/parse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/misc/utils.js":
/*!************************************************!*\
  !*** ./node_modules/mariadb/lib/misc/utils.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst hexArray = \"0123456789ABCDEF\".split(\"\");\nconst Errors = __webpack_require__(/*! ../misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst Iconv = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\");\nconst TextEncoder = __webpack_require__(/*! ../cmd/encoder/text-encoder */ \"(rsc)/./node_modules/mariadb/lib/cmd/encoder/text-encoder.js\");\n/**\n * Write bytes/hexadecimal value of a byte array to a string.\n * String output example :\n * 38 00 00 00 03 63 72 65  61 74 65 20 74 61 62 6C     8....create tabl\n * 65 20 42 6C 6F 62 54 65  73 74 63 6C 6F 62 74 65     e BlobTestclobte\n * 73 74 32 20 28 73 74 72  6D 20 74 65 78 74 29 20     st2 (strm text)\n * 43 48 41 52 53 45 54 20  75 74 66 38                 CHARSET utf8\n */ module.exports.log = function(opts, buf, off, end, header) {\n    let out = [];\n    if (!buf) return \"\";\n    if (off === undefined || off === null) off = 0;\n    if (end === undefined || end === null) end = buf.length;\n    let asciiValue = new Array(16);\n    asciiValue[8] = \" \";\n    let useHeader = header !== undefined;\n    let offset = off || 0;\n    const maxLgh = Math.min(useHeader ? opts.debugLen - header.length : opts.debugLen, end - offset);\n    const isLimited = end - offset > maxLgh;\n    let byteValue;\n    let posHexa = 0;\n    let pos = 0;\n    out.push(\"+--------------------------------------------------+\\n\" + \"|  0  1  2  3  4  5  6  7   8  9  a  b  c  d  e  f |\\n\" + \"+--------------------------------------------------+------------------+\\n\");\n    if (useHeader) {\n        while(pos < header.length){\n            if (posHexa === 0) out.push(\"| \");\n            byteValue = header[pos++] & 0xff;\n            out.push(hexArray[byteValue >>> 4], hexArray[byteValue & 0x0f], \" \");\n            asciiValue[posHexa++] = byteValue > 31 && byteValue < 127 ? String.fromCharCode(byteValue) : \".\";\n            if (posHexa === 8) out.push(\" \");\n        }\n    }\n    pos = offset;\n    while(pos < maxLgh + offset){\n        if (posHexa === 0) out.push(\"| \");\n        byteValue = buf[pos] & 0xff;\n        out.push(hexArray[byteValue >>> 4], hexArray[byteValue & 0x0f], \" \");\n        asciiValue[posHexa++] = byteValue > 31 && byteValue < 127 ? String.fromCharCode(byteValue) : \".\";\n        if (posHexa === 8) out.push(\" \");\n        if (posHexa === 16) {\n            out.push(\"| \", asciiValue.join(\"\"), \" |\\n\");\n            posHexa = 0;\n        }\n        pos++;\n    }\n    let remaining = posHexa;\n    if (remaining > 0) {\n        if (remaining < 8) {\n            for(; remaining < 8; remaining++){\n                out.push(\"   \");\n                asciiValue[posHexa++] = \" \";\n            }\n            out.push(\" \");\n        }\n        for(; remaining < 16; remaining++){\n            out.push(\"   \");\n            asciiValue[posHexa++] = \" \";\n        }\n        out.push(\"| \", asciiValue.join(\"\"), isLimited ? \" |...\\n\" : \" |\\n\");\n    } else if (isLimited) {\n        out[out.length - 1] = \" |...\\n\";\n    }\n    out.push(\"+--------------------------------------------------+------------------+\\n\");\n    return out.join(\"\");\n};\nmodule.exports.escapeId = (opts, info, value)=>{\n    if (!value || value === \"\") {\n        throw Errors.createError(\"Cannot escape empty ID value\", Errors.ER_NULL_ESCAPEID, info, \"0A000\");\n    }\n    if (value.includes(\"\\x00\")) {\n        throw Errors.createError(\"Cannot escape ID with null character (u0000)\", Errors.ER_NULL_CHAR_ESCAPEID, info, \"0A000\");\n    }\n    // always return escaped value, even when there is no special characters\n    // to permit working with reserved words\n    return \"`\" + value.replace(/`/g, \"``\") + \"`\";\n};\nconst escapeParameters = (opts, info, value)=>{\n    if (value === undefined || value === null) return \"NULL\";\n    switch(typeof value){\n        case \"boolean\":\n            return value ? \"true\" : \"false\";\n        case \"bigint\":\n        case \"number\":\n            return \"\" + value;\n        case \"object\":\n            if (value instanceof Date) {\n                return TextEncoder.getLocalDate(value);\n            } else if (Buffer.isBuffer(value)) {\n                let stValue;\n                if (Buffer.isEncoding(info.collation.charset)) {\n                    stValue = value.toString(info.collation.charset, 0, value.length);\n                } else {\n                    stValue = Iconv.decode(value, info.collation.charset);\n                }\n                return \"_binary'\" + escapeString(stValue) + \"'\";\n            } else if (typeof value.toSqlString === \"function\") {\n                return \"'\" + escapeString(String(value.toSqlString())) + \"'\";\n            } else if (Array.isArray(value)) {\n                let out = opts.arrayParenthesis ? \"(\" : \"\";\n                for(let i = 0; i < value.length; i++){\n                    if (i !== 0) out += \",\";\n                    out += escapeParameters(opts, info, value[i]);\n                }\n                if (opts.arrayParenthesis) out += \")\";\n                return out;\n            } else {\n                if (value.type != null && [\n                    \"Point\",\n                    \"LineString\",\n                    \"Polygon\",\n                    \"MultiPoint\",\n                    \"MultiLineString\",\n                    \"MultiPolygon\",\n                    \"GeometryCollection\"\n                ].includes(value.type)) {\n                    //GeoJSON format.\n                    let prefix = info && (info.isMariaDB() && info.hasMinVersion(10, 1, 4) || !info.isMariaDB() && info.hasMinVersion(5, 7, 6)) ? \"ST_\" : \"\";\n                    switch(value.type){\n                        case \"Point\":\n                            return prefix + \"PointFromText('POINT(\" + TextEncoder.geoPointToString(value.coordinates) + \")')\";\n                        case \"LineString\":\n                            return prefix + \"LineFromText('LINESTRING(\" + TextEncoder.geoArrayPointToString(value.coordinates) + \")')\";\n                        case \"Polygon\":\n                            return prefix + \"PolygonFromText('POLYGON(\" + TextEncoder.geoMultiArrayPointToString(value.coordinates) + \")')\";\n                        case \"MultiPoint\":\n                            return prefix + \"MULTIPOINTFROMTEXT('MULTIPOINT(\" + TextEncoder.geoArrayPointToString(value.coordinates) + \")')\";\n                        case \"MultiLineString\":\n                            return prefix + \"MLineFromText('MULTILINESTRING(\" + TextEncoder.geoMultiArrayPointToString(value.coordinates) + \")')\";\n                        case \"MultiPolygon\":\n                            return prefix + \"MPolyFromText('MULTIPOLYGON(\" + TextEncoder.geoMultiPolygonToString(value.coordinates) + \")')\";\n                        case \"GeometryCollection\":\n                            return prefix + \"GeomCollFromText('GEOMETRYCOLLECTION(\" + TextEncoder.geometricCollectionToString(value.geometries) + \")')\";\n                    }\n                } else {\n                    if (opts.permitSetMultiParamEntries) {\n                        let out = \"\";\n                        let first = true;\n                        for(let key in value){\n                            const val = value[key];\n                            if (typeof val === \"function\") continue;\n                            if (first) {\n                                first = false;\n                            } else {\n                                out += \",\";\n                            }\n                            out += \"`\" + key + \"`=\";\n                            out += (void 0).escape(opts, info, val);\n                        }\n                        if (out === \"\") return \"'\" + escapeString(JSON.stringify(value)) + \"'\";\n                        return out;\n                    } else {\n                        return \"'\" + escapeString(JSON.stringify(value)) + \"'\";\n                    }\n                }\n            }\n        default:\n            return \"'\" + escapeString(value) + \"'\";\n    }\n};\n// see https://mariadb.com/kb/en/library/string-literals/\nconst LITTERAL_ESCAPE = {\n    \"\\x00\": \"\\\\0\",\n    \"'\": \"\\\\'\",\n    '\"': '\\\\\"',\n    \"\\b\": \"\\\\b\",\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\t\": \"\\\\t\",\n    \"\\x1a\": \"\\\\Z\",\n    \"\\\\\": \"\\\\\\\\\"\n};\nconst escapeString = (val)=>{\n    const pattern = /[\\u0000'\"\\b\\n\\r\\t\\u001A\\\\]/g;\n    let offset = 0;\n    let escaped = \"\";\n    let match;\n    while(match = pattern.exec(val)){\n        escaped += val.substring(offset, match.index);\n        escaped += LITTERAL_ESCAPE[match[0]];\n        offset = pattern.lastIndex;\n    }\n    if (offset === 0) {\n        return val;\n    }\n    if (offset < val.length) {\n        escaped += val.substring(offset);\n    }\n    return escaped;\n};\nmodule.exports.escape = escapeParameters;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/misc/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/pool-callback.js":
/*!***************************************************!*\
  !*** ./node_modules/mariadb/lib/pool-callback.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst { EventEmitter } = __webpack_require__(/*! events */ \"events\");\nconst Pool = __webpack_require__(/*! ./pool */ \"(rsc)/./node_modules/mariadb/lib/pool.js\");\nconst Errors = __webpack_require__(/*! ./misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst ConnectionCallback = __webpack_require__(/*! ./connection-callback */ \"(rsc)/./node_modules/mariadb/lib/connection-callback.js\");\nconst CommandParameter = __webpack_require__(/*! ./command-parameter */ \"(rsc)/./node_modules/mariadb/lib/command-parameter.js\");\nclass PoolCallback extends EventEmitter {\n    #pool;\n    constructor(options){\n        super();\n        this.#noop = ()=>{};\n        this.#pool = new Pool(options);\n        this.#pool.on(\"acquire\", this.emit.bind(this, \"acquire\"));\n        this.#pool.on(\"connection\", this.emit.bind(this, \"connection\"));\n        this.#pool.on(\"enqueue\", this.emit.bind(this, \"enqueue\"));\n        this.#pool.on(\"release\", this.emit.bind(this, \"release\"));\n        this.#pool.on(\"error\", this.emit.bind(this, \"error\"));\n    }\n    #noop;\n    get closed() {\n        return this.#pool.closed;\n    }\n    /**\n   * Get current total connection number.\n   * @return {number}\n   */ totalConnections() {\n        return this.#pool.totalConnections();\n    }\n    /**\n   * Get current active connections.\n   * @return {number}\n   */ activeConnections() {\n        return this.#pool.activeConnections();\n    }\n    /**\n   * Get current idle connection number.\n   * @return {number}\n   */ idleConnections() {\n        return this.#pool.idleConnections();\n    }\n    /**\n   * Get current stacked connection request.\n   * @return {number}\n   */ taskQueueSize() {\n        return this.#pool.taskQueueSize();\n    }\n    escape(value) {\n        return this.#pool.escape(value);\n    }\n    escapeId(value) {\n        return this.#pool.escapeId(value);\n    }\n    /**\n   * Ends pool\n   *\n   * @param callback\n   */ end(callback) {\n        this.#pool.end().then(()=>{\n            if (callback) callback(null);\n        }).catch(callback || this.#noop);\n    }\n    /**\n   * Retrieve a connection from pool.\n   * Create a new one, if limit is not reached.\n   * wait until acquireTimeout.\n   *\n   * @param cb callback\n   */ getConnection(cb) {\n        if (!cb) {\n            throw new Errors.createError(\"missing mandatory callback parameter\", Errors.ER_MISSING_PARAMETER);\n        }\n        const cmdParam = new CommandParameter();\n        if (this.#pool.opts.connOptions.trace) Error.captureStackTrace(cmdParam);\n        this.#pool.getConnection(cmdParam).then((baseConn)=>{\n            const cc = new ConnectionCallback(baseConn);\n            cc.end = (cb)=>cc.release(cb);\n            cc.close = (cb)=>cc.release(cb);\n            cb(null, cc);\n        }).catch(cb);\n    }\n    /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param cb      callback\n   */ query(sql, values, cb) {\n        const cmdParam = ConnectionCallback._PARAM(this.#pool.opts.connOptions, sql, values, cb);\n        this.#pool.getConnection(cmdParam).then((baseConn)=>{\n            const _cb = cmdParam.callback;\n            cmdParam.callback = (err, rows, meta)=>{\n                this.#pool.release(baseConn);\n                if (_cb) _cb(err, rows, meta);\n            };\n            ConnectionCallback._QUERY_CMD(baseConn, cmdParam);\n        }).catch((err)=>{\n            if (cmdParam.callback) cmdParam.callback(err);\n        });\n    }\n    /**\n   * Execute query using binary protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param cb      callback\n   */ execute(sql, values, cb) {\n        const cmdParam = ConnectionCallback._PARAM(this.#pool.opts.connOptions, sql, values, cb);\n        this.#pool.getConnection(cmdParam).then((baseConn)=>{\n            const _cb = cmdParam.callback;\n            cmdParam.callback = (err, rows, meta)=>{\n                this.#pool.release(baseConn);\n                if (_cb) _cb(err, rows, meta);\n            };\n            ConnectionCallback._EXECUTE_CMD(baseConn, cmdParam);\n        }).catch((err)=>{\n            if (cmdParam.callback) cmdParam.callback(err);\n        });\n    }\n    /**\n   * execute a batch\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  array of placeholder values\n   * @param cb      callback\n   */ batch(sql, values, cb) {\n        const cmdParam = ConnectionCallback._PARAM(this.#pool.opts.connOptions, sql, values, cb);\n        this.#pool.getConnection(cmdParam).then((baseConn)=>{\n            const _cb = cmdParam.callback;\n            cmdParam.callback = (err, rows, meta)=>{\n                this.#pool.release(baseConn);\n                if (_cb) _cb(err, rows, meta);\n            };\n            ConnectionCallback._BATCH_CMD(baseConn, cmdParam);\n        }).catch((err)=>{\n            if (cmdParam.callback) cmdParam.callback(err);\n        });\n    }\n    /**\n   * Import sql file.\n   *\n   * @param opts JSON array with 2 possible fields: file and database\n   * @param cb callback\n   */ importFile(opts, cb) {\n        if (!opts) {\n            if (cb) cb(Errors.createError(\"SQL file parameter is mandatory\", Errors.ER_MISSING_SQL_PARAMETER, null, \"HY000\", null, false, null));\n            return;\n        }\n        this.#pool.getConnection({}).then((baseConn)=>{\n            return new Promise(baseConn.importFile.bind(baseConn, {\n                file: opts.file,\n                database: opts.database\n            })).finally(()=>{\n                this.#pool.release(baseConn);\n            });\n        }).then(()=>{\n            if (cb) cb();\n        }).catch((err)=>{\n            if (cb) cb(err);\n        });\n    }\n}\nmodule.exports = PoolCallback;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/pool-callback.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/pool-promise.js":
/*!**************************************************!*\
  !*** ./node_modules/mariadb/lib/pool-promise.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst { EventEmitter } = __webpack_require__(/*! events */ \"events\");\nconst Pool = __webpack_require__(/*! ./pool */ \"(rsc)/./node_modules/mariadb/lib/pool.js\");\nconst ConnectionPromise = __webpack_require__(/*! ./connection-promise */ \"(rsc)/./node_modules/mariadb/lib/connection-promise.js\");\nconst CommandParameter = __webpack_require__(/*! ./command-parameter */ \"(rsc)/./node_modules/mariadb/lib/command-parameter.js\");\nconst Errors = __webpack_require__(/*! ./misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nclass PoolPromise extends EventEmitter {\n    #pool;\n    constructor(options){\n        super();\n        this.#pool = new Pool(options);\n        this.#pool.on(\"acquire\", this.emit.bind(this, \"acquire\"));\n        this.#pool.on(\"connection\", this.emit.bind(this, \"connection\"));\n        this.#pool.on(\"enqueue\", this.emit.bind(this, \"enqueue\"));\n        this.#pool.on(\"release\", this.emit.bind(this, \"release\"));\n        this.#pool.on(\"error\", this.emit.bind(this, \"error\"));\n    }\n    get closed() {\n        return this.#pool.closed;\n    }\n    /**\n   * Get current total connection number.\n   * @return {number}\n   */ totalConnections() {\n        return this.#pool.totalConnections();\n    }\n    /**\n   * Get current active connections.\n   * @return {number}\n   */ activeConnections() {\n        return this.#pool.activeConnections();\n    }\n    /**\n   * Get current idle connection number.\n   * @return {number}\n   */ idleConnections() {\n        return this.#pool.idleConnections();\n    }\n    /**\n   * Get current stacked connection request.\n   * @return {number}\n   */ taskQueueSize() {\n        return this.#pool.taskQueueSize();\n    }\n    escape(value) {\n        return this.#pool.escape(value);\n    }\n    escapeId(value) {\n        return this.#pool.escapeId(value);\n    }\n    /**\n   * Ends pool\n   *\n   * @return Promise\n   **/ end() {\n        return this.#pool.end();\n    }\n    /**\n   * Retrieve a connection from pool.\n   * Create a new one, if limit is not reached.\n   * wait until acquireTimeout.\n   *\n   */ async getConnection() {\n        const cmdParam = new CommandParameter();\n        if (this.#pool.opts.connOptions.trace) Error.captureStackTrace(cmdParam);\n        const baseConn = await this.#pool.getConnection(cmdParam);\n        const conn = new ConnectionPromise(baseConn);\n        conn.release = ()=>new Promise(baseConn.release);\n        conn.end = conn.release;\n        conn.close = conn.release;\n        return conn;\n    }\n    /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   */ query(sql, values) {\n        const cmdParam = ConnectionPromise._PARAM(this.#pool.opts.connOptions, sql, values);\n        return this.#pool.getConnection(cmdParam).then((baseConn)=>{\n            return new Promise(baseConn.query.bind(baseConn, cmdParam)).finally(()=>{\n                this.#pool.release(baseConn);\n            });\n        });\n    }\n    /**\n   * Execute query using binary protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   */ execute(sql, values) {\n        const cmdParam = ConnectionPromise._PARAM(this.#pool.opts.connOptions, sql, values);\n        return this.#pool.getConnection(cmdParam).then((baseConn)=>{\n            return ConnectionPromise._EXECUTE_CMD(baseConn, cmdParam).finally(()=>{\n                this.#pool.release(baseConn);\n            });\n        });\n    }\n    /**\n   * execute a batch\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  array of placeholder values\n   */ batch(sql, values) {\n        const cmdParam = ConnectionPromise._PARAM(this.#pool.opts.connOptions, sql, values);\n        return this.#pool.getConnection(cmdParam).then((baseConn)=>{\n            return ConnectionPromise._BATCH_CMD(baseConn, cmdParam).finally(()=>{\n                this.#pool.release(baseConn);\n            });\n        });\n    }\n    /**\n   * Import sql file.\n   *\n   * @param opts JSON array with 2 possible fields: file and database\n   */ importFile(opts) {\n        if (!opts) {\n            return Promise.reject(Errors.createError(\"SQL file parameter is mandatory\", Errors.ER_MISSING_SQL_PARAMETER, null, \"HY000\", null, false, null));\n        }\n        return this.#pool.getConnection({}).then((baseConn)=>{\n            return new Promise(baseConn.importFile.bind(baseConn, {\n                file: opts.file,\n                database: opts.database\n            })).finally(()=>{\n                this.#pool.release(baseConn);\n            });\n        });\n    }\n}\nmodule.exports = PoolPromise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/pool-promise.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/lib/pool.js":
/*!******************************************!*\
  !*** ./node_modules/mariadb/lib/pool.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\nconst { EventEmitter } = __webpack_require__(/*! events */ \"events\");\nconst Queue = __webpack_require__(/*! denque */ \"(rsc)/./node_modules/denque/index.js\");\nconst Errors = __webpack_require__(/*! ./misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\");\nconst Utils = __webpack_require__(/*! ./misc/utils */ \"(rsc)/./node_modules/mariadb/lib/misc/utils.js\");\nconst Connection = __webpack_require__(/*! ./connection */ \"(rsc)/./node_modules/mariadb/lib/connection.js\");\nconst CommandParameter = __webpack_require__(/*! ./command-parameter */ \"(rsc)/./node_modules/mariadb/lib/command-parameter.js\");\nclass Pool extends EventEmitter {\n    #closed;\n    #connectionInCreation;\n    #errorCreatingConnection;\n    #idleConnections;\n    #activeConnections;\n    #requests;\n    #unusedConnectionRemoverId;\n    #requestTimeoutId;\n    #connErrorNumber;\n    #initialized;\n    constructor(options){\n        super();\n        this.#closed = false;\n        this.#connectionInCreation = false;\n        this.#errorCreatingConnection = null;\n        this.#idleConnections = new Queue();\n        this.#activeConnections = {};\n        this.#requests = new Queue();\n        this.#connErrorNumber = 0;\n        this.#initialized = false;\n        this.opts = options;\n        this.on(\"_idle\", this._requestsHandler);\n        this.on(\"validateSize\", this._sizeHandler);\n        this._sizeHandler();\n    }\n    //*****************************************************************\n    // pool automatic handlers\n    //*****************************************************************\n    _doCreateConnection(resolve, reject, timeoutEnd) {\n        this._createConnection().then((conn)=>{\n            if (this.#closed) {\n                conn.forceEnd(null, ()=>{}, ()=>{});\n                reject(new Errors.createFatalError(\"Cannot create new connection to pool, pool closed\", Errors.ER_ADD_CONNECTION_CLOSED_POOL));\n                return;\n            }\n            conn.lastUse = Date.now();\n            const nativeDestroy = conn.destroy.bind(conn);\n            const pool = this;\n            conn.destroy = function() {\n                pool._endLeak(conn);\n                delete pool.#activeConnections[conn.threadId];\n                nativeDestroy();\n                pool.emit(\"validateSize\");\n            };\n            conn.once(\"error\", function() {\n                let idx = 0;\n                let currConn;\n                pool._endLeak(conn);\n                delete pool.#activeConnections[conn.threadId];\n                while(currConn = pool.#idleConnections.peekAt(idx)){\n                    if (currConn === conn) {\n                        pool.#idleConnections.removeOne(idx);\n                        continue;\n                    }\n                    //since connection did have an error, other waiting connection might too\n                    //forcing validation when borrowed next time, even if \"minDelayValidation\" is not reached.\n                    currConn.lastUse = Math.min(currConn.lastUse, Date.now() - pool.opts.minDelayValidation);\n                    idx++;\n                }\n                setTimeout(()=>{\n                    if (!pool.#requests.isEmpty()) {\n                        pool._sizeHandler();\n                    }\n                }, 0);\n            });\n            this.#idleConnections.push(conn);\n            this.#connectionInCreation = false;\n            this.emit(\"_idle\");\n            this.emit(\"connection\", conn);\n            resolve(conn);\n        }).catch((err)=>{\n            //if timeout is reached or authentication fail return error\n            if (this.#closed || err.errno && (err.errno === 1524 || err.errno === 1045 || err.errno === 1698) || timeoutEnd < Date.now()) {\n                err.message = err.message + this._errorMsgAddon();\n                reject(err);\n                return;\n            }\n            setTimeout(this._doCreateConnection.bind(this, resolve, reject, timeoutEnd), 500);\n        });\n    }\n    _destroy(conn) {\n        this._endLeak(conn);\n        delete this.#activeConnections[conn.threadId];\n        conn.lastUse = Date.now();\n        conn.forceEnd(null, ()=>{}, ()=>{});\n        if (this.totalConnections() === 0) {\n            this._stopReaping();\n        }\n        this.emit(\"validateSize\");\n    }\n    release(conn) {\n        // ensure releasing only once\n        if (this.#activeConnections[conn.threadId]) {\n            this._endLeak(conn);\n            this.#activeConnections[conn.threadId] = null;\n            conn.lastUse = Date.now();\n            if (this.#closed) {\n                conn.forceEnd(null, ()=>{}, ()=>{});\n            } else if (conn.isValid()) {\n                this.emit(\"release\", conn);\n                this.#idleConnections.push(conn);\n                process.nextTick(this.emit.bind(this, \"_idle\"));\n            } else {\n                this.emit(\"validateSize\");\n            }\n        }\n    }\n    _checkLeak(conn) {\n        conn.lastUse = Date.now();\n        conn.leaked = false;\n        conn.leakProcess = setTimeout((conn)=>{\n            conn.leaked = true;\n            conn.opts.logger.warning(`A possible connection leak on the thread ${conn.info.threadId} (the connection not returned to the pool since ${Date.now() - conn.lastUse} ms). Has the connection.release() been called ?` + this._errorMsgAddon());\n        }, this.opts.leakDetectionTimeout, conn);\n    }\n    _endLeak(conn) {\n        if (conn.leakProcess) {\n            clearTimeout(conn.leakProcess);\n            conn.leakProcess = null;\n            if (conn.leaked) {\n                conn.opts.logger.warning(`Previous possible leak connection with thread ${conn.info.threadId} was returned to pool`);\n            }\n        }\n    }\n    /**\n   * Permit to remove idle connection if unused for some time.\n   */ _startReaping() {\n        if (!this.#unusedConnectionRemoverId && this.opts.idleTimeout > 0) {\n            this.#unusedConnectionRemoverId = setInterval(this._reaper.bind(this), 500);\n        }\n    }\n    _stopReaping() {\n        if (this.#unusedConnectionRemoverId && this.totalConnections() === 0) {\n            clearInterval(this.#unusedConnectionRemoverId);\n        }\n    }\n    _reaper() {\n        const idleTimeRemoval = Date.now() - this.opts.idleTimeout * 1000;\n        let maxRemoval = Math.max(0, this.#idleConnections.length - this.opts.minimumIdle);\n        while(maxRemoval > 0){\n            const conn = this.#idleConnections.peek();\n            maxRemoval--;\n            if (conn && conn.lastUse < idleTimeRemoval) {\n                this.#idleConnections.shift();\n                conn.forceEnd(null, ()=>{}, ()=>{});\n                continue;\n            }\n            break;\n        }\n        if (this.totalConnections() === 0) {\n            this._stopReaping();\n        }\n        this.emit(\"validateSize\");\n    }\n    _shouldCreateMoreConnections() {\n        return !this.#connectionInCreation && this.#idleConnections.length < this.opts.minimumIdle && this.totalConnections() < this.opts.connectionLimit && !this.#closed;\n    }\n    /**\n   * Grow pool connections until reaching connection limit.\n   */ _sizeHandler() {\n        if (this._shouldCreateMoreConnections() && !this._sizeHandlerTimeout) {\n            this.#connectionInCreation = true;\n            setImmediate((function() {\n                const timeoutEnd = Date.now() + this.opts.initializationTimeout;\n                new Promise((resolve, reject)=>{\n                    this._doCreateConnection(resolve, reject, timeoutEnd);\n                }).then(()=>{\n                    this.#initialized = true;\n                    this.#errorCreatingConnection = null;\n                    this.#connErrorNumber = 0;\n                    if (this._shouldCreateMoreConnections()) {\n                        this.emit(\"validateSize\");\n                    }\n                    this._startReaping();\n                }).catch((err)=>{\n                    this.#connectionInCreation = false;\n                    if (!this.#closed) {\n                        if (!this.#initialized) {\n                            err.message = \"Error during pool initialization: \" + err.message;\n                        } else {\n                            err.message = \"Pool fails to create connection: \" + err.message;\n                        }\n                        this.#errorCreatingConnection = err;\n                        this.emit(\"error\", err);\n                        //delay next try\n                        this._sizeHandlerTimeout = setTimeout((function() {\n                            this._sizeHandlerTimeout = null;\n                            if (!this.#requests.isEmpty()) {\n                                this._sizeHandler();\n                            }\n                        }).bind(this), Math.min(++this.#connErrorNumber * 500, 10000));\n                    }\n                });\n            }).bind(this));\n        }\n    }\n    /**\n   * Launch next waiting task request if available connections.\n   */ _requestsHandler() {\n        clearTimeout(this.#requestTimeoutId);\n        this.#requestTimeoutId = null;\n        const request = this.#requests.shift();\n        if (request) {\n            const conn = this.#idleConnections.shift();\n            if (conn) {\n                if (this.opts.leakDetectionTimeout > 0) this._checkLeak(conn);\n                this.emit(\"acquire\", conn);\n                this.#activeConnections[conn.threadId] = conn;\n                request.resolver(conn);\n            } else {\n                this.#requests.unshift(request);\n            }\n            this._requestTimeoutHandler();\n        }\n    }\n    _hasIdleConnection() {\n        return !this.#idleConnections.isEmpty();\n    }\n    /**\n   * Return an idle Connection.\n   * If connection has not been used for some time ( minDelayValidation), validate connection status.\n   *\n   * @returns {Promise<Connection>} connection of null of no valid idle connection.\n   */ async _doAcquire() {\n        if (!this._hasIdleConnection() || this.#closed) return Promise.reject();\n        let conn;\n        let mustRecheckSize = false;\n        while((conn = this.#idleConnections.shift()) != null){\n            //just check connection state first\n            if (conn.isValid()) {\n                this.#activeConnections[conn.threadId] = conn;\n                //if not used for some time, validate connection with a COM_PING\n                if (this.opts.minDelayValidation <= 0 || Date.now() - conn.lastUse > this.opts.minDelayValidation) {\n                    try {\n                        const cmdParam = new CommandParameter(null, null, {\n                            timeout: this.opts.pingTimeout\n                        });\n                        await new Promise(conn.ping.bind(conn, cmdParam));\n                    } catch (e) {\n                        delete this.#activeConnections[conn.threadId];\n                        continue;\n                    }\n                }\n                if (this.opts.leakDetectionTimeout > 0) this._checkLeak(conn);\n                if (mustRecheckSize) setImmediate(this.emit.bind(this, \"validateSize\"));\n                return Promise.resolve(conn);\n            }\n            mustRecheckSize = true;\n        }\n        setImmediate(this.emit.bind(this, \"validateSize\"));\n        return Promise.reject();\n    }\n    _requestTimeoutHandler() {\n        //handle next Timer\n        this.#requestTimeoutId = null;\n        const currTime = Date.now();\n        let request;\n        while(request = this.#requests.peekFront()){\n            if (request.timeout <= currTime) {\n                this.#requests.shift();\n                let err = Errors.createError(`retrieve connection from pool timeout after ${Math.abs(Date.now() - (request.timeout - this.opts.acquireTimeout))}ms${this._errorMsgAddon()}`, Errors.ER_GET_CONNECTION_TIMEOUT, null, \"HY000\", null, false, request.stack);\n                // in order to provide more information when configuration is wrong / server is down\n                if (this.activeConnections() === 0 && this.#errorCreatingConnection) {\n                    const errConnMsg = this.#errorCreatingConnection.message.split(\"\\n\")[0];\n                    err.message = err.message + `\\n    connection error: ${errConnMsg}`;\n                }\n                request.reject(err);\n            } else {\n                this.#requestTimeoutId = setTimeout(this._requestTimeoutHandler.bind(this), request.timeout - currTime);\n                return;\n            }\n        }\n    }\n    /**\n   * Search info object of an existing connection. to know server type and version.\n   * @returns information object if connection available.\n   */ _searchInfo() {\n        let info = null;\n        let conn = this.#idleConnections.get(0);\n        if (!conn) {\n            for(const threadId in Object.keys(this.#activeConnections)){\n                conn = this.#activeConnections[threadId];\n                if (!conn) {\n                    break;\n                }\n            }\n        }\n        if (conn) {\n            info = conn.info;\n        }\n        return info;\n    }\n    _rejectTask(task, err) {\n        clearTimeout(this.#requestTimeoutId);\n        this.#requestTimeoutId = null;\n        task.reject(err);\n        this._requestTimeoutHandler();\n    }\n    async _createConnection() {\n        const conn = new Connection(this.opts.connOptions);\n        await conn.connect();\n        const pool = this;\n        conn.forceEnd = conn.end;\n        conn.release = function(resolve) {\n            if (pool.#closed || !conn.isValid()) {\n                pool._destroy(conn);\n                resolve();\n                return;\n            }\n            if (pool.opts.noControlAfterUse) {\n                pool.release(conn);\n                resolve();\n                return;\n            }\n            //if server permit it, reset the connection, or rollback only if not\n            // COM_RESET_CONNECTION exist since mysql 5.7.3 and mariadb 10.2.4\n            // but not possible to use it with mysql waiting for https://bugs.mysql.com/bug.php?id=97633 correction.\n            // and mariadb only since https://jira.mariadb.org/browse/MDEV-18281\n            let revertFunction;\n            if (pool.opts.resetAfterUse && conn.info.isMariaDB() && (conn.info.serverVersion.minor === 2 && conn.info.hasMinVersion(10, 2, 22) || conn.info.hasMinVersion(10, 3, 13))) {\n                revertFunction = conn.reset.bind(conn, new CommandParameter());\n            } else revertFunction = conn.changeTransaction.bind(conn, new CommandParameter(\"ROLLBACK\"));\n            new Promise(revertFunction).then(pool.release.bind(pool, conn), pool._destroy.bind(pool, conn)).finally(resolve);\n        };\n        conn.end = conn.release;\n        return conn;\n    }\n    _leakedConnections() {\n        let counter = 0;\n        for (const connection of Object.values(this.#activeConnections)){\n            if (connection && connection.leaked) counter++;\n        }\n        return counter;\n    }\n    _errorMsgAddon() {\n        if (this.opts.leakDetectionTimeout > 0) {\n            return `\\n    (pool connections: active=${this.activeConnections()} idle=${this.idleConnections()} leak=${this._leakedConnections()} limit=${this.opts.connectionLimit})`;\n        }\n        return `\\n    (pool connections: active=${this.activeConnections()} idle=${this.idleConnections()} limit=${this.opts.connectionLimit})`;\n    }\n    //*****************************************************************\n    // public methods\n    //*****************************************************************\n    get closed() {\n        return this.#closed;\n    }\n    /**\n   * Get current total connection number.\n   * @return {number}\n   */ totalConnections() {\n        return this.activeConnections() + this.idleConnections();\n    }\n    /**\n   * Get current active connections.\n   * @return {number}\n   */ activeConnections() {\n        let counter = 0;\n        for (const connection of Object.values(this.#activeConnections)){\n            if (connection) counter++;\n        }\n        return counter;\n    }\n    /**\n   * Get current idle connection number.\n   * @return {number}\n   */ idleConnections() {\n        return this.#idleConnections.length;\n    }\n    /**\n   * Get current stacked connection request.\n   * @return {number}\n   */ taskQueueSize() {\n        return this.#requests.length;\n    }\n    escape(value) {\n        return Utils.escape(this.opts.connOptions, this._searchInfo(), value);\n    }\n    escapeId(value) {\n        return Utils.escapeId(this.opts.connOptions, this._searchInfo(), value);\n    }\n    //*****************************************************************\n    // promise methods\n    //*****************************************************************\n    /**\n   * Retrieve a connection from pool.\n   * Create a new one, if limit is not reached.\n   * wait until acquireTimeout.\n   * @param cmdParam for stackTrace error\n   * @return {Promise}\n   */ getConnection(cmdParam) {\n        if (this.#closed) {\n            return Promise.reject(Errors.createError(\"pool is closed\", Errors.ER_POOL_ALREADY_CLOSED, null, \"HY000\", null, false, cmdParam.stack));\n        }\n        return this._doAcquire().then((conn)=>{\n            // connection is available. process task\n            this.emit(\"acquire\", conn);\n            return conn;\n        }, ()=>{\n            if (this.#closed) {\n                throw Errors.createError(\"Cannot add request to pool, pool is closed\", Errors.ER_POOL_ALREADY_CLOSED, null, \"HY000\", null, false, cmdParam.stack);\n            }\n            // no idle connection available\n            // create a new connection if limit is not reached\n            setImmediate(this.emit.bind(this, \"validateSize\"));\n            return new Promise((function(resolver, rejecter) {\n                // stack request\n                setImmediate(this.emit.bind(this, \"enqueue\"));\n                const request = new Request(Date.now() + this.opts.acquireTimeout, cmdParam.stack, resolver, rejecter);\n                this.#requests.push(request);\n                if (!this.#requestTimeoutId) {\n                    this.#requestTimeoutId = setTimeout(this._requestTimeoutHandler.bind(this), this.opts.acquireTimeout);\n                }\n            }).bind(this));\n        });\n    }\n    /**\n   * Close all connection in pool\n   * Ends in multiple step :\n   * - close idle connections\n   * - ensure that no new request is possible\n   *   (active connection release are automatically closed on release)\n   * - if remaining, after 10 seconds, close remaining active connections\n   *\n   * @return Promise\n   */ end() {\n        if (this.#closed) {\n            return Promise.reject(Errors.createError(\"pool is already closed\", Errors.ER_POOL_ALREADY_CLOSED));\n        }\n        this.#closed = true;\n        clearInterval(this.#unusedConnectionRemoverId);\n        clearInterval(this._sizeHandlerTimeout);\n        const cmdParam = new CommandParameter();\n        if (this.opts.trace) Error.captureStackTrace(cmdParam);\n        //close unused connections\n        const idleConnectionsEndings = [];\n        let conn;\n        while(conn = this.#idleConnections.shift()){\n            idleConnectionsEndings.push(new Promise(conn.forceEnd.bind(conn, cmdParam)));\n        }\n        clearTimeout(this.#requestTimeoutId);\n        this.#requestTimeoutId = null;\n        //reject all waiting task\n        if (!this.#requests.isEmpty()) {\n            const err = Errors.createError(\"pool is ending, connection request aborted\", Errors.ER_CLOSING_POOL, null, \"HY000\", null, false, cmdParam.stack);\n            let task;\n            while(task = this.#requests.shift()){\n                task.reject(err);\n            }\n        }\n        const pool = this;\n        return Promise.all(idleConnectionsEndings).then(async ()=>{\n            if (pool.activeConnections() > 0) {\n                // wait up to 10 seconds, that active connection are released\n                let remaining = 100;\n                while(remaining-- > 0){\n                    if (pool.activeConnections() > 0) {\n                        await new Promise((res)=>setTimeout(()=>res(), 100));\n                    }\n                }\n                // force close any remaining active connections\n                for (const connection of Object.values(pool.#activeConnections)){\n                    if (connection) connection.destroy();\n                }\n            }\n            return Promise.resolve();\n        });\n    }\n}\nclass Request {\n    constructor(timeout, stack, resolver, rejecter){\n        this.timeout = timeout;\n        this.stack = stack;\n        this.resolver = resolver;\n        this.rejecter = rejecter;\n    }\n    reject(err) {\n        process.nextTick(this.rejecter, err);\n    }\n}\nmodule.exports = Pool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9saWIvcG9vbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsa0RBQWtEO0FBRWxEO0FBRUEsTUFBTSxFQUFFQSxZQUFZLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFFakMsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUUsU0FBU0YsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUcsUUFBUUgsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUksYUFBYUosbUJBQU9BLENBQUM7QUFDM0IsTUFBTUssbUJBQW1CTCxtQkFBT0EsQ0FBQztBQUVqQyxNQUFNTSxhQUFhUDtJQUVqQixDQUFDUSxNQUFNLENBQVM7SUFDaEIsQ0FBQ0Msb0JBQW9CLENBQVM7SUFDOUIsQ0FBQ0MsdUJBQXVCLENBQVE7SUFDaEMsQ0FBQ0MsZUFBZSxDQUFlO0lBQy9CLENBQUNDLGlCQUFpQixDQUFNO0lBQ3hCLENBQUNDLFFBQVEsQ0FBZTtJQUN4QixDQUFDQyx5QkFBeUIsQ0FBQztJQUMzQixDQUFDQyxnQkFBZ0IsQ0FBQztJQUNsQixDQUFDQyxlQUFlLENBQUs7SUFDckIsQ0FBQ0MsV0FBVyxDQUFTO0lBR3JCQyxZQUFZQyxPQUFPLENBQUU7UUFDbkIsS0FBSzthQWJQLENBQUNYLE1BQU0sR0FBRzthQUNWLENBQUNDLG9CQUFvQixHQUFHO2FBQ3hCLENBQUNDLHVCQUF1QixHQUFHO2FBQzNCLENBQUNDLGVBQWUsR0FBRyxJQUFJVDthQUN2QixDQUFDVSxpQkFBaUIsR0FBRyxDQUFDO2FBQ3RCLENBQUNDLFFBQVEsR0FBRyxJQUFJWDthQUdoQixDQUFDYyxlQUFlLEdBQUc7YUFDbkIsQ0FBQ0MsV0FBVyxHQUFHO1FBS2IsSUFBSSxDQUFDRyxJQUFJLEdBQUdEO1FBRVosSUFBSSxDQUFDRSxFQUFFLENBQUMsU0FBUyxJQUFJLENBQUNDLGdCQUFnQjtRQUN0QyxJQUFJLENBQUNELEVBQUUsQ0FBQyxnQkFBZ0IsSUFBSSxDQUFD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RUFBRztvQkFDdEIsSUFBSS9HLEtBQUs1QixpQkFBaUIsS0FBSyxHQUFHO3dCQUNoQyxNQUFNLElBQUlnRixRQUFRLENBQUM0RCxNQUFRcEcsV0FBVyxJQUFNb0csT0FBTztvQkFDckQ7Z0JBQ0Y7Z0JBRUEsK0NBQStDO2dCQUMvQyxLQUFLLE1BQU1qQixjQUFjbkIsT0FBT29CLE1BQU0sQ0FBQ2hHLEtBQUssQ0FBQzVCLGlCQUFpQixFQUFHO29CQUMvRCxJQUFJMkgsWUFBWUEsV0FBV2pHLE9BQU87Z0JBQ3BDO1lBQ0Y7WUFDQSxPQUFPc0QsUUFBUW5FLE9BQU87UUFDeEI7SUFDRjtBQUNGO0FBRUEsTUFBTXVIO0lBQ0o5SCxZQUFZbUYsT0FBTyxFQUFFVSxLQUFLLEVBQUVqQixRQUFRLEVBQUVpRCxRQUFRLENBQUU7UUFDOUMsSUFBSSxDQUFDMUMsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ1UsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ2pCLFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDaUQsUUFBUSxHQUFHQTtJQUNsQjtJQUVBckgsT0FBTzhCLEdBQUcsRUFBRTtRQUNWUyxRQUFRQyxRQUFRLENBQUMsSUFBSSxDQUFDNkUsUUFBUSxFQUFFdkY7SUFDbEM7QUFDRjtBQUVBaUcsT0FBT0MsT0FBTyxHQUFHbkoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZm5leHRqcy8uL25vZGVfbW9kdWxlcy9tYXJpYWRiL2xpYi9wb29sLmpzP2FlNDgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IEV2ZW50RW1pdHRlciB9ID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbmNvbnN0IFF1ZXVlID0gcmVxdWlyZSgnZGVucXVlJyk7XG5jb25zdCBFcnJvcnMgPSByZXF1aXJlKCcuL21pc2MvZXJyb3JzJyk7XG5jb25zdCBVdGlscyA9IHJlcXVpcmUoJy4vbWlzYy91dGlscycpO1xuY29uc3QgQ29ubmVjdGlvbiA9IHJlcXVpcmUoJy4vY29ubmVjdGlvbicpO1xuY29uc3QgQ29tbWFuZFBhcmFtZXRlciA9IHJlcXVpcmUoJy4vY29tbWFuZC1wYXJhbWV0ZXInKTtcblxuY2xhc3MgUG9vbCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIG9wdHM7XG4gICNjbG9zZWQgPSBmYWxzZTtcbiAgI2Nvbm5lY3Rpb25JbkNyZWF0aW9uID0gZmFsc2U7XG4gICNlcnJvckNyZWF0aW5nQ29ubmVjdGlvbiA9IG51bGw7XG4gICNpZGxlQ29ubmVjdGlvbnMgPSBuZXcgUXVldWUoKTtcbiAgI2FjdGl2ZUNvbm5lY3Rpb25zID0ge307XG4gICNyZXF1ZXN0cyA9IG5ldyBRdWV1ZSgpO1xuICAjdW51c2VkQ29ubmVjdGlvblJlbW92ZXJJZDtcbiAgI3JlcXVlc3RUaW1lb3V0SWQ7XG4gICNjb25uRXJyb3JOdW1iZXIgPSAwO1xuICAjaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgX3NpemVIYW5kbGVyVGltZW91dDtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9wdHMgPSBvcHRpb25zO1xuXG4gICAgdGhpcy5vbignX2lkbGUnLCB0aGlzLl9yZXF1ZXN0c0hhbmRsZXIpO1xuICAgIHRoaXMub24oJ3ZhbGlkYXRlU2l6ZScsIHRoaXMuX3NpemVIYW5kbGVyKTtcbiAgICB0aGlzLl9zaXplSGFuZGxlcigpO1xuICB9XG5cbiAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAvLyBwb29sIGF1dG9tYXRpYyBoYW5kbGVyc1xuICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgX2RvQ3JlYXRlQ29ubmVjdGlvbihyZXNvbHZlLCByZWplY3QsIHRpbWVvdXRFbmQpIHtcbiAgICB0aGlzLl9jcmVhdGVDb25uZWN0aW9uKClcbiAgICAgIC50aGVuKChjb25uKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLiNjbG9zZWQpIHtcbiAgICAgICAgICBjb25uLmZvcmNlRW5kKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICgpID0+IHt9LFxuICAgICAgICAgICAgKCkgPT4ge31cbiAgICAgICAgICApO1xuICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgIG5ldyBFcnJvcnMuY3JlYXRlRmF0YWxFcnJvcihcbiAgICAgICAgICAgICAgJ0Nhbm5vdCBjcmVhdGUgbmV3IGNvbm5lY3Rpb24gdG8gcG9vbCwgcG9vbCBjbG9zZWQnLFxuICAgICAgICAgICAgICBFcnJvcnMuRVJfQUREX0NPTk5FQ1RJT05fQ0xPU0VEX1BPT0xcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbm4ubGFzdFVzZSA9IERhdGUubm93KCk7XG4gICAgICAgIGNvbnN0IG5hdGl2ZURlc3Ryb3kgPSBjb25uLmRlc3Ryb3kuYmluZChjb25uKTtcbiAgICAgICAgY29uc3QgcG9vbCA9IHRoaXM7XG5cbiAgICAgICAgY29ubi5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBvb2wuX2VuZExlYWsoY29ubik7XG4gICAgICAgICAgZGVsZXRlIHBvb2wuI2FjdGl2ZUNvbm5lY3Rpb25zW2Nvbm4udGhyZWFkSWRdO1xuICAgICAgICAgIG5hdGl2ZURlc3Ryb3koKTtcbiAgICAgICAgICBwb29sLmVtaXQoJ3ZhbGlkYXRlU2l6ZScpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbm4ub25jZSgnZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbGV0IGlkeCA9IDA7XG4gICAgICAgICAgbGV0IGN1cnJDb25uO1xuICAgICAgICAgIHBvb2wuX2VuZExlYWsoY29ubik7XG4gICAgICAgICAgZGVsZXRlIHBvb2wuI2FjdGl2ZUNvbm5lY3Rpb25zW2Nvbm4udGhyZWFkSWRdO1xuICAgICAgICAgIHdoaWxlICgoY3VyckNvbm4gPSBwb29sLiNpZGxlQ29ubmVjdGlvbnMucGVla0F0KGlkeCkpKSB7XG4gICAgICAgICAgICBpZiAoY3VyckNvbm4gPT09IGNvbm4pIHtcbiAgICAgICAgICAgICAgcG9vbC4jaWRsZUNvbm5lY3Rpb25zLnJlbW92ZU9uZShpZHgpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vc2luY2UgY29ubmVjdGlvbiBkaWQgaGF2ZSBhbiBlcnJvciwgb3RoZXIgd2FpdGluZyBjb25uZWN0aW9uIG1pZ2h0IHRvb1xuICAgICAgICAgICAgLy9mb3JjaW5nIHZhbGlkYXRpb24gd2hlbiBib3Jyb3dlZCBuZXh0IHRpbWUsIGV2ZW4gaWYgXCJtaW5EZWxheVZhbGlkYXRpb25cIiBpcyBub3QgcmVhY2hlZC5cbiAgICAgICAgICAgIGN1cnJDb25uLmxhc3RVc2UgPSBNYXRoLm1pbihjdXJyQ29ubi5sYXN0VXNlLCBEYXRlLm5vdygpIC0gcG9vbC5vcHRzLm1pbkRlbGF5VmFsaWRhdGlvbik7XG4gICAgICAgICAgICBpZHgrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXBvb2wuI3JlcXVlc3RzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICBwb29sLl9zaXplSGFuZGxlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLiNpZGxlQ29ubmVjdGlvbnMucHVzaChjb25uKTtcbiAgICAgICAgdGhpcy4jY29ubmVjdGlvbkluQ3JlYXRpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbWl0KCdfaWRsZScpO1xuICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3Rpb24nLCBjb25uKTtcbiAgICAgICAgcmVzb2x2ZShjb25uKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAvL2lmIHRpbWVvdXQgaXMgcmVhY2hlZCBvciBhdXRoZW50aWNhdGlvbiBmYWlsIHJldHVybiBlcnJvclxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy4jY2xvc2VkIHx8XG4gICAgICAgICAgKGVyci5lcnJubyAmJiAoZXJyLmVycm5vID09PSAxNTI0IHx8IGVyci5lcnJubyA9PT0gMTA0NSB8fCBlcnIuZXJybm8gPT09IDE2OTgpKSB8fFxuICAgICAgICAgIHRpbWVvdXRFbmQgPCBEYXRlLm5vdygpXG4gICAgICAgICkge1xuICAgICAgICAgIGVyci5tZXNzYWdlID0gZXJyLm1lc3NhZ2UgKyB0aGlzLl9lcnJvck1zZ0FkZG9uKCk7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5fZG9DcmVhdGVDb25uZWN0aW9uLmJpbmQodGhpcywgcmVzb2x2ZSwgcmVqZWN0LCB0aW1lb3V0RW5kKSwgNTAwKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgX2Rlc3Ryb3koY29ubikge1xuICAgIHRoaXMuX2VuZExlYWsoY29ubik7XG4gICAgZGVsZXRlIHRoaXMuI2FjdGl2ZUNvbm5lY3Rpb25zW2Nvbm4udGhyZWFkSWRdO1xuICAgIGNvbm4ubGFzdFVzZSA9IERhdGUubm93KCk7XG4gICAgY29ubi5mb3JjZUVuZChcbiAgICAgIG51bGwsXG4gICAgICAoKSA9PiB7fSxcbiAgICAgICgpID0+IHt9XG4gICAgKTtcblxuICAgIGlmICh0aGlzLnRvdGFsQ29ubmVjdGlvbnMoKSA9PT0gMCkge1xuICAgICAgdGhpcy5fc3RvcFJlYXBpbmcoKTtcbiAgICB9XG5cbiAgICB0aGlzLmVtaXQoJ3ZhbGlkYXRlU2l6ZScpO1xuICB9XG5cbiAgcmVsZWFzZShjb25uKSB7XG4gICAgLy8gZW5zdXJlIHJlbGVhc2luZyBvbmx5IG9uY2VcbiAgICBpZiAodGhpcy4jYWN0aXZlQ29ubmVjdGlvbnNbY29ubi50aHJlYWRJZF0pIHtcbiAgICAgIHRoaXMuX2VuZExlYWsoY29ubik7XG4gICAgICB0aGlzLiNhY3RpdmVDb25uZWN0aW9uc1tjb25uLnRocmVhZElkXSA9IG51bGw7XG4gICAgICBjb25uLmxhc3RVc2UgPSBEYXRlLm5vdygpO1xuXG4gICAgICBpZiAodGhpcy4jY2xvc2VkKSB7XG4gICAgICAgIGNvbm4uZm9yY2VFbmQoXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAoKSA9PiB7fSxcbiAgICAgICAgICAoKSA9PiB7fVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChjb25uLmlzVmFsaWQoKSkge1xuICAgICAgICB0aGlzLmVtaXQoJ3JlbGVhc2UnLCBjb25uKTtcbiAgICAgICAgdGhpcy4jaWRsZUNvbm5lY3Rpb25zLnB1c2goY29ubik7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2sodGhpcy5lbWl0LmJpbmQodGhpcywgJ19pZGxlJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbWl0KCd2YWxpZGF0ZVNpemUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfY2hlY2tMZWFrKGNvbm4pIHtcbiAgICBjb25uLmxhc3RVc2UgPSBEYXRlLm5vdygpO1xuICAgIGNvbm4ubGVha2VkID0gZmFsc2U7XG4gICAgY29ubi5sZWFrUHJvY2VzcyA9IHNldFRpbWVvdXQoXG4gICAgICAoY29ubikgPT4ge1xuICAgICAgICBjb25uLmxlYWtlZCA9IHRydWU7XG4gICAgICAgIGNvbm4ub3B0cy5sb2dnZXIud2FybmluZyhcbiAgICAgICAgICBgQSBwb3NzaWJsZSBjb25uZWN0aW9uIGxlYWsgb24gdGhlIHRocmVhZCAke1xuICAgICAgICAgICAgY29ubi5pbmZvLnRocmVhZElkXG4gICAgICAgICAgfSAodGhlIGNvbm5lY3Rpb24gbm90IHJldHVybmVkIHRvIHRoZSBwb29sIHNpbmNlICR7XG4gICAgICAgICAgICBEYXRlLm5vdygpIC0gY29ubi5sYXN0VXNlXG4gICAgICAgICAgfSBtcykuIEhhcyB0aGUgY29ubmVjdGlvbi5yZWxlYXNlKCkgYmVlbiBjYWxsZWQgP2AgKyB0aGlzLl9lcnJvck1zZ0FkZG9uKClcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICB0aGlzLm9wdHMubGVha0RldGVjdGlvblRpbWVvdXQsXG4gICAgICBjb25uXG4gICAgKTtcbiAgfVxuXG4gIF9lbmRMZWFrKGNvbm4pIHtcbiAgICBpZiAoY29ubi5sZWFrUHJvY2Vzcykge1xuICAgICAgY2xlYXJUaW1lb3V0KGNvbm4ubGVha1Byb2Nlc3MpO1xuICAgICAgY29ubi5sZWFrUHJvY2VzcyA9IG51bGw7XG4gICAgICBpZiAoY29ubi5sZWFrZWQpIHtcbiAgICAgICAgY29ubi5vcHRzLmxvZ2dlci53YXJuaW5nKFxuICAgICAgICAgIGBQcmV2aW91cyBwb3NzaWJsZSBsZWFrIGNvbm5lY3Rpb24gd2l0aCB0aHJlYWQgJHtjb25uLmluZm8udGhyZWFkSWR9IHdhcyByZXR1cm5lZCB0byBwb29sYFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJtaXQgdG8gcmVtb3ZlIGlkbGUgY29ubmVjdGlvbiBpZiB1bnVzZWQgZm9yIHNvbWUgdGltZS5cbiAgICovXG4gIF9zdGFydFJlYXBpbmcoKSB7XG4gICAgaWYgKCF0aGlzLiN1bnVzZWRDb25uZWN0aW9uUmVtb3ZlcklkICYmIHRoaXMub3B0cy5pZGxlVGltZW91dCA+IDApIHtcbiAgICAgIHRoaXMuI3VudXNlZENvbm5lY3Rpb25SZW1vdmVySWQgPSBzZXRJbnRlcnZhbCh0aGlzLl9yZWFwZXIuYmluZCh0aGlzKSwgNTAwKTtcbiAgICB9XG4gIH1cblxuICBfc3RvcFJlYXBpbmcoKSB7XG4gICAgaWYgKHRoaXMuI3VudXNlZENvbm5lY3Rpb25SZW1vdmVySWQgJiYgdGhpcy50b3RhbENvbm5lY3Rpb25zKCkgPT09IDApIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy4jdW51c2VkQ29ubmVjdGlvblJlbW92ZXJJZCk7XG4gICAgfVxuICB9XG5cbiAgX3JlYXBlcigpIHtcbiAgICBjb25zdCBpZGxlVGltZVJlbW92YWwgPSBEYXRlLm5vdygpIC0gdGhpcy5vcHRzLmlkbGVUaW1lb3V0ICogMTAwMDtcbiAgICBsZXQgbWF4UmVtb3ZhbCA9IE1hdGgubWF4KDAsIHRoaXMuI2lkbGVDb25uZWN0aW9ucy5sZW5ndGggLSB0aGlzLm9wdHMubWluaW11bUlkbGUpO1xuICAgIHdoaWxlIChtYXhSZW1vdmFsID4gMCkge1xuICAgICAgY29uc3QgY29ubiA9IHRoaXMuI2lkbGVDb25uZWN0aW9ucy5wZWVrKCk7XG4gICAgICBtYXhSZW1vdmFsLS07XG4gICAgICBpZiAoY29ubiAmJiBjb25uLmxhc3RVc2UgPCBpZGxlVGltZVJlbW92YWwpIHtcbiAgICAgICAgdGhpcy4jaWRsZUNvbm5lY3Rpb25zLnNoaWZ0KCk7XG4gICAgICAgIGNvbm4uZm9yY2VFbmQoXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICAoKSA9PiB7fSxcbiAgICAgICAgICAoKSA9PiB7fVxuICAgICAgICApO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRvdGFsQ29ubmVjdGlvbnMoKSA9PT0gMCkge1xuICAgICAgdGhpcy5fc3RvcFJlYXBpbmcoKTtcbiAgICB9XG4gICAgdGhpcy5lbWl0KCd2YWxpZGF0ZVNpemUnKTtcbiAgfVxuXG4gIF9zaG91bGRDcmVhdGVNb3JlQ29ubmVjdGlvbnMoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICF0aGlzLiNjb25uZWN0aW9uSW5DcmVhdGlvbiAmJlxuICAgICAgdGhpcy4jaWRsZUNvbm5lY3Rpb25zLmxlbmd0aCA8IHRoaXMub3B0cy5taW5pbXVtSWRsZSAmJlxuICAgICAgdGhpcy50b3RhbENvbm5lY3Rpb25zKCkgPCB0aGlzLm9wdHMuY29ubmVjdGlvbkxpbWl0ICYmXG4gICAgICAhdGhpcy4jY2xvc2VkXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHcm93IHBvb2wgY29ubmVjdGlvbnMgdW50aWwgcmVhY2hpbmcgY29ubmVjdGlvbiBsaW1pdC5cbiAgICovXG4gIF9zaXplSGFuZGxlcigpIHtcbiAgICBpZiAodGhpcy5fc2hvdWxkQ3JlYXRlTW9yZUNvbm5lY3Rpb25zKCkgJiYgIXRoaXMuX3NpemVIYW5kbGVyVGltZW91dCkge1xuICAgICAgdGhpcy4jY29ubmVjdGlvbkluQ3JlYXRpb24gPSB0cnVlO1xuICAgICAgc2V0SW1tZWRpYXRlKFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgdGltZW91dEVuZCA9IERhdGUubm93KCkgKyB0aGlzLm9wdHMuaW5pdGlhbGl6YXRpb25UaW1lb3V0O1xuICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2RvQ3JlYXRlQ29ubmVjdGlvbihyZXNvbHZlLCByZWplY3QsIHRpbWVvdXRFbmQpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuI2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhpcy4jZXJyb3JDcmVhdGluZ0Nvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgICB0aGlzLiNjb25uRXJyb3JOdW1iZXIgPSAwO1xuICAgICAgICAgICAgICBpZiAodGhpcy5fc2hvdWxkQ3JlYXRlTW9yZUNvbm5lY3Rpb25zKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3ZhbGlkYXRlU2l6ZScpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMuX3N0YXJ0UmVhcGluZygpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuI2Nvbm5lY3Rpb25JbkNyZWF0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmICghdGhpcy4jY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLiNpbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPSAnRXJyb3IgZHVyaW5nIHBvb2wgaW5pdGlhbGl6YXRpb246ICcgKyBlcnIubWVzc2FnZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPSAnUG9vbCBmYWlscyB0byBjcmVhdGUgY29ubmVjdGlvbjogJyArIGVyci5tZXNzYWdlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLiNlcnJvckNyZWF0aW5nQ29ubmVjdGlvbiA9IGVycjtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcblxuICAgICAgICAgICAgICAgIC8vZGVsYXkgbmV4dCB0cnlcbiAgICAgICAgICAgICAgICB0aGlzLl9zaXplSGFuZGxlclRpbWVvdXQgPSBzZXRUaW1lb3V0KFxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaXplSGFuZGxlclRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuI3JlcXVlc3RzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NpemVIYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgIE1hdGgubWluKCsrdGhpcy4jY29ubkVycm9yTnVtYmVyICogNTAwLCAxMDAwMClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMYXVuY2ggbmV4dCB3YWl0aW5nIHRhc2sgcmVxdWVzdCBpZiBhdmFpbGFibGUgY29ubmVjdGlvbnMuXG4gICAqL1xuICBfcmVxdWVzdHNIYW5kbGVyKCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLiNyZXF1ZXN0VGltZW91dElkKTtcbiAgICB0aGlzLiNyZXF1ZXN0VGltZW91dElkID0gbnVsbDtcbiAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy4jcmVxdWVzdHMuc2hpZnQoKTtcbiAgICBpZiAocmVxdWVzdCkge1xuICAgICAgY29uc3QgY29ubiA9IHRoaXMuI2lkbGVDb25uZWN0aW9ucy5zaGlmdCgpO1xuICAgICAgaWYgKGNvbm4pIHtcbiAgICAgICAgaWYgKHRoaXMub3B0cy5sZWFrRGV0ZWN0aW9uVGltZW91dCA+IDApIHRoaXMuX2NoZWNrTGVhayhjb25uKTtcbiAgICAgICAgdGhpcy5lbWl0KCdhY3F1aXJlJywgY29ubik7XG4gICAgICAgIHRoaXMuI2FjdGl2ZUNvbm5lY3Rpb25zW2Nvbm4udGhyZWFkSWRdID0gY29ubjtcbiAgICAgICAgcmVxdWVzdC5yZXNvbHZlcihjb25uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuI3JlcXVlc3RzLnVuc2hpZnQocmVxdWVzdCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9yZXF1ZXN0VGltZW91dEhhbmRsZXIoKTtcbiAgICB9XG4gIH1cblxuICBfaGFzSWRsZUNvbm5lY3Rpb24oKSB7XG4gICAgcmV0dXJuICF0aGlzLiNpZGxlQ29ubmVjdGlvbnMuaXNFbXB0eSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBpZGxlIENvbm5lY3Rpb24uXG4gICAqIElmIGNvbm5lY3Rpb24gaGFzIG5vdCBiZWVuIHVzZWQgZm9yIHNvbWUgdGltZSAoIG1pbkRlbGF5VmFsaWRhdGlvbiksIHZhbGlkYXRlIGNvbm5lY3Rpb24gc3RhdHVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxDb25uZWN0aW9uPn0gY29ubmVjdGlvbiBvZiBudWxsIG9mIG5vIHZhbGlkIGlkbGUgY29ubmVjdGlvbi5cbiAgICovXG4gIGFzeW5jIF9kb0FjcXVpcmUoKSB7XG4gICAgaWYgKCF0aGlzLl9oYXNJZGxlQ29ubmVjdGlvbigpIHx8IHRoaXMuI2Nsb3NlZCkgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG4gICAgbGV0IGNvbm47XG4gICAgbGV0IG11c3RSZWNoZWNrU2l6ZSA9IGZhbHNlO1xuICAgIHdoaWxlICgoY29ubiA9IHRoaXMuI2lkbGVDb25uZWN0aW9ucy5zaGlmdCgpKSAhPSBudWxsKSB7XG4gICAgICAvL2p1c3QgY2hlY2sgY29ubmVjdGlvbiBzdGF0ZSBmaXJzdFxuICAgICAgaWYgKGNvbm4uaXNWYWxpZCgpKSB7XG4gICAgICAgIHRoaXMuI2FjdGl2ZUNvbm5lY3Rpb25zW2Nvbm4udGhyZWFkSWRdID0gY29ubjtcbiAgICAgICAgLy9pZiBub3QgdXNlZCBmb3Igc29tZSB0aW1lLCB2YWxpZGF0ZSBjb25uZWN0aW9uIHdpdGggYSBDT01fUElOR1xuICAgICAgICBpZiAodGhpcy5vcHRzLm1pbkRlbGF5VmFsaWRhdGlvbiA8PSAwIHx8IERhdGUubm93KCkgLSBjb25uLmxhc3RVc2UgPiB0aGlzLm9wdHMubWluRGVsYXlWYWxpZGF0aW9uKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNtZFBhcmFtID0gbmV3IENvbW1hbmRQYXJhbWV0ZXIobnVsbCwgbnVsbCwgeyB0aW1lb3V0OiB0aGlzLm9wdHMucGluZ1RpbWVvdXQgfSk7XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShjb25uLnBpbmcuYmluZChjb25uLCBjbWRQYXJhbSkpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLiNhY3RpdmVDb25uZWN0aW9uc1tjb25uLnRocmVhZElkXTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRzLmxlYWtEZXRlY3Rpb25UaW1lb3V0ID4gMCkgdGhpcy5fY2hlY2tMZWFrKGNvbm4pO1xuICAgICAgICBpZiAobXVzdFJlY2hlY2tTaXplKSBzZXRJbW1lZGlhdGUodGhpcy5lbWl0LmJpbmQodGhpcywgJ3ZhbGlkYXRlU2l6ZScpKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjb25uKTtcbiAgICAgIH1cbiAgICAgIG11c3RSZWNoZWNrU2l6ZSA9IHRydWU7XG4gICAgfVxuICAgIHNldEltbWVkaWF0ZSh0aGlzLmVtaXQuYmluZCh0aGlzLCAndmFsaWRhdGVTaXplJykpO1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuICB9XG5cbiAgX3JlcXVlc3RUaW1lb3V0SGFuZGxlcigpIHtcbiAgICAvL2hhbmRsZSBuZXh0IFRpbWVyXG4gICAgdGhpcy4jcmVxdWVzdFRpbWVvdXRJZCA9IG51bGw7XG4gICAgY29uc3QgY3VyclRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGxldCByZXF1ZXN0O1xuICAgIHdoaWxlICgocmVxdWVzdCA9IHRoaXMuI3JlcXVlc3RzLnBlZWtGcm9udCgpKSkge1xuICAgICAgaWYgKHJlcXVlc3QudGltZW91dCA8PSBjdXJyVGltZSkge1xuICAgICAgICB0aGlzLiNyZXF1ZXN0cy5zaGlmdCgpO1xuXG4gICAgICAgIGxldCBlcnIgPSBFcnJvcnMuY3JlYXRlRXJyb3IoXG4gICAgICAgICAgYHJldHJpZXZlIGNvbm5lY3Rpb24gZnJvbSBwb29sIHRpbWVvdXQgYWZ0ZXIgJHtNYXRoLmFicyhcbiAgICAgICAgICAgIERhdGUubm93KCkgLSAocmVxdWVzdC50aW1lb3V0IC0gdGhpcy5vcHRzLmFjcXVpcmVUaW1lb3V0KVxuICAgICAgICAgICl9bXMke3RoaXMuX2Vycm9yTXNnQWRkb24oKX1gLFxuICAgICAgICAgIEVycm9ycy5FUl9HRVRfQ09OTkVDVElPTl9USU1FT1VULFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgJ0hZMDAwJyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHJlcXVlc3Quc3RhY2tcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBpbiBvcmRlciB0byBwcm92aWRlIG1vcmUgaW5mb3JtYXRpb24gd2hlbiBjb25maWd1cmF0aW9uIGlzIHdyb25nIC8gc2VydmVyIGlzIGRvd25cbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlQ29ubmVjdGlvbnMoKSA9PT0gMCAmJiB0aGlzLiNlcnJvckNyZWF0aW5nQ29ubmVjdGlvbikge1xuICAgICAgICAgIGNvbnN0IGVyckNvbm5Nc2cgPSB0aGlzLiNlcnJvckNyZWF0aW5nQ29ubmVjdGlvbi5tZXNzYWdlLnNwbGl0KCdcXG4nKVswXTtcbiAgICAgICAgICBlcnIubWVzc2FnZSA9IGVyci5tZXNzYWdlICsgYFxcbiAgICBjb25uZWN0aW9uIGVycm9yOiAke2VyckNvbm5Nc2d9YDtcbiAgICAgICAgfVxuICAgICAgICByZXF1ZXN0LnJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4jcmVxdWVzdFRpbWVvdXRJZCA9IHNldFRpbWVvdXQodGhpcy5fcmVxdWVzdFRpbWVvdXRIYW5kbGVyLmJpbmQodGhpcyksIHJlcXVlc3QudGltZW91dCAtIGN1cnJUaW1lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZWFyY2ggaW5mbyBvYmplY3Qgb2YgYW4gZXhpc3RpbmcgY29ubmVjdGlvbi4gdG8ga25vdyBzZXJ2ZXIgdHlwZSBhbmQgdmVyc2lvbi5cbiAgICogQHJldHVybnMgaW5mb3JtYXRpb24gb2JqZWN0IGlmIGNvbm5lY3Rpb24gYXZhaWxhYmxlLlxuICAgKi9cbiAgX3NlYXJjaEluZm8oKSB7XG4gICAgbGV0IGluZm8gPSBudWxsO1xuICAgIGxldCBjb25uID0gdGhpcy4jaWRsZUNvbm5lY3Rpb25zLmdldCgwKTtcblxuICAgIGlmICghY29ubikge1xuICAgICAgZm9yIChjb25zdCB0aHJlYWRJZCBpbiBPYmplY3Qua2V5cyh0aGlzLiNhY3RpdmVDb25uZWN0aW9ucykpIHtcbiAgICAgICAgY29ubiA9IHRoaXMuI2FjdGl2ZUNvbm5lY3Rpb25zW3RocmVhZElkXTtcbiAgICAgICAgaWYgKCFjb25uKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29ubikge1xuICAgICAgaW5mbyA9IGNvbm4uaW5mbztcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG4gIH1cblxuICBfcmVqZWN0VGFzayh0YXNrLCBlcnIpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy4jcmVxdWVzdFRpbWVvdXRJZCk7XG4gICAgdGhpcy4jcmVxdWVzdFRpbWVvdXRJZCA9IG51bGw7XG4gICAgdGFzay5yZWplY3QoZXJyKTtcbiAgICB0aGlzLl9yZXF1ZXN0VGltZW91dEhhbmRsZXIoKTtcbiAgfVxuXG4gIGFzeW5jIF9jcmVhdGVDb25uZWN0aW9uKCkge1xuICAgIGNvbnN0IGNvbm4gPSBuZXcgQ29ubmVjdGlvbih0aGlzLm9wdHMuY29ubk9wdGlvbnMpO1xuICAgIGF3YWl0IGNvbm4uY29ubmVjdCgpO1xuICAgIGNvbnN0IHBvb2wgPSB0aGlzO1xuICAgIGNvbm4uZm9yY2VFbmQgPSBjb25uLmVuZDtcbiAgICBjb25uLnJlbGVhc2UgPSBmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgaWYgKHBvb2wuI2Nsb3NlZCB8fCAhY29ubi5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcG9vbC5fZGVzdHJveShjb25uKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocG9vbC5vcHRzLm5vQ29udHJvbEFmdGVyVXNlKSB7XG4gICAgICAgIHBvb2wucmVsZWFzZShjb25uKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvL2lmIHNlcnZlciBwZXJtaXQgaXQsIHJlc2V0IHRoZSBjb25uZWN0aW9uLCBvciByb2xsYmFjayBvbmx5IGlmIG5vdFxuICAgICAgLy8gQ09NX1JFU0VUX0NPTk5FQ1RJT04gZXhpc3Qgc2luY2UgbXlzcWwgNS43LjMgYW5kIG1hcmlhZGIgMTAuMi40XG4gICAgICAvLyBidXQgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCB3aXRoIG15c3FsIHdhaXRpbmcgZm9yIGh0dHBzOi8vYnVncy5teXNxbC5jb20vYnVnLnBocD9pZD05NzYzMyBjb3JyZWN0aW9uLlxuICAgICAgLy8gYW5kIG1hcmlhZGIgb25seSBzaW5jZSBodHRwczovL2ppcmEubWFyaWFkYi5vcmcvYnJvd3NlL01ERVYtMTgyODFcbiAgICAgIGxldCByZXZlcnRGdW5jdGlvbjtcbiAgICAgIGlmIChcbiAgICAgICAgcG9vbC5vcHRzLnJlc2V0QWZ0ZXJVc2UgJiZcbiAgICAgICAgY29ubi5pbmZvLmlzTWFyaWFEQigpICYmXG4gICAgICAgICgoY29ubi5pbmZvLnNlcnZlclZlcnNpb24ubWlub3IgPT09IDIgJiYgY29ubi5pbmZvLmhhc01pblZlcnNpb24oMTAsIDIsIDIyKSkgfHxcbiAgICAgICAgICBjb25uLmluZm8uaGFzTWluVmVyc2lvbigxMCwgMywgMTMpKVxuICAgICAgKSB7XG4gICAgICAgIHJldmVydEZ1bmN0aW9uID0gY29ubi5yZXNldC5iaW5kKGNvbm4sIG5ldyBDb21tYW5kUGFyYW1ldGVyKCkpO1xuICAgICAgfSBlbHNlIHJldmVydEZ1bmN0aW9uID0gY29ubi5jaGFuZ2VUcmFuc2FjdGlvbi5iaW5kKGNvbm4sIG5ldyBDb21tYW5kUGFyYW1ldGVyKCdST0xMQkFDSycpKTtcblxuICAgICAgbmV3IFByb21pc2UocmV2ZXJ0RnVuY3Rpb24pLnRoZW4ocG9vbC5yZWxlYXNlLmJpbmQocG9vbCwgY29ubiksIHBvb2wuX2Rlc3Ryb3kuYmluZChwb29sLCBjb25uKSkuZmluYWxseShyZXNvbHZlKTtcbiAgICB9O1xuICAgIGNvbm4uZW5kID0gY29ubi5yZWxlYXNlO1xuICAgIHJldHVybiBjb25uO1xuICB9XG5cbiAgX2xlYWtlZENvbm5lY3Rpb25zKCkge1xuICAgIGxldCBjb3VudGVyID0gMDtcbiAgICBmb3IgKGNvbnN0IGNvbm5lY3Rpb24gb2YgT2JqZWN0LnZhbHVlcyh0aGlzLiNhY3RpdmVDb25uZWN0aW9ucykpIHtcbiAgICAgIGlmIChjb25uZWN0aW9uICYmIGNvbm5lY3Rpb24ubGVha2VkKSBjb3VudGVyKys7XG4gICAgfVxuICAgIHJldHVybiBjb3VudGVyO1xuICB9XG5cbiAgX2Vycm9yTXNnQWRkb24oKSB7XG4gICAgaWYgKHRoaXMub3B0cy5sZWFrRGV0ZWN0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHJldHVybiBgXFxuICAgIChwb29sIGNvbm5lY3Rpb25zOiBhY3RpdmU9JHt0aGlzLmFjdGl2ZUNvbm5lY3Rpb25zKCl9IGlkbGU9JHt0aGlzLmlkbGVDb25uZWN0aW9ucygpfSBsZWFrPSR7dGhpcy5fbGVha2VkQ29ubmVjdGlvbnMoKX0gbGltaXQ9JHtcbiAgICAgICAgdGhpcy5vcHRzLmNvbm5lY3Rpb25MaW1pdFxuICAgICAgfSlgO1xuICAgIH1cbiAgICByZXR1cm4gYFxcbiAgICAocG9vbCBjb25uZWN0aW9uczogYWN0aXZlPSR7dGhpcy5hY3RpdmVDb25uZWN0aW9ucygpfSBpZGxlPSR7dGhpcy5pZGxlQ29ubmVjdGlvbnMoKX0gbGltaXQ9JHtcbiAgICAgIHRoaXMub3B0cy5jb25uZWN0aW9uTGltaXRcbiAgICB9KWA7XG4gIH1cblxuICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gIC8vIHB1YmxpYyBtZXRob2RzXG4gIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICBnZXQgY2xvc2VkKCkge1xuICAgIHJldHVybiB0aGlzLiNjbG9zZWQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGN1cnJlbnQgdG90YWwgY29ubmVjdGlvbiBudW1iZXIuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHRvdGFsQ29ubmVjdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlQ29ubmVjdGlvbnMoKSArIHRoaXMuaWRsZUNvbm5lY3Rpb25zKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGN1cnJlbnQgYWN0aXZlIGNvbm5lY3Rpb25zLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBhY3RpdmVDb25uZWN0aW9ucygpIHtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgZm9yIChjb25zdCBjb25uZWN0aW9uIG9mIE9iamVjdC52YWx1ZXModGhpcy4jYWN0aXZlQ29ubmVjdGlvbnMpKSB7XG4gICAgICBpZiAoY29ubmVjdGlvbikgY291bnRlcisrO1xuICAgIH1cbiAgICByZXR1cm4gY291bnRlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBpZGxlIGNvbm5lY3Rpb24gbnVtYmVyLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBpZGxlQ29ubmVjdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2lkbGVDb25uZWN0aW9ucy5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGN1cnJlbnQgc3RhY2tlZCBjb25uZWN0aW9uIHJlcXVlc3QuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHRhc2tRdWV1ZVNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3JlcXVlc3RzLmxlbmd0aDtcbiAgfVxuXG4gIGVzY2FwZSh2YWx1ZSkge1xuICAgIHJldHVybiBVdGlscy5lc2NhcGUodGhpcy5vcHRzLmNvbm5PcHRpb25zLCB0aGlzLl9zZWFyY2hJbmZvKCksIHZhbHVlKTtcbiAgfVxuXG4gIGVzY2FwZUlkKHZhbHVlKSB7XG4gICAgcmV0dXJuIFV0aWxzLmVzY2FwZUlkKHRoaXMub3B0cy5jb25uT3B0aW9ucywgdGhpcy5fc2VhcmNoSW5mbygpLCB2YWx1ZSk7XG4gIH1cblxuICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gIC8vIHByb21pc2UgbWV0aG9kc1xuICAvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGEgY29ubmVjdGlvbiBmcm9tIHBvb2wuXG4gICAqIENyZWF0ZSBhIG5ldyBvbmUsIGlmIGxpbWl0IGlzIG5vdCByZWFjaGVkLlxuICAgKiB3YWl0IHVudGlsIGFjcXVpcmVUaW1lb3V0LlxuICAgKiBAcGFyYW0gY21kUGFyYW0gZm9yIHN0YWNrVHJhY2UgZXJyb3JcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIGdldENvbm5lY3Rpb24oY21kUGFyYW0pIHtcbiAgICBpZiAodGhpcy4jY2xvc2VkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgIEVycm9ycy5jcmVhdGVFcnJvcigncG9vbCBpcyBjbG9zZWQnLCBFcnJvcnMuRVJfUE9PTF9BTFJFQURZX0NMT1NFRCwgbnVsbCwgJ0hZMDAwJywgbnVsbCwgZmFsc2UsIGNtZFBhcmFtLnN0YWNrKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2RvQWNxdWlyZSgpLnRoZW4oXG4gICAgICAoY29ubikgPT4ge1xuICAgICAgICAvLyBjb25uZWN0aW9uIGlzIGF2YWlsYWJsZS4gcHJvY2VzcyB0YXNrXG4gICAgICAgIHRoaXMuZW1pdCgnYWNxdWlyZScsIGNvbm4pO1xuICAgICAgICByZXR1cm4gY29ubjtcbiAgICAgIH0sXG4gICAgICAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLiNjbG9zZWQpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcnMuY3JlYXRlRXJyb3IoXG4gICAgICAgICAgICAnQ2Fubm90IGFkZCByZXF1ZXN0IHRvIHBvb2wsIHBvb2wgaXMgY2xvc2VkJyxcbiAgICAgICAgICAgIEVycm9ycy5FUl9QT09MX0FMUkVBRFlfQ0xPU0VELFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICdIWTAwMCcsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBjbWRQYXJhbS5zdGFja1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm8gaWRsZSBjb25uZWN0aW9uIGF2YWlsYWJsZVxuICAgICAgICAvLyBjcmVhdGUgYSBuZXcgY29ubmVjdGlvbiBpZiBsaW1pdCBpcyBub3QgcmVhY2hlZFxuICAgICAgICBzZXRJbW1lZGlhdGUodGhpcy5lbWl0LmJpbmQodGhpcywgJ3ZhbGlkYXRlU2l6ZScpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKFxuICAgICAgICAgIGZ1bmN0aW9uIChyZXNvbHZlciwgcmVqZWN0ZXIpIHtcbiAgICAgICAgICAgIC8vIHN0YWNrIHJlcXVlc3RcbiAgICAgICAgICAgIHNldEltbWVkaWF0ZSh0aGlzLmVtaXQuYmluZCh0aGlzLCAnZW5xdWV1ZScpKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdChEYXRlLm5vdygpICsgdGhpcy5vcHRzLmFjcXVpcmVUaW1lb3V0LCBjbWRQYXJhbS5zdGFjaywgcmVzb2x2ZXIsIHJlamVjdGVyKTtcbiAgICAgICAgICAgIHRoaXMuI3JlcXVlc3RzLnB1c2gocmVxdWVzdCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuI3JlcXVlc3RUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgICAgdGhpcy4jcmVxdWVzdFRpbWVvdXRJZCA9IHNldFRpbWVvdXQodGhpcy5fcmVxdWVzdFRpbWVvdXRIYW5kbGVyLmJpbmQodGhpcyksIHRoaXMub3B0cy5hY3F1aXJlVGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZSBhbGwgY29ubmVjdGlvbiBpbiBwb29sXG4gICAqIEVuZHMgaW4gbXVsdGlwbGUgc3RlcCA6XG4gICAqIC0gY2xvc2UgaWRsZSBjb25uZWN0aW9uc1xuICAgKiAtIGVuc3VyZSB0aGF0IG5vIG5ldyByZXF1ZXN0IGlzIHBvc3NpYmxlXG4gICAqICAgKGFjdGl2ZSBjb25uZWN0aW9uIHJlbGVhc2UgYXJlIGF1dG9tYXRpY2FsbHkgY2xvc2VkIG9uIHJlbGVhc2UpXG4gICAqIC0gaWYgcmVtYWluaW5nLCBhZnRlciAxMCBzZWNvbmRzLCBjbG9zZSByZW1haW5pbmcgYWN0aXZlIGNvbm5lY3Rpb25zXG4gICAqXG4gICAqIEByZXR1cm4gUHJvbWlzZVxuICAgKi9cbiAgZW5kKCkge1xuICAgIGlmICh0aGlzLiNjbG9zZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChFcnJvcnMuY3JlYXRlRXJyb3IoJ3Bvb2wgaXMgYWxyZWFkeSBjbG9zZWQnLCBFcnJvcnMuRVJfUE9PTF9BTFJFQURZX0NMT1NFRCkpO1xuICAgIH1cbiAgICB0aGlzLiNjbG9zZWQgPSB0cnVlO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy4jdW51c2VkQ29ubmVjdGlvblJlbW92ZXJJZCk7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9zaXplSGFuZGxlclRpbWVvdXQpO1xuICAgIGNvbnN0IGNtZFBhcmFtID0gbmV3IENvbW1hbmRQYXJhbWV0ZXIoKTtcbiAgICBpZiAodGhpcy5vcHRzLnRyYWNlKSBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShjbWRQYXJhbSk7XG4gICAgLy9jbG9zZSB1bnVzZWQgY29ubmVjdGlvbnNcbiAgICBjb25zdCBpZGxlQ29ubmVjdGlvbnNFbmRpbmdzID0gW107XG4gICAgbGV0IGNvbm47XG4gICAgd2hpbGUgKChjb25uID0gdGhpcy4jaWRsZUNvbm5lY3Rpb25zLnNoaWZ0KCkpKSB7XG4gICAgICBpZGxlQ29ubmVjdGlvbnNFbmRpbmdzLnB1c2gobmV3IFByb21pc2UoY29ubi5mb3JjZUVuZC5iaW5kKGNvbm4sIGNtZFBhcmFtKSkpO1xuICAgIH1cblxuICAgIGNsZWFyVGltZW91dCh0aGlzLiNyZXF1ZXN0VGltZW91dElkKTtcbiAgICB0aGlzLiNyZXF1ZXN0VGltZW91dElkID0gbnVsbDtcblxuICAgIC8vcmVqZWN0IGFsbCB3YWl0aW5nIHRhc2tcbiAgICBpZiAoIXRoaXMuI3JlcXVlc3RzLmlzRW1wdHkoKSkge1xuICAgICAgY29uc3QgZXJyID0gRXJyb3JzLmNyZWF0ZUVycm9yKFxuICAgICAgICAncG9vbCBpcyBlbmRpbmcsIGNvbm5lY3Rpb24gcmVxdWVzdCBhYm9ydGVkJyxcbiAgICAgICAgRXJyb3JzLkVSX0NMT1NJTkdfUE9PTCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgJ0hZMDAwJyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGNtZFBhcmFtLnN0YWNrXG4gICAgICApO1xuICAgICAgbGV0IHRhc2s7XG4gICAgICB3aGlsZSAoKHRhc2sgPSB0aGlzLiNyZXF1ZXN0cy5zaGlmdCgpKSkge1xuICAgICAgICB0YXNrLnJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwb29sID0gdGhpcztcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoaWRsZUNvbm5lY3Rpb25zRW5kaW5ncykudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICBpZiAocG9vbC5hY3RpdmVDb25uZWN0aW9ucygpID4gMCkge1xuICAgICAgICAvLyB3YWl0IHVwIHRvIDEwIHNlY29uZHMsIHRoYXQgYWN0aXZlIGNvbm5lY3Rpb24gYXJlIHJlbGVhc2VkXG4gICAgICAgIGxldCByZW1haW5pbmcgPSAxMDA7XG4gICAgICAgIHdoaWxlIChyZW1haW5pbmctLSA+IDApIHtcbiAgICAgICAgICBpZiAocG9vbC5hY3RpdmVDb25uZWN0aW9ucygpID4gMCkge1xuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlcykgPT4gc2V0VGltZW91dCgoKSA9PiByZXMoKSwgMTAwKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZm9yY2UgY2xvc2UgYW55IHJlbWFpbmluZyBhY3RpdmUgY29ubmVjdGlvbnNcbiAgICAgICAgZm9yIChjb25zdCBjb25uZWN0aW9uIG9mIE9iamVjdC52YWx1ZXMocG9vbC4jYWN0aXZlQ29ubmVjdGlvbnMpKSB7XG4gICAgICAgICAgaWYgKGNvbm5lY3Rpb24pIGNvbm5lY3Rpb24uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfSk7XG4gIH1cbn1cblxuY2xhc3MgUmVxdWVzdCB7XG4gIGNvbnN0cnVjdG9yKHRpbWVvdXQsIHN0YWNrLCByZXNvbHZlciwgcmVqZWN0ZXIpIHtcbiAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgIHRoaXMuc3RhY2sgPSBzdGFjaztcbiAgICB0aGlzLnJlc29sdmVyID0gcmVzb2x2ZXI7XG4gICAgdGhpcy5yZWplY3RlciA9IHJlamVjdGVyO1xuICB9XG5cbiAgcmVqZWN0KGVycikge1xuICAgIHByb2Nlc3MubmV4dFRpY2sodGhpcy5yZWplY3RlciwgZXJyKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvb2w7XG4iXSwibmFtZXMiOlsiRXZlbnRFbWl0dGVyIiwicmVxdWlyZSIsIlF1ZXVlIiwiRXJyb3JzIiwiVXRpbHMiLCJDb25uZWN0aW9uIiwiQ29tbWFuZFBhcmFtZXRlciIsIlBvb2wiLCJjbG9zZWQiLCJjb25uZWN0aW9uSW5DcmVhdGlvbiIsImVycm9yQ3JlYXRpbmdDb25uZWN0aW9uIiwiaWRsZUNvbm5lY3Rpb25zIiwiYWN0aXZlQ29ubmVjdGlvbnMiLCJyZXF1ZXN0cyIsInVudXNlZENvbm5lY3Rpb25SZW1vdmVySWQiLCJyZXF1ZXN0VGltZW91dElkIiwiY29ubkVycm9yTnVtYmVyIiwiaW5pdGlhbGl6ZWQiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJvcHRzIiwib24iLCJfcmVxdWVzdHNIYW5kbGVyIiwiX3NpemVIYW5kbGVyIiwiX2RvQ3JlYXRlQ29ubmVjdGlvbiIsInJlc29sdmUiLCJyZWplY3QiLCJ0aW1lb3V0RW5kIiwiX2NyZWF0ZUNvbm5lY3Rpb24iLCJ0aGVuIiwiY29ubiIsImZvcmNlRW5kIiwiY3JlYXRlRmF0YWxFcnJvciIsIkVSX0FERF9DT05ORUNUSU9OX0NMT1NFRF9QT09MIiwibGFzdFVzZSIsIkRhdGUiLCJub3ciLCJuYXRpdmVEZXN0cm95IiwiZGVzdHJveSIsImJpbmQiLCJwb29sIiwiX2VuZExlYWsiLCJ0aHJlYWRJZCIsImVtaXQiLCJvbmNlIiwiaWR4IiwiY3VyckNvbm4iLCJwZWVrQXQiLCJyZW1vdmVPbmUiLCJNYXRoIiwibWluIiwibWluRGVsYXlWYWxpZGF0aW9uIiwic2V0VGltZW91dCIsImlzRW1wdHkiLCJwdXNoIiwiY2F0Y2giLCJlcnIiLCJlcnJubyIsIm1lc3NhZ2UiLCJfZXJyb3JNc2dBZGRvbiIsIl9kZXN0cm95IiwidG90YWxDb25uZWN0aW9ucyIsIl9zdG9wUmVhcGluZyIsInJlbGVhc2UiLCJpc1ZhbGlkIiwicHJvY2VzcyIsIm5leHRUaWNrIiwiX2NoZWNrTGVhayIsImxlYWtlZCIsImxlYWtQcm9jZXNzIiwibG9nZ2VyIiwid2FybmluZyIsImluZm8iLCJsZWFrRGV0ZWN0aW9uVGltZW91dCIsImNsZWFyVGltZW91dCIsIl9zdGFydFJlYXBpbmciLCJpZGxlVGltZW91dCIsInNldEludGVydmFsIiwiX3JlYXBlciIsImNsZWFySW50ZXJ2YWwiLCJpZGxlVGltZVJlbW92YWwiLCJtYXhSZW1vdmFsIiwibWF4IiwibGVuZ3RoIiwibWluaW11bUlkbGUiLCJwZWVrIiwic2hpZnQiLCJfc2hvdWxkQ3JlYXRlTW9yZUNvbm5lY3Rpb25zIiwiY29ubmVjdGlvbkxpbWl0IiwiX3NpemVIYW5kbGVyVGltZW91dCIsInNldEltbWVkaWF0ZSIsImluaXRpYWxpemF0aW9uVGltZW91dCIsIlByb21pc2UiLCJyZXF1ZXN0IiwicmVzb2x2ZXIiLCJ1bnNoaWZ0IiwiX3JlcXVlc3RUaW1lb3V0SGFuZGxlciIsIl9oYXNJZGxlQ29ubmVjdGlvbiIsIl9kb0FjcXVpcmUiLCJtdXN0UmVjaGVja1NpemUiLCJjbWRQYXJhbSIsInRpbWVvdXQiLCJwaW5nVGltZW91dCIsInBpbmciLCJlIiwiY3VyclRpbWUiLCJwZWVrRnJvbnQiLCJjcmVhdGVFcnJvciIsImFicyIsImFjcXVpcmVUaW1lb3V0IiwiRVJfR0VUX0NPTk5FQ1RJT05fVElNRU9VVCIsInN0YWNrIiwiZXJyQ29ubk1zZyIsInNwbGl0IiwiX3NlYXJjaEluZm8iLCJnZXQiLCJPYmplY3QiLCJrZXlzIiwiX3JlamVjdFRhc2siLCJ0YXNrIiwiY29ubk9wdGlvbnMiLCJjb25uZWN0IiwiZW5kIiwibm9Db250cm9sQWZ0ZXJVc2UiLCJyZXZlcnRGdW5jdGlvbiIsInJlc2V0QWZ0ZXJVc2UiLCJpc01hcmlhREIiLCJzZXJ2ZXJWZXJzaW9uIiwibWlub3IiLCJoYXNNaW5WZXJzaW9uIiwicmVzZXQiLCJjaGFuZ2VUcmFuc2FjdGlvbiIsImZpbmFsbHkiLCJfbGVha2VkQ29ubmVjdGlvbnMiLCJjb3VudGVyIiwiY29ubmVjdGlvbiIsInZhbHVlcyIsInRhc2tRdWV1ZVNpemUiLCJlc2NhcGUiLCJ2YWx1ZSIsImVzY2FwZUlkIiwiZ2V0Q29ubmVjdGlvbiIsIkVSX1BPT0xfQUxSRUFEWV9DTE9TRUQiLCJyZWplY3RlciIsIlJlcXVlc3QiLCJ0cmFjZSIsIkVycm9yIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJpZGxlQ29ubmVjdGlvbnNFbmRpbmdzIiwiRVJfQ0xPU0lOR19QT09MIiwiYWxsIiwicmVtYWluaW5nIiwicmVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/lib/pool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/promise.js":
/*!*****************************************!*\
  !*** ./node_modules/mariadb/promise.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//  SPDX-License-Identifier: LGPL-2.1-or-later\n//  Copyright (c) 2015-2023 MariaDB Corporation Ab\n\n__webpack_require__(/*! ./check-node */ \"(rsc)/./node_modules/mariadb/check-node.js\");\nconst Connection = __webpack_require__(/*! ./lib/connection */ \"(rsc)/./node_modules/mariadb/lib/connection.js\");\nconst ConnectionPromise = __webpack_require__(/*! ./lib/connection-promise */ \"(rsc)/./node_modules/mariadb/lib/connection-promise.js\");\nconst PoolPromise = __webpack_require__(/*! ./lib/pool-promise */ \"(rsc)/./node_modules/mariadb/lib/pool-promise.js\");\nconst Cluster = __webpack_require__(/*! ./lib/cluster */ \"(rsc)/./node_modules/mariadb/lib/cluster.js\");\nconst ConnOptions = __webpack_require__(/*! ./lib/config/connection-options */ \"(rsc)/./node_modules/mariadb/lib/config/connection-options.js\");\nconst PoolOptions = __webpack_require__(/*! ./lib/config/pool-options */ \"(rsc)/./node_modules/mariadb/lib/config/pool-options.js\");\nconst ClusterOptions = __webpack_require__(/*! ./lib/config/cluster-options */ \"(rsc)/./node_modules/mariadb/lib/config/cluster-options.js\");\nconst CommandParameter = __webpack_require__(/*! ./lib/command-parameter */ \"(rsc)/./node_modules/mariadb/lib/command-parameter.js\");\nmodule.exports.version = __webpack_require__(/*! ./package.json */ \"(rsc)/./node_modules/mariadb/package.json\").version;\nmodule.exports.SqlError = __webpack_require__(/*! ./lib/misc/errors */ \"(rsc)/./node_modules/mariadb/lib/misc/errors.js\").SqlError;\nmodule.exports.defaultOptions = function defaultOptions(opts) {\n    const connOpts = new ConnOptions(opts);\n    const res = {};\n    for (const [key, value] of Object.entries(connOpts)){\n        if (!key.startsWith(\"_\")) {\n            res[key] = value;\n        }\n    }\n    return res;\n};\nmodule.exports.createConnection = function createConnection(opts) {\n    try {\n        const options = new ConnOptions(opts);\n        const conn = new Connection(options);\n        const connPromise = new ConnectionPromise(conn);\n        return conn.connect().then(()=>Promise.resolve(connPromise));\n    } catch (err) {\n        return Promise.reject(err);\n    }\n};\nmodule.exports.createPool = function createPool(opts) {\n    const options = new PoolOptions(opts);\n    const pool = new PoolPromise(options);\n    // adding a default error handler to avoid exiting application on connection error.\n    pool.on(\"error\", (err)=>{});\n    return pool;\n};\nmodule.exports.createPoolCluster = function createPoolCluster(opts) {\n    const options = new ClusterOptions(opts);\n    return new Cluster(options);\n};\nmodule.exports.importFile = function importFile(opts) {\n    try {\n        const options = new ConnOptions(opts);\n        const conn = new Connection(options);\n        return conn.connect().then(()=>{\n            return new Promise(conn.importFile.bind(conn, Object.assign({\n                skipDbCheck: true\n            }, opts)));\n        }).finally(()=>{\n            new Promise(conn.end.bind(conn, new CommandParameter())).catch(console.log);\n        });\n    } catch (err) {\n        return Promise.reject(err);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9wcm9taXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhDQUE4QztBQUM5QyxrREFBa0Q7QUFFbEQ7QUFFQUEsbUJBQU9BLENBQUM7QUFFUixNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQztBQUMzQixNQUFNRSxvQkFBb0JGLG1CQUFPQSxDQUFDO0FBQ2xDLE1BQU1HLGNBQWNILG1CQUFPQSxDQUFDO0FBQzVCLE1BQU1JLFVBQVVKLG1CQUFPQSxDQUFDO0FBRXhCLE1BQU1LLGNBQWNMLG1CQUFPQSxDQUFDO0FBQzVCLE1BQU1NLGNBQWNOLG1CQUFPQSxDQUFDO0FBQzVCLE1BQU1PLGlCQUFpQlAsbUJBQU9BLENBQUM7QUFDL0IsTUFBTVEsbUJBQW1CUixtQkFBT0EsQ0FBQztBQUVqQ1MsdUhBQTBEO0FBQzFEQSxrSUFBK0Q7QUFFL0RBLDZCQUE2QixHQUFHLFNBQVNJLGVBQWVDLElBQUk7SUFDMUQsTUFBTUMsV0FBVyxJQUFJVixZQUFZUztJQUNqQyxNQUFNRSxNQUFNLENBQUM7SUFDYixLQUFLLE1BQU0sQ0FBQ0MsS0FBS0MsTUFBTSxJQUFJQyxPQUFPQyxPQUFPLENBQUNMLFVBQVc7UUFDbkQsSUFBSSxDQUFDRSxJQUFJSSxVQUFVLENBQUMsTUFBTTtZQUN4QkwsR0FBRyxDQUFDQyxJQUFJLEdBQUdDO1FBQ2I7SUFDRjtJQUNBLE9BQU9GO0FBQ1Q7QUFFQVAsK0JBQStCLEdBQUcsU0FBU2EsaUJBQWlCUixJQUFJO0lBQzlELElBQUk7UUFDRixNQUFNUyxVQUFVLElBQUlsQixZQUFZUztRQUNoQyxNQUFNVSxPQUFPLElBQUl2QixXQUFXc0I7UUFDNUIsTUFBTUUsY0FBYyxJQUFJdkIsa0JBQWtCc0I7UUFFMUMsT0FBT0EsS0FBS0UsT0FBTyxHQUFHQyxJQUFJLENBQUMsSUFBTUMsUUFBUUMsT0FBTyxDQUFDSjtJQUNuRCxFQUFFLE9BQU9LLEtBQUs7UUFDWixPQUFPRixRQUFRRyxNQUFNLENBQUNEO0lBQ3hCO0FBQ0Y7QUFFQXJCLHlCQUF5QixHQUFHLFNBQVN1QixXQUFXbEIsSUFBSTtJQUNsRCxNQUFNUyxVQUFVLElBQUlqQixZQUFZUTtJQUNoQyxNQUFNbUIsT0FBTyxJQUFJOUIsWUFBWW9CO0lBQzdCLG1GQUFtRjtJQUNuRlUsS0FBS0MsRUFBRSxDQUFDLFNBQVMsQ0FBQ0osT0FBUztJQUMzQixPQUFPRztBQUNUO0FBRUF4QixnQ0FBZ0MsR0FBRyxTQUFTMEIsa0JBQWtCckIsSUFBSTtJQUNoRSxNQUFNUyxVQUFVLElBQUloQixlQUFlTztJQUNuQyxPQUFPLElBQUlWLFFBQVFtQjtBQUNyQjtBQUVBZCx5QkFBeUIsR0FBRyxTQUFTMkIsV0FBV3RCLElBQUk7SUFDbEQsSUFBSTtRQUNGLE1BQU1TLFVBQVUsSUFBSWxCLFlBQVlTO1FBQ2hDLE1BQU1VLE9BQU8sSUFBSXZCLFdBQVdzQjtRQUU1QixPQUFPQyxLQUNKRSxPQUFPLEdBQ1BDLElBQUksQ0FBQztZQUNKLE9BQU8sSUFBSUMsUUFBUUosS0FBS1ksVUFBVSxDQUFDQyxJQUFJLENBQUNiLE1BQU1MLE9BQU9tQixNQUFNLENBQUM7Z0JBQUVDLGFBQWE7WUFBSyxHQUFHekI7UUFDckYsR0FDQzBCLE9BQU8sQ0FBQztZQUNQLElBQUlaLFFBQVFKLEtBQUtpQixHQUFHLENBQUNKLElBQUksQ0FBQ2IsTUFBTSxJQUFJaEIscUJBQXFCa0MsS0FBSyxDQUFDQyxRQUFRQyxHQUFHO1FBQzVFO0lBQ0osRUFBRSxPQUFPZCxLQUFLO1FBQ1osT0FBT0YsUUFBUUcsTUFBTSxDQUFDRDtJQUN4QjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGZuZXh0anMvLi9ub2RlX21vZHVsZXMvbWFyaWFkYi9wcm9taXNlLmpzP2EyZmYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBMR1BMLTIuMS1vci1sYXRlclxuLy8gIENvcHlyaWdodCAoYykgMjAxNS0yMDIzIE1hcmlhREIgQ29ycG9yYXRpb24gQWJcblxuJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL2NoZWNrLW5vZGUnKTtcblxuY29uc3QgQ29ubmVjdGlvbiA9IHJlcXVpcmUoJy4vbGliL2Nvbm5lY3Rpb24nKTtcbmNvbnN0IENvbm5lY3Rpb25Qcm9taXNlID0gcmVxdWlyZSgnLi9saWIvY29ubmVjdGlvbi1wcm9taXNlJyk7XG5jb25zdCBQb29sUHJvbWlzZSA9IHJlcXVpcmUoJy4vbGliL3Bvb2wtcHJvbWlzZScpO1xuY29uc3QgQ2x1c3RlciA9IHJlcXVpcmUoJy4vbGliL2NsdXN0ZXInKTtcblxuY29uc3QgQ29ubk9wdGlvbnMgPSByZXF1aXJlKCcuL2xpYi9jb25maWcvY29ubmVjdGlvbi1vcHRpb25zJyk7XG5jb25zdCBQb29sT3B0aW9ucyA9IHJlcXVpcmUoJy4vbGliL2NvbmZpZy9wb29sLW9wdGlvbnMnKTtcbmNvbnN0IENsdXN0ZXJPcHRpb25zID0gcmVxdWlyZSgnLi9saWIvY29uZmlnL2NsdXN0ZXItb3B0aW9ucycpO1xuY29uc3QgQ29tbWFuZFBhcmFtZXRlciA9IHJlcXVpcmUoJy4vbGliL2NvbW1hbmQtcGFyYW1ldGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzLnZlcnNpb24gPSByZXF1aXJlKCcuL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG5tb2R1bGUuZXhwb3J0cy5TcWxFcnJvciA9IHJlcXVpcmUoJy4vbGliL21pc2MvZXJyb3JzJykuU3FsRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzLmRlZmF1bHRPcHRpb25zID0gZnVuY3Rpb24gZGVmYXVsdE9wdGlvbnMob3B0cykge1xuICBjb25zdCBjb25uT3B0cyA9IG5ldyBDb25uT3B0aW9ucyhvcHRzKTtcbiAgY29uc3QgcmVzID0ge307XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGNvbm5PcHRzKSkge1xuICAgIGlmICgha2V5LnN0YXJ0c1dpdGgoJ18nKSkge1xuICAgICAgcmVzW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbm1vZHVsZS5leHBvcnRzLmNyZWF0ZUNvbm5lY3Rpb24gPSBmdW5jdGlvbiBjcmVhdGVDb25uZWN0aW9uKG9wdHMpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBvcHRpb25zID0gbmV3IENvbm5PcHRpb25zKG9wdHMpO1xuICAgIGNvbnN0IGNvbm4gPSBuZXcgQ29ubmVjdGlvbihvcHRpb25zKTtcbiAgICBjb25zdCBjb25uUHJvbWlzZSA9IG5ldyBDb25uZWN0aW9uUHJvbWlzZShjb25uKTtcblxuICAgIHJldHVybiBjb25uLmNvbm5lY3QoKS50aGVuKCgpID0+IFByb21pc2UucmVzb2x2ZShjb25uUHJvbWlzZSkpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuY3JlYXRlUG9vbCA9IGZ1bmN0aW9uIGNyZWF0ZVBvb2wob3B0cykge1xuICBjb25zdCBvcHRpb25zID0gbmV3IFBvb2xPcHRpb25zKG9wdHMpO1xuICBjb25zdCBwb29sID0gbmV3IFBvb2xQcm9taXNlKG9wdGlvbnMpO1xuICAvLyBhZGRpbmcgYSBkZWZhdWx0IGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgZXhpdGluZyBhcHBsaWNhdGlvbiBvbiBjb25uZWN0aW9uIGVycm9yLlxuICBwb29sLm9uKCdlcnJvcicsIChlcnIpID0+IHt9KTtcbiAgcmV0dXJuIHBvb2w7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5jcmVhdGVQb29sQ2x1c3RlciA9IGZ1bmN0aW9uIGNyZWF0ZVBvb2xDbHVzdGVyKG9wdHMpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IG5ldyBDbHVzdGVyT3B0aW9ucyhvcHRzKTtcbiAgcmV0dXJuIG5ldyBDbHVzdGVyKG9wdGlvbnMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMuaW1wb3J0RmlsZSA9IGZ1bmN0aW9uIGltcG9ydEZpbGUob3B0cykge1xuICB0cnkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBuZXcgQ29ubk9wdGlvbnMob3B0cyk7XG4gICAgY29uc3QgY29ubiA9IG5ldyBDb25uZWN0aW9uKG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIGNvbm5cbiAgICAgIC5jb25uZWN0KClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGNvbm4uaW1wb3J0RmlsZS5iaW5kKGNvbm4sIE9iamVjdC5hc3NpZ24oeyBza2lwRGJDaGVjazogdHJ1ZSB9LCBvcHRzKSkpO1xuICAgICAgfSlcbiAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgbmV3IFByb21pc2UoY29ubi5lbmQuYmluZChjb25uLCBuZXcgQ29tbWFuZFBhcmFtZXRlcigpKSkuY2F0Y2goY29uc29sZS5sb2cpO1xuICAgICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJDb25uZWN0aW9uIiwiQ29ubmVjdGlvblByb21pc2UiLCJQb29sUHJvbWlzZSIsIkNsdXN0ZXIiLCJDb25uT3B0aW9ucyIsIlBvb2xPcHRpb25zIiwiQ2x1c3Rlck9wdGlvbnMiLCJDb21tYW5kUGFyYW1ldGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsInZlcnNpb24iLCJTcWxFcnJvciIsImRlZmF1bHRPcHRpb25zIiwib3B0cyIsImNvbm5PcHRzIiwicmVzIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwic3RhcnRzV2l0aCIsImNyZWF0ZUNvbm5lY3Rpb24iLCJvcHRpb25zIiwiY29ubiIsImNvbm5Qcm9taXNlIiwiY29ubmVjdCIsInRoZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImVyciIsInJlamVjdCIsImNyZWF0ZVBvb2wiLCJwb29sIiwib24iLCJjcmVhdGVQb29sQ2x1c3RlciIsImltcG9ydEZpbGUiLCJiaW5kIiwiYXNzaWduIiwic2tpcERiQ2hlY2siLCJmaW5hbGx5IiwiZW5kIiwiY2F0Y2giLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mariadb/promise.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mariadb/package.json":
/*!*******************************************!*\
  !*** ./node_modules/mariadb/package.json ***!
  \*******************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"mariadb","version":"3.2.2","description":"fast mariadb or mysql connector.","main":"promise.js","types":"types/index.d.ts","directories":{"lib":"lib","test":"test"},"private":false,"scripts":{"test":"npm run test:types-prettier && npm run test:prettier && npm run test:types && npm run test:lint && npm run test:base","test:base":"mocha --no-parallel --timeout 5000 \\"test/**/*.js\\" ","test:lint":"eslint \\"*.js\\" \\"{lib,test}/**/*.js\\" ","test:types":"eslint \\"types/*.ts\\" ","test:types-prettier":"prettier --write \\"types/*.ts\\"","test:prettier":"prettier --write \\"*.js\\" \\"{tools,lib,test,benchmarks}/**/*.js\\"","coverage":"npm run coverage:test && npm run coverage:create && npm run coverage:send","coverage:test":"nyc mocha --no-parallel --timeout 5000 \\"test/**/*.js\\"","coverage:report":"npm run coverage:create && npm run coverage:send","coverage:create":"nyc report --reporter=text-lcov > coverage.lcov","coverage:send":"./codecov --disable=gcov","benchmark":"node benchmarks/benchmarks-all.js","generate":"node ./tools/generate-mariadb.js"},"repository":{"type":"git","url":"git+https://github.com/mariadb-corporation/mariadb-connector-nodejs.git"},"keywords":["mariadb","mysql","client","driver","connector"],"files":["lib","types/index.d.ts","promise.js","check-node.js","callback.js"],"engines":{"node":">= 12"},"author":"Diego Dupin <diego.dupin@mariadb.com>","license":"LGPL-2.1-or-later","dependencies":{"@types/geojson":"^7946.0.10","@types/node":"^17.0.45","denque":"^2.1.0","iconv-lite":"^0.6.3","lru-cache":"^10.0.1"},"devDependencies":{"@typescript-eslint/eslint-plugin":"^6.6.0","@typescript-eslint/parser":"^6.6.0","benchmark":"^2.1.4","chai":"^4.3.8","chalk":"^4.1.2","dom-parser":"^0.1.6","error-stack-parser":"^2.1.4","eslint":"^8.48.0","eslint-config-prettier":"^9.0.0","eslint-plugin-markdown":"^3.0.1","eslint-plugin-prettier":"^5.0.0","mocha":"^10.2.0","mocha-lcov-reporter":"^1.3.0","nyc":"^15.1.0","prettier":"^3.0.3","typescript":"^4.9.5","winston":"^3.10.0"},"bugs":{"url":"https://jira.mariadb.org/projects/CONJS/"},"homepage":"https://github.com/mariadb-corporation/mariadb-connector-nodejs#readme"}');

/***/ })

};
;